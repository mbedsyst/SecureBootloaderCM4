
BOOT0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08001778  08001778  00002778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e48  08001e48  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e48  08001e48  00002e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e50  08001e50  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e50  08001e50  00002e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e54  08001e54  00002e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001e58  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000005c  08001eb4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08001eb4  000031f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001973  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008f6  00000000  00000000  000049ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  000052f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000183  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd35  00000000  00000000  000056b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d8a  00000000  00000000  000153e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000556f8  00000000  00000000  00018172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d86a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e60  00000000  00000000  0006d8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0006e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001760 	.word	0x08001760

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001760 	.word	0x08001760

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <BOOT_PrintBanner>:
#include "Drivers/CRC.h"

static app_metadata_t applicationMetadata;

static void BOOT_PrintBanner(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	printf(" ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______ \n\r");
 8000284:	4817      	ldr	r0, [pc, #92]	@ (80002e4 <BOOT_PrintBanner+0x64>)
 8000286:	f000 fbfd 	bl	8000a84 <iprintf>
	printf("|______||______||______||______||______||______||______||______||______||______||______|\n\r");
 800028a:	4817      	ldr	r0, [pc, #92]	@ (80002e8 <BOOT_PrintBanner+0x68>)
 800028c:	f000 fbfa 	bl	8000a84 <iprintf>
	printf("                                                                                        \n\r");
 8000290:	4816      	ldr	r0, [pc, #88]	@ (80002ec <BOOT_PrintBanner+0x6c>)
 8000292:	f000 fbf7 	bl	8000a84 <iprintf>
	printf("   ███████ ███████  ██████ ██    ██ ██████  ███████ ██████   ██████   ██████  ████████  \n\r");
 8000296:	4816      	ldr	r0, [pc, #88]	@ (80002f0 <BOOT_PrintBanner+0x70>)
 8000298:	f000 fbf4 	bl	8000a84 <iprintf>
	printf("   ██      ██      ██      ██    ██ ██   ██ ██      ██   ██ ██    ██ ██    ██    ██     \n\r");
 800029c:	4815      	ldr	r0, [pc, #84]	@ (80002f4 <BOOT_PrintBanner+0x74>)
 800029e:	f000 fbf1 	bl	8000a84 <iprintf>
	printf("   ███████ █████   ██      ██    ██ ██████  █████   ██████  ██    ██ ██    ██    ██     \n\r");
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <BOOT_PrintBanner+0x78>)
 80002a4:	f000 fbee 	bl	8000a84 <iprintf>
	printf("        ██ ██      ██      ██    ██ ██   ██ ██      ██   ██ ██    ██ ██    ██    ██     \n\r");
 80002a8:	4814      	ldr	r0, [pc, #80]	@ (80002fc <BOOT_PrintBanner+0x7c>)
 80002aa:	f000 fbeb 	bl	8000a84 <iprintf>
	printf("   ███████ ███████  ██████  ██████  ██   ██ ███████ ██████   ██████   ██████     ██     \n\r");
 80002ae:	4814      	ldr	r0, [pc, #80]	@ (8000300 <BOOT_PrintBanner+0x80>)
 80002b0:	f000 fbe8 	bl	8000a84 <iprintf>
	printf("                                                                                        \n\r");
 80002b4:	480d      	ldr	r0, [pc, #52]	@ (80002ec <BOOT_PrintBanner+0x6c>)
 80002b6:	f000 fbe5 	bl	8000a84 <iprintf>
	printf(" ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______ \n\r");
 80002ba:	480a      	ldr	r0, [pc, #40]	@ (80002e4 <BOOT_PrintBanner+0x64>)
 80002bc:	f000 fbe2 	bl	8000a84 <iprintf>
	printf("|______||______||______||______||______||______||______||______||______||______||______|\n\r");
 80002c0:	4809      	ldr	r0, [pc, #36]	@ (80002e8 <BOOT_PrintBanner+0x68>)
 80002c2:	f000 fbdf 	bl	8000a84 <iprintf>
	printf("                                                                                        \n\r");
 80002c6:	4809      	ldr	r0, [pc, #36]	@ (80002ec <BOOT_PrintBanner+0x6c>)
 80002c8:	f000 fbdc 	bl	8000a84 <iprintf>
	printf("                                                                                        \n\r");
 80002cc:	4807      	ldr	r0, [pc, #28]	@ (80002ec <BOOT_PrintBanner+0x6c>)
 80002ce:	f000 fbd9 	bl	8000a84 <iprintf>
	printf("                                                                                        \n\r");
 80002d2:	4806      	ldr	r0, [pc, #24]	@ (80002ec <BOOT_PrintBanner+0x6c>)
 80002d4:	f000 fbd6 	bl	8000a84 <iprintf>
	printf("[info] Initializing Bootloader.\n\r");
 80002d8:	480a      	ldr	r0, [pc, #40]	@ (8000304 <BOOT_PrintBanner+0x84>)
 80002da:	f000 fbd3 	bl	8000a84 <iprintf>

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	08001778 	.word	0x08001778
 80002e8:	080017d4 	.word	0x080017d4
 80002ec:	08001830 	.word	0x08001830
 80002f0:	0800188c 	.word	0x0800188c
 80002f4:	08001968 	.word	0x08001968
 80002f8:	08001a00 	.word	0x08001a00
 80002fc:	08001ab8 	.word	0x08001ab8
 8000300:	08001b50 	.word	0x08001b50
 8000304:	08001c20 	.word	0x08001c20

08000308 <BOOT_Init>:

void BOOT_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	LED_Init();
 800030c:	f000 f9a4 	bl	8000658 <LED_Init>
	UART2_Init();
 8000310:	f000 fa0a 	bl	8000728 <UART2_Init>
	CRC_Init();
 8000314:	f000 f956 	bl	80005c4 <CRC_Init>
	BOOT_PrintBanner();
 8000318:	f7ff ffb2 	bl	8000280 <BOOT_PrintBanner>

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <BOOT_DeInit>:

static void BOOT_DeInit(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	printf("[info] De-Initializing Bootloader.\n\r");
 8000324:	4805      	ldr	r0, [pc, #20]	@ (800033c <BOOT_DeInit+0x1c>)
 8000326:	f000 fbad 	bl	8000a84 <iprintf>
	LED_DeInit();
 800032a:	f000 f9c5 	bl	80006b8 <LED_DeInit>
	UART2_DeInit();
 800032e:	f000 fa37 	bl	80007a0 <UART2_DeInit>
	CRC_DeInit();
 8000332:	f000 f95f 	bl	80005f4 <CRC_DeInit>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08001c44 	.word	0x08001c44

08000340 <BOOT_SaveMetadata>:

static void BOOT_SaveMetadata(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	applicationMetadata.id = *(volatile uint32_t *)APP_ID_ADDR;
 8000344:	4b16      	ldr	r3, [pc, #88]	@ (80003a0 <BOOT_SaveMetadata+0x60>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a16      	ldr	r2, [pc, #88]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 800034a:	6013      	str	r3, [r2, #0]
	applicationMetadata.version = *(volatile uint32_t *)APP_VERSION_ADDR;
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <BOOT_SaveMetadata+0x60>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3304      	adds	r3, #4
 8000352:	4a14      	ldr	r2, [pc, #80]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 8000354:	60d3      	str	r3, [r2, #12]
	applicationMetadata.size = *(volatile uint32_t *)APP_SIZE_ADDR;
 8000356:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <BOOT_SaveMetadata+0x60>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3308      	adds	r3, #8
 800035c:	4a11      	ldr	r2, [pc, #68]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 800035e:	6093      	str	r3, [r2, #8]
	applicationMetadata.crc = *(volatile uint32_t *)APP_CRC_ADDR;
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <BOOT_SaveMetadata+0x60>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	330c      	adds	r3, #12
 8000366:	4a0f      	ldr	r2, [pc, #60]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 8000368:	6113      	str	r3, [r2, #16]

	printf("[info] Application ID: 0x%08X\r\n", (unsigned int)applicationMetadata.id);
 800036a:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <BOOT_SaveMetadata+0x68>)
 8000372:	f000 fb87 	bl	8000a84 <iprintf>
	printf("[info] Application Version: %u\r\n", (unsigned int)applicationMetadata.version);
 8000376:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	4619      	mov	r1, r3
 800037c:	480b      	ldr	r0, [pc, #44]	@ (80003ac <BOOT_SaveMetadata+0x6c>)
 800037e:	f000 fb81 	bl	8000a84 <iprintf>
	printf("[info] Application File size: %u bytes\r\n", (unsigned int)applicationMetadata.size);
 8000382:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	4619      	mov	r1, r3
 8000388:	4809      	ldr	r0, [pc, #36]	@ (80003b0 <BOOT_SaveMetadata+0x70>)
 800038a:	f000 fb7b 	bl	8000a84 <iprintf>
	printf("[info] Application CRC Value: 0x%08X\r\n",(unsigned int)applicationMetadata.crc);
 800038e:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <BOOT_SaveMetadata+0x64>)
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	4619      	mov	r1, r3
 8000394:	4807      	ldr	r0, [pc, #28]	@ (80003b4 <BOOT_SaveMetadata+0x74>)
 8000396:	f000 fb75 	bl	8000a84 <iprintf>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	08008000 	.word	0x08008000
 80003a4:	20000078 	.word	0x20000078
 80003a8:	08001c6c 	.word	0x08001c6c
 80003ac:	08001c8c 	.word	0x08001c8c
 80003b0:	08001cb0 	.word	0x08001cb0
 80003b4:	08001cdc 	.word	0x08001cdc

080003b8 <BOOT_LocateApplication>:

uint32_t BOOT_LocateApplication(uint32_t app_id_address)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint32_t appID = *(volatile uint32_t *)app_id_address;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	60fb      	str	r3, [r7, #12]
	if(appID != APP_ID)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	4a0a      	ldr	r2, [pc, #40]	@ (80003f4 <BOOT_LocateApplication+0x3c>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d005      	beq.n	80003da <BOOT_LocateApplication+0x22>
	{
		printf("\033[0;31m[error] Application missing at: 0x%08X\033[0m\n\r", (unsigned int)app_id_address);
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <BOOT_LocateApplication+0x40>)
 80003d2:	f000 fb57 	bl	8000a84 <iprintf>
		return 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	e007      	b.n	80003ea <BOOT_LocateApplication+0x32>
	}
	printf("[info] Application found at: 0x%08X\n\r", (unsigned int)app_id_address);
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	4807      	ldr	r0, [pc, #28]	@ (80003fc <BOOT_LocateApplication+0x44>)
 80003de:	f000 fb51 	bl	8000a84 <iprintf>
	BOOT_SaveMetadata();
 80003e2:	f7ff ffad 	bl	8000340 <BOOT_SaveMetadata>
	return applicationMetadata.size;
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <BOOT_LocateApplication+0x48>)
 80003e8:	689b      	ldr	r3, [r3, #8]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	deadbeef 	.word	0xdeadbeef
 80003f8:	08001d04 	.word	0x08001d04
 80003fc:	08001d38 	.word	0x08001d38
 8000400:	20000078 	.word	0x20000078

08000404 <BOOT_VerifyApplication>:

bool BOOT_VerifyApplication(uint32_t app_size)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	uint32_t app_words = applicationMetadata.size/4;
 800040c:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <BOOT_VerifyApplication+0x4c>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	089b      	lsrs	r3, r3, #2
 8000412:	617b      	str	r3, [r7, #20]
	uint32_t appCRC = applicationMetadata.crc;
 8000414:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <BOOT_VerifyApplication+0x4c>)
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	613b      	str	r3, [r7, #16]
	const uint32_t appCODE = *(const uint32_t *)APP_CODE_START;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <BOOT_VerifyApplication+0x50>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3310      	adds	r3, #16
 8000420:	60fb      	str	r3, [r7, #12]
	uint32_t calculated_CRC = CRC_Calculate((const uint32_t *)appCODE, app_words);
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6979      	ldr	r1, [r7, #20]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f8f4 	bl	8000614 <CRC_Calculate>
 800042c:	60b8      	str	r0, [r7, #8]

	if(calculated_CRC != appCRC)
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	429a      	cmp	r2, r3
 8000434:	d004      	beq.n	8000440 <BOOT_VerifyApplication+0x3c>
	{
		printf("\033[0;31m[error] Application Verification failed: Checksum error.\033[0m\n\r");
 8000436:	4808      	ldr	r0, [pc, #32]	@ (8000458 <BOOT_VerifyApplication+0x54>)
 8000438:	f000 fb24 	bl	8000a84 <iprintf>
		return false;
 800043c:	2300      	movs	r3, #0
 800043e:	e003      	b.n	8000448 <BOOT_VerifyApplication+0x44>
	}

	printf("[info] Application Verification success: Checksum pass.\n\r");
 8000440:	4806      	ldr	r0, [pc, #24]	@ (800045c <BOOT_VerifyApplication+0x58>)
 8000442:	f000 fb1f 	bl	8000a84 <iprintf>
	return true;
 8000446:	2301      	movs	r3, #1
}
 8000448:	4618      	mov	r0, r3
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000078 	.word	0x20000078
 8000454:	08008000 	.word	0x08008000
 8000458:	08001d60 	.word	0x08001d60
 800045c:	08001da8 	.word	0x08001da8

08000460 <BOOT_LoadApplication>:

void BOOT_LoadApplication()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
	uint32_t app_code_start = APP_CODE_START;
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <BOOT_LoadApplication+0x40>)
 8000468:	617b      	str	r3, [r7, #20]
	uint32_t *app_vector_table = (uint32_t *)app_code_start;
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	613b      	str	r3, [r7, #16]
	uint32_t app_stack_pointer = app_vector_table[0];
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60fb      	str	r3, [r7, #12]
	uint32_t app_reset_handler = app_vector_table[1];
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047a:	b672      	cpsid	i
}
 800047c:	bf00      	nop

	__disable_irq();

	BOOT_DeInit();
 800047e:	f7ff ff4f 	bl	8000320 <BOOT_DeInit>

	SCB->VTOR = app_code_start;
 8000482:	4a08      	ldr	r2, [pc, #32]	@ (80004a4 <BOOT_LoadApplication+0x44>)
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	6093      	str	r3, [r2, #8]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	f383 8808 	msr	MSP, r3
}
 8000492:	bf00      	nop
	__set_MSP(app_stack_pointer);

	void (*reset_handler)(void) = (void (*)(void))app_reset_handler;
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	607b      	str	r3, [r7, #4]
	reset_handler();
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4798      	blx	r3
	while(1);
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <BOOT_LoadApplication+0x3c>
 80004a0:	08008010 	.word	0x08008010
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <BOOT_HandleErrors>:
}

void BOOT_HandleErrors(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	printf("\033[0;31m[error] Application Failed to Load.\033[0m\n\r");
 80004ac:	4802      	ldr	r0, [pc, #8]	@ (80004b8 <BOOT_HandleErrors+0x10>)
 80004ae:	f000 fae9 	bl	8000a84 <iprintf>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	08001de4 	.word	0x08001de4

080004bc <main>:
#include "main.h"

int main()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	uint32_t applicationSize;

	BOOT_Init();
 80004c2:	f7ff ff21 	bl	8000308 <BOOT_Init>
	applicationSize = BOOT_LocateApplication(APP_ID_ADDR);
 80004c6:	4809      	ldr	r0, [pc, #36]	@ (80004ec <main+0x30>)
 80004c8:	f7ff ff76 	bl	80003b8 <BOOT_LocateApplication>
 80004cc:	6078      	str	r0, [r7, #4]

	if(BOOT_VerifyApplication(applicationSize))
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff ff98 	bl	8000404 <BOOT_VerifyApplication>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <main+0x24>
	{
		BOOT_LoadApplication();
 80004da:	f7ff ffc1 	bl	8000460 <BOOT_LoadApplication>
 80004de:	e002      	b.n	80004e6 <main+0x2a>
	}
	else
	{
		BOOT_HandleErrors();
 80004e0:	f7ff ffe2 	bl	80004a8 <BOOT_HandleErrors>
	}
	while(1)
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	e7fd      	b.n	80004e6 <main+0x2a>
 80004ea:	bf00      	nop
 80004ec:	08008000 	.word	0x08008000

080004f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000518:	605a      	str	r2, [r3, #4]
  return 0;
 800051a:	2300      	movs	r3, #0
}
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <_isatty>:

int _isatty(int file)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000530:	2301      	movs	r3, #1
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800053e:	b480      	push	{r7}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f000 fb20 	bl	8000bcc <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	@ (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20018000 	.word	0x20018000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	200001f0 	.word	0x200001f0

080005c4 <CRC_Init>:
#include "Drivers/CRC.h"

void CRC_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <CRC_Init+0x28>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005cc:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <CRC_Init+0x28>)
 80005ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005d2:	6313      	str	r3, [r2, #48]	@ 0x30
	CRC->CR |= CRC_CR_RESET;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <CRC_Init+0x2c>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <CRC_Init+0x2c>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6093      	str	r3, [r2, #8]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40023000 	.word	0x40023000

080005f4 <CRC_DeInit>:

void CRC_DeInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_CRCEN;
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <CRC_DeInit+0x1c>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <CRC_DeInit+0x1c>)
 80005fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000602:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <CRC_Calculate>:

uint32_t CRC_Calculate(const uint32_t *data, uint32_t len)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	CRC->CR |= CRC_CR_RESET;
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <CRC_Calculate+0x40>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	4a0c      	ldr	r2, [pc, #48]	@ (8000654 <CRC_Calculate+0x40>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6093      	str	r3, [r2, #8]
	while(len--)
 800062a:	e005      	b.n	8000638 <CRC_Calculate+0x24>
	{
		CRC->DR = *data++;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1d1a      	adds	r2, r3, #4
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	4a08      	ldr	r2, [pc, #32]	@ (8000654 <CRC_Calculate+0x40>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6013      	str	r3, [r2, #0]
	while(len--)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	603a      	str	r2, [r7, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f4      	bne.n	800062c <CRC_Calculate+0x18>
	}
	return CRC->DR;
 8000642:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <CRC_Calculate+0x40>)
 8000644:	681b      	ldr	r3, [r3, #0]
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023000 	.word	0x40023000

08000658 <LED_Init>:
#include "Drivers/LED.h"

void LED_Init(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <LED_Init+0x58>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <LED_Init+0x58>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <LED_Init+0x5c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <LED_Init+0x5c>)
 800066e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000672:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <LED_Init+0x5c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <LED_Init+0x5c>)
 800067a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800067e:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <LED_Init+0x5c>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a0b      	ldr	r2, [pc, #44]	@ (80006b4 <LED_Init+0x5c>)
 8000686:	f023 0320 	bic.w	r3, r3, #32
 800068a:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <LED_Init+0x5c>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <LED_Init+0x5c>)
 8000692:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000696:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <LED_Init+0x5c>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <LED_Init+0x5c>)
 800069e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000

080006b8 <LED_DeInit>:

void LED_DeInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	 RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <LED_DeInit+0x1c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <LED_DeInit+0x1c>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	085a      	lsrs	r2, r3, #1
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	441a      	add	r2, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 800070a:	6839      	ldr	r1, [r7, #0]
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffe3 	bl	80006d8 <Compute_UART_Baud>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <UART2_SetBaudRate+0x24>)
 8000718:	609a      	str	r2, [r3, #8]
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40004400 	.word	0x40004400

08000728 <UART2_Init>:

void UART2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <UART2_Init+0x68>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <UART2_Init+0x68>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <UART2_Init+0x68>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <UART2_Init+0x68>)
 800073e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <UART2_Init+0x6c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <UART2_Init+0x6c>)
 800074a:	f023 0310 	bic.w	r3, r3, #16
 800074e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <UART2_Init+0x6c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <UART2_Init+0x6c>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <UART2_Init+0x6c>)
 800075e:	6a1b      	ldr	r3, [r3, #32]
 8000760:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <UART2_Init+0x6c>)
 8000762:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000766:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 8000768:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800076c:	480a      	ldr	r0, [pc, #40]	@ (8000798 <UART2_Init+0x70>)
 800076e:	f7ff ffc7 	bl	8000700 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <UART2_Init+0x74>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	4a09      	ldr	r2, [pc, #36]	@ (800079c <UART2_Init+0x74>)
 8000778:	f043 030c 	orr.w	r3, r3, #12
 800077c:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 800077e:	4b07      	ldr	r3, [pc, #28]	@ (800079c <UART2_Init+0x74>)
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <UART2_Init+0x74>)
 8000784:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000788:	60d3      	str	r3, [r2, #12]
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	00f42400 	.word	0x00f42400
 800079c:	40004400 	.word	0x40004400

080007a0 <UART2_DeInit>:

void UART2_DeInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <UART2_DeInit+0x28>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a8:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <UART2_DeInit+0x28>)
 80007aa:	f023 0301 	bic.w	r3, r3, #1
 80007ae:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR &= ~RCC_APB1ENR_USART2EN;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <UART2_DeInit+0x28>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <UART2_DeInit+0x28>)
 80007b6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <UART2_TxChar>:

void UART2_TxChar(char ch)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART2->SR & USART_SR_TXE));
 80007d6:	bf00      	nop
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <UART2_TxChar+0x2c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f9      	beq.n	80007d8 <UART2_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART2->DR = (ch &0xFF);
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <UART2_TxChar+0x2c>)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	6053      	str	r3, [r2, #4]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40004400 	.word	0x40004400

080007fc <UART2_RxChar>:
		UART2_TxChar(*str++);
	}
}

char UART2_RxChar(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE));
 8000800:	bf00      	nop
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <UART2_RxChar+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f9      	beq.n	8000802 <UART2_RxChar+0x6>
    return (char)(USART2->DR & 0xFF);
 800080e:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <UART2_RxChar+0x24>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	b2db      	uxtb	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40004400 	.word	0x40004400

08000824 <_write>:


int _write(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e009      	b.n	800084a <_write+0x26>
    {
        UART2_TxChar(ptr[i]);
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffc4 	bl	80007cc <UART2_TxChar>
    for (int i = 0; i < len; i++)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	dbf1      	blt.n	8000836 <_write+0x12>
    }
    return len;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_read>:

int _read(int file, char *ptr, int len)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
    (void)file;
    for (int i = 0; i < len; i++)
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e015      	b.n	800089a <_read+0x3e>
    {
        ptr[i] = UART2_RxChar();
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	18d4      	adds	r4, r2, r3
 8000874:	f7ff ffc2 	bl	80007fc <UART2_RxChar>
 8000878:	4603      	mov	r3, r0
 800087a:	7023      	strb	r3, [r4, #0]
        if (ptr[i] == '\r')
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b0d      	cmp	r3, #13
 8000886:	d105      	bne.n	8000894 <_read+0x38>
        {
            ptr[i] = '\n';
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	4413      	add	r3, r2
 800088e:	220a      	movs	r2, #10
 8000890:	701a      	strb	r2, [r3, #0]
            break;
 8000892:	e006      	b.n	80008a2 <_read+0x46>
    for (int i = 0; i < len; i++)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	429a      	cmp	r2, r3
 80008a0:	dbe5      	blt.n	800086e <_read+0x12>
        }
    }
    return len;
 80008a2:	687b      	ldr	r3, [r7, #4]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}

080008ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008da:	f000 f97d 	bl	8000bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008de:	f7ff fded 	bl	80004bc <main>

080008e2 <LoopForever>:

LoopForever:
  b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   r0, =_estack
 80008e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008f0:	08001e58 	.word	0x08001e58
  ldr r2, =_sbss
 80008f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008f8:	200001f0 	.word	0x200001f0

080008fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <std>:
 8000900:	2300      	movs	r3, #0
 8000902:	b510      	push	{r4, lr}
 8000904:	4604      	mov	r4, r0
 8000906:	e9c0 3300 	strd	r3, r3, [r0]
 800090a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800090e:	6083      	str	r3, [r0, #8]
 8000910:	8181      	strh	r1, [r0, #12]
 8000912:	6643      	str	r3, [r0, #100]	@ 0x64
 8000914:	81c2      	strh	r2, [r0, #14]
 8000916:	6183      	str	r3, [r0, #24]
 8000918:	4619      	mov	r1, r3
 800091a:	2208      	movs	r2, #8
 800091c:	305c      	adds	r0, #92	@ 0x5c
 800091e:	f000 f906 	bl	8000b2e <memset>
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <std+0x58>)
 8000924:	6263      	str	r3, [r4, #36]	@ 0x24
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <std+0x5c>)
 8000928:	62a3      	str	r3, [r4, #40]	@ 0x28
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <std+0x60>)
 800092c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <std+0x64>)
 8000930:	6323      	str	r3, [r4, #48]	@ 0x30
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <std+0x68>)
 8000934:	6224      	str	r4, [r4, #32]
 8000936:	429c      	cmp	r4, r3
 8000938:	d006      	beq.n	8000948 <std+0x48>
 800093a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800093e:	4294      	cmp	r4, r2
 8000940:	d002      	beq.n	8000948 <std+0x48>
 8000942:	33d0      	adds	r3, #208	@ 0xd0
 8000944:	429c      	cmp	r4, r3
 8000946:	d105      	bne.n	8000954 <std+0x54>
 8000948:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800094c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000950:	f000 b966 	b.w	8000c20 <__retarget_lock_init_recursive>
 8000954:	bd10      	pop	{r4, pc}
 8000956:	bf00      	nop
 8000958:	08000aa9 	.word	0x08000aa9
 800095c:	08000acb 	.word	0x08000acb
 8000960:	08000b03 	.word	0x08000b03
 8000964:	08000b27 	.word	0x08000b27
 8000968:	200000a4 	.word	0x200000a4

0800096c <stdio_exit_handler>:
 800096c:	4a02      	ldr	r2, [pc, #8]	@ (8000978 <stdio_exit_handler+0xc>)
 800096e:	4903      	ldr	r1, [pc, #12]	@ (800097c <stdio_exit_handler+0x10>)
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <stdio_exit_handler+0x14>)
 8000972:	f000 b869 	b.w	8000a48 <_fwalk_sglue>
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	080014c1 	.word	0x080014c1
 8000980:	20000010 	.word	0x20000010

08000984 <cleanup_stdio>:
 8000984:	6841      	ldr	r1, [r0, #4]
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <cleanup_stdio+0x34>)
 8000988:	4299      	cmp	r1, r3
 800098a:	b510      	push	{r4, lr}
 800098c:	4604      	mov	r4, r0
 800098e:	d001      	beq.n	8000994 <cleanup_stdio+0x10>
 8000990:	f000 fd96 	bl	80014c0 <_fflush_r>
 8000994:	68a1      	ldr	r1, [r4, #8]
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <cleanup_stdio+0x38>)
 8000998:	4299      	cmp	r1, r3
 800099a:	d002      	beq.n	80009a2 <cleanup_stdio+0x1e>
 800099c:	4620      	mov	r0, r4
 800099e:	f000 fd8f 	bl	80014c0 <_fflush_r>
 80009a2:	68e1      	ldr	r1, [r4, #12]
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <cleanup_stdio+0x3c>)
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d004      	beq.n	80009b4 <cleanup_stdio+0x30>
 80009aa:	4620      	mov	r0, r4
 80009ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b0:	f000 bd86 	b.w	80014c0 <_fflush_r>
 80009b4:	bd10      	pop	{r4, pc}
 80009b6:	bf00      	nop
 80009b8:	200000a4 	.word	0x200000a4
 80009bc:	2000010c 	.word	0x2000010c
 80009c0:	20000174 	.word	0x20000174

080009c4 <global_stdio_init.part.0>:
 80009c4:	b510      	push	{r4, lr}
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <global_stdio_init.part.0+0x30>)
 80009c8:	4c0b      	ldr	r4, [pc, #44]	@ (80009f8 <global_stdio_init.part.0+0x34>)
 80009ca:	4a0c      	ldr	r2, [pc, #48]	@ (80009fc <global_stdio_init.part.0+0x38>)
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	4620      	mov	r0, r4
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	f7ff ff94 	bl	8000900 <std>
 80009d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80009dc:	2201      	movs	r2, #1
 80009de:	2109      	movs	r1, #9
 80009e0:	f7ff ff8e 	bl	8000900 <std>
 80009e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80009e8:	2202      	movs	r2, #2
 80009ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009ee:	2112      	movs	r1, #18
 80009f0:	f7ff bf86 	b.w	8000900 <std>
 80009f4:	200001dc 	.word	0x200001dc
 80009f8:	200000a4 	.word	0x200000a4
 80009fc:	0800096d 	.word	0x0800096d

08000a00 <__sfp_lock_acquire>:
 8000a00:	4801      	ldr	r0, [pc, #4]	@ (8000a08 <__sfp_lock_acquire+0x8>)
 8000a02:	f000 b90e 	b.w	8000c22 <__retarget_lock_acquire_recursive>
 8000a06:	bf00      	nop
 8000a08:	200001e5 	.word	0x200001e5

08000a0c <__sfp_lock_release>:
 8000a0c:	4801      	ldr	r0, [pc, #4]	@ (8000a14 <__sfp_lock_release+0x8>)
 8000a0e:	f000 b909 	b.w	8000c24 <__retarget_lock_release_recursive>
 8000a12:	bf00      	nop
 8000a14:	200001e5 	.word	0x200001e5

08000a18 <__sinit>:
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	f7ff fff0 	bl	8000a00 <__sfp_lock_acquire>
 8000a20:	6a23      	ldr	r3, [r4, #32]
 8000a22:	b11b      	cbz	r3, 8000a2c <__sinit+0x14>
 8000a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a28:	f7ff bff0 	b.w	8000a0c <__sfp_lock_release>
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <__sinit+0x28>)
 8000a2e:	6223      	str	r3, [r4, #32]
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <__sinit+0x2c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f5      	bne.n	8000a24 <__sinit+0xc>
 8000a38:	f7ff ffc4 	bl	80009c4 <global_stdio_init.part.0>
 8000a3c:	e7f2      	b.n	8000a24 <__sinit+0xc>
 8000a3e:	bf00      	nop
 8000a40:	08000985 	.word	0x08000985
 8000a44:	200001dc 	.word	0x200001dc

08000a48 <_fwalk_sglue>:
 8000a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a4c:	4607      	mov	r7, r0
 8000a4e:	4688      	mov	r8, r1
 8000a50:	4614      	mov	r4, r2
 8000a52:	2600      	movs	r6, #0
 8000a54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a58:	f1b9 0901 	subs.w	r9, r9, #1
 8000a5c:	d505      	bpl.n	8000a6a <_fwalk_sglue+0x22>
 8000a5e:	6824      	ldr	r4, [r4, #0]
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d1f7      	bne.n	8000a54 <_fwalk_sglue+0xc>
 8000a64:	4630      	mov	r0, r6
 8000a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a6a:	89ab      	ldrh	r3, [r5, #12]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d907      	bls.n	8000a80 <_fwalk_sglue+0x38>
 8000a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a74:	3301      	adds	r3, #1
 8000a76:	d003      	beq.n	8000a80 <_fwalk_sglue+0x38>
 8000a78:	4629      	mov	r1, r5
 8000a7a:	4638      	mov	r0, r7
 8000a7c:	47c0      	blx	r8
 8000a7e:	4306      	orrs	r6, r0
 8000a80:	3568      	adds	r5, #104	@ 0x68
 8000a82:	e7e9      	b.n	8000a58 <_fwalk_sglue+0x10>

08000a84 <iprintf>:
 8000a84:	b40f      	push	{r0, r1, r2, r3}
 8000a86:	b507      	push	{r0, r1, r2, lr}
 8000a88:	4906      	ldr	r1, [pc, #24]	@ (8000aa4 <iprintf+0x20>)
 8000a8a:	ab04      	add	r3, sp, #16
 8000a8c:	6808      	ldr	r0, [r1, #0]
 8000a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a92:	6881      	ldr	r1, [r0, #8]
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	f000 f9e9 	bl	8000e6c <_vfiprintf_r>
 8000a9a:	b003      	add	sp, #12
 8000a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr
 8000aa4:	2000000c 	.word	0x2000000c

08000aa8 <__sread>:
 8000aa8:	b510      	push	{r4, lr}
 8000aaa:	460c      	mov	r4, r1
 8000aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ab0:	f000 f868 	bl	8000b84 <_read_r>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	bfab      	itete	ge
 8000ab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000aba:	89a3      	ldrhlt	r3, [r4, #12]
 8000abc:	181b      	addge	r3, r3, r0
 8000abe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ac2:	bfac      	ite	ge
 8000ac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ac6:	81a3      	strhlt	r3, [r4, #12]
 8000ac8:	bd10      	pop	{r4, pc}

08000aca <__swrite>:
 8000aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ace:	461f      	mov	r7, r3
 8000ad0:	898b      	ldrh	r3, [r1, #12]
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	4605      	mov	r5, r0
 8000ad6:	460c      	mov	r4, r1
 8000ad8:	4616      	mov	r6, r2
 8000ada:	d505      	bpl.n	8000ae8 <__swrite+0x1e>
 8000adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f000 f83c 	bl	8000b60 <_lseek_r>
 8000ae8:	89a3      	ldrh	r3, [r4, #12]
 8000aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000af2:	81a3      	strh	r3, [r4, #12]
 8000af4:	4632      	mov	r2, r6
 8000af6:	463b      	mov	r3, r7
 8000af8:	4628      	mov	r0, r5
 8000afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000afe:	f000 b853 	b.w	8000ba8 <_write_r>

08000b02 <__sseek>:
 8000b02:	b510      	push	{r4, lr}
 8000b04:	460c      	mov	r4, r1
 8000b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b0a:	f000 f829 	bl	8000b60 <_lseek_r>
 8000b0e:	1c43      	adds	r3, r0, #1
 8000b10:	89a3      	ldrh	r3, [r4, #12]
 8000b12:	bf15      	itete	ne
 8000b14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b1e:	81a3      	strheq	r3, [r4, #12]
 8000b20:	bf18      	it	ne
 8000b22:	81a3      	strhne	r3, [r4, #12]
 8000b24:	bd10      	pop	{r4, pc}

08000b26 <__sclose>:
 8000b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b2a:	f000 b809 	b.w	8000b40 <_close_r>

08000b2e <memset>:
 8000b2e:	4402      	add	r2, r0
 8000b30:	4603      	mov	r3, r0
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d100      	bne.n	8000b38 <memset+0xa>
 8000b36:	4770      	bx	lr
 8000b38:	f803 1b01 	strb.w	r1, [r3], #1
 8000b3c:	e7f9      	b.n	8000b32 <memset+0x4>
	...

08000b40 <_close_r>:
 8000b40:	b538      	push	{r3, r4, r5, lr}
 8000b42:	4d06      	ldr	r5, [pc, #24]	@ (8000b5c <_close_r+0x1c>)
 8000b44:	2300      	movs	r3, #0
 8000b46:	4604      	mov	r4, r0
 8000b48:	4608      	mov	r0, r1
 8000b4a:	602b      	str	r3, [r5, #0]
 8000b4c:	f7ff fcd0 	bl	80004f0 <_close>
 8000b50:	1c43      	adds	r3, r0, #1
 8000b52:	d102      	bne.n	8000b5a <_close_r+0x1a>
 8000b54:	682b      	ldr	r3, [r5, #0]
 8000b56:	b103      	cbz	r3, 8000b5a <_close_r+0x1a>
 8000b58:	6023      	str	r3, [r4, #0]
 8000b5a:	bd38      	pop	{r3, r4, r5, pc}
 8000b5c:	200001e0 	.word	0x200001e0

08000b60 <_lseek_r>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	4d07      	ldr	r5, [pc, #28]	@ (8000b80 <_lseek_r+0x20>)
 8000b64:	4604      	mov	r4, r0
 8000b66:	4608      	mov	r0, r1
 8000b68:	4611      	mov	r1, r2
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	602a      	str	r2, [r5, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f7ff fce5 	bl	800053e <_lseek>
 8000b74:	1c43      	adds	r3, r0, #1
 8000b76:	d102      	bne.n	8000b7e <_lseek_r+0x1e>
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	b103      	cbz	r3, 8000b7e <_lseek_r+0x1e>
 8000b7c:	6023      	str	r3, [r4, #0]
 8000b7e:	bd38      	pop	{r3, r4, r5, pc}
 8000b80:	200001e0 	.word	0x200001e0

08000b84 <_read_r>:
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4d07      	ldr	r5, [pc, #28]	@ (8000ba4 <_read_r+0x20>)
 8000b88:	4604      	mov	r4, r0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	2200      	movs	r2, #0
 8000b90:	602a      	str	r2, [r5, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	f7ff fe62 	bl	800085c <_read>
 8000b98:	1c43      	adds	r3, r0, #1
 8000b9a:	d102      	bne.n	8000ba2 <_read_r+0x1e>
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	b103      	cbz	r3, 8000ba2 <_read_r+0x1e>
 8000ba0:	6023      	str	r3, [r4, #0]
 8000ba2:	bd38      	pop	{r3, r4, r5, pc}
 8000ba4:	200001e0 	.word	0x200001e0

08000ba8 <_write_r>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4d07      	ldr	r5, [pc, #28]	@ (8000bc8 <_write_r+0x20>)
 8000bac:	4604      	mov	r4, r0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	602a      	str	r2, [r5, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	f7ff fe34 	bl	8000824 <_write>
 8000bbc:	1c43      	adds	r3, r0, #1
 8000bbe:	d102      	bne.n	8000bc6 <_write_r+0x1e>
 8000bc0:	682b      	ldr	r3, [r5, #0]
 8000bc2:	b103      	cbz	r3, 8000bc6 <_write_r+0x1e>
 8000bc4:	6023      	str	r3, [r4, #0]
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	200001e0 	.word	0x200001e0

08000bcc <__errno>:
 8000bcc:	4b01      	ldr	r3, [pc, #4]	@ (8000bd4 <__errno+0x8>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000000c 	.word	0x2000000c

08000bd8 <__libc_init_array>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4d0d      	ldr	r5, [pc, #52]	@ (8000c10 <__libc_init_array+0x38>)
 8000bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8000c14 <__libc_init_array+0x3c>)
 8000bde:	1b64      	subs	r4, r4, r5
 8000be0:	10a4      	asrs	r4, r4, #2
 8000be2:	2600      	movs	r6, #0
 8000be4:	42a6      	cmp	r6, r4
 8000be6:	d109      	bne.n	8000bfc <__libc_init_array+0x24>
 8000be8:	4d0b      	ldr	r5, [pc, #44]	@ (8000c18 <__libc_init_array+0x40>)
 8000bea:	4c0c      	ldr	r4, [pc, #48]	@ (8000c1c <__libc_init_array+0x44>)
 8000bec:	f000 fdb8 	bl	8001760 <_init>
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	10a4      	asrs	r4, r4, #2
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	42a6      	cmp	r6, r4
 8000bf8:	d105      	bne.n	8000c06 <__libc_init_array+0x2e>
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c00:	4798      	blx	r3
 8000c02:	3601      	adds	r6, #1
 8000c04:	e7ee      	b.n	8000be4 <__libc_init_array+0xc>
 8000c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c0a:	4798      	blx	r3
 8000c0c:	3601      	adds	r6, #1
 8000c0e:	e7f2      	b.n	8000bf6 <__libc_init_array+0x1e>
 8000c10:	08001e50 	.word	0x08001e50
 8000c14:	08001e50 	.word	0x08001e50
 8000c18:	08001e50 	.word	0x08001e50
 8000c1c:	08001e54 	.word	0x08001e54

08000c20 <__retarget_lock_init_recursive>:
 8000c20:	4770      	bx	lr

08000c22 <__retarget_lock_acquire_recursive>:
 8000c22:	4770      	bx	lr

08000c24 <__retarget_lock_release_recursive>:
 8000c24:	4770      	bx	lr
	...

08000c28 <_free_r>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	4605      	mov	r5, r0
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d041      	beq.n	8000cb4 <_free_r+0x8c>
 8000c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c34:	1f0c      	subs	r4, r1, #4
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bfb8      	it	lt
 8000c3a:	18e4      	addlt	r4, r4, r3
 8000c3c:	f000 f8e0 	bl	8000e00 <__malloc_lock>
 8000c40:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <_free_r+0x90>)
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	b933      	cbnz	r3, 8000c54 <_free_r+0x2c>
 8000c46:	6063      	str	r3, [r4, #4]
 8000c48:	6014      	str	r4, [r2, #0]
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b8dc 	b.w	8000e0c <__malloc_unlock>
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d908      	bls.n	8000c6a <_free_r+0x42>
 8000c58:	6820      	ldr	r0, [r4, #0]
 8000c5a:	1821      	adds	r1, r4, r0
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	bf01      	itttt	eq
 8000c60:	6819      	ldreq	r1, [r3, #0]
 8000c62:	685b      	ldreq	r3, [r3, #4]
 8000c64:	1809      	addeq	r1, r1, r0
 8000c66:	6021      	streq	r1, [r4, #0]
 8000c68:	e7ed      	b.n	8000c46 <_free_r+0x1e>
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	b10b      	cbz	r3, 8000c74 <_free_r+0x4c>
 8000c70:	42a3      	cmp	r3, r4
 8000c72:	d9fa      	bls.n	8000c6a <_free_r+0x42>
 8000c74:	6811      	ldr	r1, [r2, #0]
 8000c76:	1850      	adds	r0, r2, r1
 8000c78:	42a0      	cmp	r0, r4
 8000c7a:	d10b      	bne.n	8000c94 <_free_r+0x6c>
 8000c7c:	6820      	ldr	r0, [r4, #0]
 8000c7e:	4401      	add	r1, r0
 8000c80:	1850      	adds	r0, r2, r1
 8000c82:	4283      	cmp	r3, r0
 8000c84:	6011      	str	r1, [r2, #0]
 8000c86:	d1e0      	bne.n	8000c4a <_free_r+0x22>
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	6053      	str	r3, [r2, #4]
 8000c8e:	4408      	add	r0, r1
 8000c90:	6010      	str	r0, [r2, #0]
 8000c92:	e7da      	b.n	8000c4a <_free_r+0x22>
 8000c94:	d902      	bls.n	8000c9c <_free_r+0x74>
 8000c96:	230c      	movs	r3, #12
 8000c98:	602b      	str	r3, [r5, #0]
 8000c9a:	e7d6      	b.n	8000c4a <_free_r+0x22>
 8000c9c:	6820      	ldr	r0, [r4, #0]
 8000c9e:	1821      	adds	r1, r4, r0
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	bf04      	itt	eq
 8000ca4:	6819      	ldreq	r1, [r3, #0]
 8000ca6:	685b      	ldreq	r3, [r3, #4]
 8000ca8:	6063      	str	r3, [r4, #4]
 8000caa:	bf04      	itt	eq
 8000cac:	1809      	addeq	r1, r1, r0
 8000cae:	6021      	streq	r1, [r4, #0]
 8000cb0:	6054      	str	r4, [r2, #4]
 8000cb2:	e7ca      	b.n	8000c4a <_free_r+0x22>
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200001ec 	.word	0x200001ec

08000cbc <sbrk_aligned>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8000cfc <sbrk_aligned+0x40>)
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	6831      	ldr	r1, [r6, #0]
 8000cc4:	4605      	mov	r5, r0
 8000cc6:	b911      	cbnz	r1, 8000cce <sbrk_aligned+0x12>
 8000cc8:	f000 fcb6 	bl	8001638 <_sbrk_r>
 8000ccc:	6030      	str	r0, [r6, #0]
 8000cce:	4621      	mov	r1, r4
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	f000 fcb1 	bl	8001638 <_sbrk_r>
 8000cd6:	1c43      	adds	r3, r0, #1
 8000cd8:	d103      	bne.n	8000ce2 <sbrk_aligned+0x26>
 8000cda:	f04f 34ff 	mov.w	r4, #4294967295
 8000cde:	4620      	mov	r0, r4
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
 8000ce2:	1cc4      	adds	r4, r0, #3
 8000ce4:	f024 0403 	bic.w	r4, r4, #3
 8000ce8:	42a0      	cmp	r0, r4
 8000cea:	d0f8      	beq.n	8000cde <sbrk_aligned+0x22>
 8000cec:	1a21      	subs	r1, r4, r0
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f000 fca2 	bl	8001638 <_sbrk_r>
 8000cf4:	3001      	adds	r0, #1
 8000cf6:	d1f2      	bne.n	8000cde <sbrk_aligned+0x22>
 8000cf8:	e7ef      	b.n	8000cda <sbrk_aligned+0x1e>
 8000cfa:	bf00      	nop
 8000cfc:	200001e8 	.word	0x200001e8

08000d00 <_malloc_r>:
 8000d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d04:	1ccd      	adds	r5, r1, #3
 8000d06:	f025 0503 	bic.w	r5, r5, #3
 8000d0a:	3508      	adds	r5, #8
 8000d0c:	2d0c      	cmp	r5, #12
 8000d0e:	bf38      	it	cc
 8000d10:	250c      	movcc	r5, #12
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	4606      	mov	r6, r0
 8000d16:	db01      	blt.n	8000d1c <_malloc_r+0x1c>
 8000d18:	42a9      	cmp	r1, r5
 8000d1a:	d904      	bls.n	8000d26 <_malloc_r+0x26>
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	6033      	str	r3, [r6, #0]
 8000d20:	2000      	movs	r0, #0
 8000d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000dfc <_malloc_r+0xfc>
 8000d2a:	f000 f869 	bl	8000e00 <__malloc_lock>
 8000d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000d32:	461c      	mov	r4, r3
 8000d34:	bb44      	cbnz	r4, 8000d88 <_malloc_r+0x88>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4630      	mov	r0, r6
 8000d3a:	f7ff ffbf 	bl	8000cbc <sbrk_aligned>
 8000d3e:	1c43      	adds	r3, r0, #1
 8000d40:	4604      	mov	r4, r0
 8000d42:	d158      	bne.n	8000df6 <_malloc_r+0xf6>
 8000d44:	f8d8 4000 	ldr.w	r4, [r8]
 8000d48:	4627      	mov	r7, r4
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d143      	bne.n	8000dd6 <_malloc_r+0xd6>
 8000d4e:	2c00      	cmp	r4, #0
 8000d50:	d04b      	beq.n	8000dea <_malloc_r+0xea>
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	4639      	mov	r1, r7
 8000d56:	4630      	mov	r0, r6
 8000d58:	eb04 0903 	add.w	r9, r4, r3
 8000d5c:	f000 fc6c 	bl	8001638 <_sbrk_r>
 8000d60:	4581      	cmp	r9, r0
 8000d62:	d142      	bne.n	8000dea <_malloc_r+0xea>
 8000d64:	6821      	ldr	r1, [r4, #0]
 8000d66:	1a6d      	subs	r5, r5, r1
 8000d68:	4629      	mov	r1, r5
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f7ff ffa6 	bl	8000cbc <sbrk_aligned>
 8000d70:	3001      	adds	r0, #1
 8000d72:	d03a      	beq.n	8000dea <_malloc_r+0xea>
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	442b      	add	r3, r5
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	bb62      	cbnz	r2, 8000ddc <_malloc_r+0xdc>
 8000d82:	f8c8 7000 	str.w	r7, [r8]
 8000d86:	e00f      	b.n	8000da8 <_malloc_r+0xa8>
 8000d88:	6822      	ldr	r2, [r4, #0]
 8000d8a:	1b52      	subs	r2, r2, r5
 8000d8c:	d420      	bmi.n	8000dd0 <_malloc_r+0xd0>
 8000d8e:	2a0b      	cmp	r2, #11
 8000d90:	d917      	bls.n	8000dc2 <_malloc_r+0xc2>
 8000d92:	1961      	adds	r1, r4, r5
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	6025      	str	r5, [r4, #0]
 8000d98:	bf18      	it	ne
 8000d9a:	6059      	strne	r1, [r3, #4]
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	bf08      	it	eq
 8000da0:	f8c8 1000 	streq.w	r1, [r8]
 8000da4:	5162      	str	r2, [r4, r5]
 8000da6:	604b      	str	r3, [r1, #4]
 8000da8:	4630      	mov	r0, r6
 8000daa:	f000 f82f 	bl	8000e0c <__malloc_unlock>
 8000dae:	f104 000b 	add.w	r0, r4, #11
 8000db2:	1d23      	adds	r3, r4, #4
 8000db4:	f020 0007 	bic.w	r0, r0, #7
 8000db8:	1ac2      	subs	r2, r0, r3
 8000dba:	bf1c      	itt	ne
 8000dbc:	1a1b      	subne	r3, r3, r0
 8000dbe:	50a3      	strne	r3, [r4, r2]
 8000dc0:	e7af      	b.n	8000d22 <_malloc_r+0x22>
 8000dc2:	6862      	ldr	r2, [r4, #4]
 8000dc4:	42a3      	cmp	r3, r4
 8000dc6:	bf0c      	ite	eq
 8000dc8:	f8c8 2000 	streq.w	r2, [r8]
 8000dcc:	605a      	strne	r2, [r3, #4]
 8000dce:	e7eb      	b.n	8000da8 <_malloc_r+0xa8>
 8000dd0:	4623      	mov	r3, r4
 8000dd2:	6864      	ldr	r4, [r4, #4]
 8000dd4:	e7ae      	b.n	8000d34 <_malloc_r+0x34>
 8000dd6:	463c      	mov	r4, r7
 8000dd8:	687f      	ldr	r7, [r7, #4]
 8000dda:	e7b6      	b.n	8000d4a <_malloc_r+0x4a>
 8000ddc:	461a      	mov	r2, r3
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d1fb      	bne.n	8000ddc <_malloc_r+0xdc>
 8000de4:	2300      	movs	r3, #0
 8000de6:	6053      	str	r3, [r2, #4]
 8000de8:	e7de      	b.n	8000da8 <_malloc_r+0xa8>
 8000dea:	230c      	movs	r3, #12
 8000dec:	6033      	str	r3, [r6, #0]
 8000dee:	4630      	mov	r0, r6
 8000df0:	f000 f80c 	bl	8000e0c <__malloc_unlock>
 8000df4:	e794      	b.n	8000d20 <_malloc_r+0x20>
 8000df6:	6005      	str	r5, [r0, #0]
 8000df8:	e7d6      	b.n	8000da8 <_malloc_r+0xa8>
 8000dfa:	bf00      	nop
 8000dfc:	200001ec 	.word	0x200001ec

08000e00 <__malloc_lock>:
 8000e00:	4801      	ldr	r0, [pc, #4]	@ (8000e08 <__malloc_lock+0x8>)
 8000e02:	f7ff bf0e 	b.w	8000c22 <__retarget_lock_acquire_recursive>
 8000e06:	bf00      	nop
 8000e08:	200001e4 	.word	0x200001e4

08000e0c <__malloc_unlock>:
 8000e0c:	4801      	ldr	r0, [pc, #4]	@ (8000e14 <__malloc_unlock+0x8>)
 8000e0e:	f7ff bf09 	b.w	8000c24 <__retarget_lock_release_recursive>
 8000e12:	bf00      	nop
 8000e14:	200001e4 	.word	0x200001e4

08000e18 <__sfputc_r>:
 8000e18:	6893      	ldr	r3, [r2, #8]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	b410      	push	{r4}
 8000e20:	6093      	str	r3, [r2, #8]
 8000e22:	da08      	bge.n	8000e36 <__sfputc_r+0x1e>
 8000e24:	6994      	ldr	r4, [r2, #24]
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	db01      	blt.n	8000e2e <__sfputc_r+0x16>
 8000e2a:	290a      	cmp	r1, #10
 8000e2c:	d103      	bne.n	8000e36 <__sfputc_r+0x1e>
 8000e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e32:	f000 bb6d 	b.w	8001510 <__swbuf_r>
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	1c58      	adds	r0, r3, #1
 8000e3a:	6010      	str	r0, [r2, #0]
 8000e3c:	7019      	strb	r1, [r3, #0]
 8000e3e:	4608      	mov	r0, r1
 8000e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <__sfputs_r>:
 8000e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e48:	4606      	mov	r6, r0
 8000e4a:	460f      	mov	r7, r1
 8000e4c:	4614      	mov	r4, r2
 8000e4e:	18d5      	adds	r5, r2, r3
 8000e50:	42ac      	cmp	r4, r5
 8000e52:	d101      	bne.n	8000e58 <__sfputs_r+0x12>
 8000e54:	2000      	movs	r0, #0
 8000e56:	e007      	b.n	8000e68 <__sfputs_r+0x22>
 8000e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e5c:	463a      	mov	r2, r7
 8000e5e:	4630      	mov	r0, r6
 8000e60:	f7ff ffda 	bl	8000e18 <__sfputc_r>
 8000e64:	1c43      	adds	r3, r0, #1
 8000e66:	d1f3      	bne.n	8000e50 <__sfputs_r+0xa>
 8000e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e6c <_vfiprintf_r>:
 8000e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e70:	460d      	mov	r5, r1
 8000e72:	b09d      	sub	sp, #116	@ 0x74
 8000e74:	4614      	mov	r4, r2
 8000e76:	4698      	mov	r8, r3
 8000e78:	4606      	mov	r6, r0
 8000e7a:	b118      	cbz	r0, 8000e84 <_vfiprintf_r+0x18>
 8000e7c:	6a03      	ldr	r3, [r0, #32]
 8000e7e:	b90b      	cbnz	r3, 8000e84 <_vfiprintf_r+0x18>
 8000e80:	f7ff fdca 	bl	8000a18 <__sinit>
 8000e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e86:	07d9      	lsls	r1, r3, #31
 8000e88:	d405      	bmi.n	8000e96 <_vfiprintf_r+0x2a>
 8000e8a:	89ab      	ldrh	r3, [r5, #12]
 8000e8c:	059a      	lsls	r2, r3, #22
 8000e8e:	d402      	bmi.n	8000e96 <_vfiprintf_r+0x2a>
 8000e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e92:	f7ff fec6 	bl	8000c22 <__retarget_lock_acquire_recursive>
 8000e96:	89ab      	ldrh	r3, [r5, #12]
 8000e98:	071b      	lsls	r3, r3, #28
 8000e9a:	d501      	bpl.n	8000ea0 <_vfiprintf_r+0x34>
 8000e9c:	692b      	ldr	r3, [r5, #16]
 8000e9e:	b99b      	cbnz	r3, 8000ec8 <_vfiprintf_r+0x5c>
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f000 fb72 	bl	800158c <__swsetup_r>
 8000ea8:	b170      	cbz	r0, 8000ec8 <_vfiprintf_r+0x5c>
 8000eaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000eac:	07dc      	lsls	r4, r3, #31
 8000eae:	d504      	bpl.n	8000eba <_vfiprintf_r+0x4e>
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	b01d      	add	sp, #116	@ 0x74
 8000eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eba:	89ab      	ldrh	r3, [r5, #12]
 8000ebc:	0598      	lsls	r0, r3, #22
 8000ebe:	d4f7      	bmi.n	8000eb0 <_vfiprintf_r+0x44>
 8000ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ec2:	f7ff feaf 	bl	8000c24 <__retarget_lock_release_recursive>
 8000ec6:	e7f3      	b.n	8000eb0 <_vfiprintf_r+0x44>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ecc:	2320      	movs	r3, #32
 8000ece:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ed6:	2330      	movs	r3, #48	@ 0x30
 8000ed8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001088 <_vfiprintf_r+0x21c>
 8000edc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ee0:	f04f 0901 	mov.w	r9, #1
 8000ee4:	4623      	mov	r3, r4
 8000ee6:	469a      	mov	sl, r3
 8000ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000eec:	b10a      	cbz	r2, 8000ef2 <_vfiprintf_r+0x86>
 8000eee:	2a25      	cmp	r2, #37	@ 0x25
 8000ef0:	d1f9      	bne.n	8000ee6 <_vfiprintf_r+0x7a>
 8000ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8000ef6:	d00b      	beq.n	8000f10 <_vfiprintf_r+0xa4>
 8000ef8:	465b      	mov	r3, fp
 8000efa:	4622      	mov	r2, r4
 8000efc:	4629      	mov	r1, r5
 8000efe:	4630      	mov	r0, r6
 8000f00:	f7ff ffa1 	bl	8000e46 <__sfputs_r>
 8000f04:	3001      	adds	r0, #1
 8000f06:	f000 80a7 	beq.w	8001058 <_vfiprintf_r+0x1ec>
 8000f0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f0c:	445a      	add	r2, fp
 8000f0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f10:	f89a 3000 	ldrb.w	r3, [sl]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 809f 	beq.w	8001058 <_vfiprintf_r+0x1ec>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f24:	f10a 0a01 	add.w	sl, sl, #1
 8000f28:	9304      	str	r3, [sp, #16]
 8000f2a:	9307      	str	r3, [sp, #28]
 8000f2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f30:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f32:	4654      	mov	r4, sl
 8000f34:	2205      	movs	r2, #5
 8000f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f3a:	4853      	ldr	r0, [pc, #332]	@ (8001088 <_vfiprintf_r+0x21c>)
 8000f3c:	f7ff f950 	bl	80001e0 <memchr>
 8000f40:	9a04      	ldr	r2, [sp, #16]
 8000f42:	b9d8      	cbnz	r0, 8000f7c <_vfiprintf_r+0x110>
 8000f44:	06d1      	lsls	r1, r2, #27
 8000f46:	bf44      	itt	mi
 8000f48:	2320      	movmi	r3, #32
 8000f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f4e:	0713      	lsls	r3, r2, #28
 8000f50:	bf44      	itt	mi
 8000f52:	232b      	movmi	r3, #43	@ 0x2b
 8000f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f58:	f89a 3000 	ldrb.w	r3, [sl]
 8000f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f5e:	d015      	beq.n	8000f8c <_vfiprintf_r+0x120>
 8000f60:	9a07      	ldr	r2, [sp, #28]
 8000f62:	4654      	mov	r4, sl
 8000f64:	2000      	movs	r0, #0
 8000f66:	f04f 0c0a 	mov.w	ip, #10
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f70:	3b30      	subs	r3, #48	@ 0x30
 8000f72:	2b09      	cmp	r3, #9
 8000f74:	d94b      	bls.n	800100e <_vfiprintf_r+0x1a2>
 8000f76:	b1b0      	cbz	r0, 8000fa6 <_vfiprintf_r+0x13a>
 8000f78:	9207      	str	r2, [sp, #28]
 8000f7a:	e014      	b.n	8000fa6 <_vfiprintf_r+0x13a>
 8000f7c:	eba0 0308 	sub.w	r3, r0, r8
 8000f80:	fa09 f303 	lsl.w	r3, r9, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	9304      	str	r3, [sp, #16]
 8000f88:	46a2      	mov	sl, r4
 8000f8a:	e7d2      	b.n	8000f32 <_vfiprintf_r+0xc6>
 8000f8c:	9b03      	ldr	r3, [sp, #12]
 8000f8e:	1d19      	adds	r1, r3, #4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	9103      	str	r1, [sp, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	bfbb      	ittet	lt
 8000f98:	425b      	neglt	r3, r3
 8000f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8000f9e:	9307      	strge	r3, [sp, #28]
 8000fa0:	9307      	strlt	r3, [sp, #28]
 8000fa2:	bfb8      	it	lt
 8000fa4:	9204      	strlt	r2, [sp, #16]
 8000fa6:	7823      	ldrb	r3, [r4, #0]
 8000fa8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000faa:	d10a      	bne.n	8000fc2 <_vfiprintf_r+0x156>
 8000fac:	7863      	ldrb	r3, [r4, #1]
 8000fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fb0:	d132      	bne.n	8001018 <_vfiprintf_r+0x1ac>
 8000fb2:	9b03      	ldr	r3, [sp, #12]
 8000fb4:	1d1a      	adds	r2, r3, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	9203      	str	r2, [sp, #12]
 8000fba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000fbe:	3402      	adds	r4, #2
 8000fc0:	9305      	str	r3, [sp, #20]
 8000fc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001098 <_vfiprintf_r+0x22c>
 8000fc6:	7821      	ldrb	r1, [r4, #0]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	4650      	mov	r0, sl
 8000fcc:	f7ff f908 	bl	80001e0 <memchr>
 8000fd0:	b138      	cbz	r0, 8000fe2 <_vfiprintf_r+0x176>
 8000fd2:	9b04      	ldr	r3, [sp, #16]
 8000fd4:	eba0 000a 	sub.w	r0, r0, sl
 8000fd8:	2240      	movs	r2, #64	@ 0x40
 8000fda:	4082      	lsls	r2, r0
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	3401      	adds	r4, #1
 8000fe0:	9304      	str	r3, [sp, #16]
 8000fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fe6:	4829      	ldr	r0, [pc, #164]	@ (800108c <_vfiprintf_r+0x220>)
 8000fe8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000fec:	2206      	movs	r2, #6
 8000fee:	f7ff f8f7 	bl	80001e0 <memchr>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d03f      	beq.n	8001076 <_vfiprintf_r+0x20a>
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <_vfiprintf_r+0x224>)
 8000ff8:	bb1b      	cbnz	r3, 8001042 <_vfiprintf_r+0x1d6>
 8000ffa:	9b03      	ldr	r3, [sp, #12]
 8000ffc:	3307      	adds	r3, #7
 8000ffe:	f023 0307 	bic.w	r3, r3, #7
 8001002:	3308      	adds	r3, #8
 8001004:	9303      	str	r3, [sp, #12]
 8001006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001008:	443b      	add	r3, r7
 800100a:	9309      	str	r3, [sp, #36]	@ 0x24
 800100c:	e76a      	b.n	8000ee4 <_vfiprintf_r+0x78>
 800100e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001012:	460c      	mov	r4, r1
 8001014:	2001      	movs	r0, #1
 8001016:	e7a8      	b.n	8000f6a <_vfiprintf_r+0xfe>
 8001018:	2300      	movs	r3, #0
 800101a:	3401      	adds	r4, #1
 800101c:	9305      	str	r3, [sp, #20]
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 0c0a 	mov.w	ip, #10
 8001024:	4620      	mov	r0, r4
 8001026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800102a:	3a30      	subs	r2, #48	@ 0x30
 800102c:	2a09      	cmp	r2, #9
 800102e:	d903      	bls.n	8001038 <_vfiprintf_r+0x1cc>
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0c6      	beq.n	8000fc2 <_vfiprintf_r+0x156>
 8001034:	9105      	str	r1, [sp, #20]
 8001036:	e7c4      	b.n	8000fc2 <_vfiprintf_r+0x156>
 8001038:	fb0c 2101 	mla	r1, ip, r1, r2
 800103c:	4604      	mov	r4, r0
 800103e:	2301      	movs	r3, #1
 8001040:	e7f0      	b.n	8001024 <_vfiprintf_r+0x1b8>
 8001042:	ab03      	add	r3, sp, #12
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	462a      	mov	r2, r5
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <_vfiprintf_r+0x228>)
 800104a:	a904      	add	r1, sp, #16
 800104c:	4630      	mov	r0, r6
 800104e:	f3af 8000 	nop.w
 8001052:	4607      	mov	r7, r0
 8001054:	1c78      	adds	r0, r7, #1
 8001056:	d1d6      	bne.n	8001006 <_vfiprintf_r+0x19a>
 8001058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800105a:	07d9      	lsls	r1, r3, #31
 800105c:	d405      	bmi.n	800106a <_vfiprintf_r+0x1fe>
 800105e:	89ab      	ldrh	r3, [r5, #12]
 8001060:	059a      	lsls	r2, r3, #22
 8001062:	d402      	bmi.n	800106a <_vfiprintf_r+0x1fe>
 8001064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001066:	f7ff fddd 	bl	8000c24 <__retarget_lock_release_recursive>
 800106a:	89ab      	ldrh	r3, [r5, #12]
 800106c:	065b      	lsls	r3, r3, #25
 800106e:	f53f af1f 	bmi.w	8000eb0 <_vfiprintf_r+0x44>
 8001072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001074:	e71e      	b.n	8000eb4 <_vfiprintf_r+0x48>
 8001076:	ab03      	add	r3, sp, #12
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	462a      	mov	r2, r5
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <_vfiprintf_r+0x228>)
 800107e:	a904      	add	r1, sp, #16
 8001080:	4630      	mov	r0, r6
 8001082:	f000 f879 	bl	8001178 <_printf_i>
 8001086:	e7e4      	b.n	8001052 <_vfiprintf_r+0x1e6>
 8001088:	08001e15 	.word	0x08001e15
 800108c:	08001e1f 	.word	0x08001e1f
 8001090:	00000000 	.word	0x00000000
 8001094:	08000e47 	.word	0x08000e47
 8001098:	08001e1b 	.word	0x08001e1b

0800109c <_printf_common>:
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	4616      	mov	r6, r2
 80010a2:	4698      	mov	r8, r3
 80010a4:	688a      	ldr	r2, [r1, #8]
 80010a6:	690b      	ldr	r3, [r1, #16]
 80010a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80010ac:	4293      	cmp	r3, r2
 80010ae:	bfb8      	it	lt
 80010b0:	4613      	movlt	r3, r2
 80010b2:	6033      	str	r3, [r6, #0]
 80010b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80010b8:	4607      	mov	r7, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	b10a      	cbz	r2, 80010c2 <_printf_common+0x26>
 80010be:	3301      	adds	r3, #1
 80010c0:	6033      	str	r3, [r6, #0]
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	0699      	lsls	r1, r3, #26
 80010c6:	bf42      	ittt	mi
 80010c8:	6833      	ldrmi	r3, [r6, #0]
 80010ca:	3302      	addmi	r3, #2
 80010cc:	6033      	strmi	r3, [r6, #0]
 80010ce:	6825      	ldr	r5, [r4, #0]
 80010d0:	f015 0506 	ands.w	r5, r5, #6
 80010d4:	d106      	bne.n	80010e4 <_printf_common+0x48>
 80010d6:	f104 0a19 	add.w	sl, r4, #25
 80010da:	68e3      	ldr	r3, [r4, #12]
 80010dc:	6832      	ldr	r2, [r6, #0]
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	42ab      	cmp	r3, r5
 80010e2:	dc26      	bgt.n	8001132 <_printf_common+0x96>
 80010e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80010e8:	6822      	ldr	r2, [r4, #0]
 80010ea:	3b00      	subs	r3, #0
 80010ec:	bf18      	it	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	0692      	lsls	r2, r2, #26
 80010f2:	d42b      	bmi.n	800114c <_printf_common+0xb0>
 80010f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80010f8:	4641      	mov	r1, r8
 80010fa:	4638      	mov	r0, r7
 80010fc:	47c8      	blx	r9
 80010fe:	3001      	adds	r0, #1
 8001100:	d01e      	beq.n	8001140 <_printf_common+0xa4>
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	6922      	ldr	r2, [r4, #16]
 8001106:	f003 0306 	and.w	r3, r3, #6
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf02      	ittt	eq
 800110e:	68e5      	ldreq	r5, [r4, #12]
 8001110:	6833      	ldreq	r3, [r6, #0]
 8001112:	1aed      	subeq	r5, r5, r3
 8001114:	68a3      	ldr	r3, [r4, #8]
 8001116:	bf0c      	ite	eq
 8001118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800111c:	2500      	movne	r5, #0
 800111e:	4293      	cmp	r3, r2
 8001120:	bfc4      	itt	gt
 8001122:	1a9b      	subgt	r3, r3, r2
 8001124:	18ed      	addgt	r5, r5, r3
 8001126:	2600      	movs	r6, #0
 8001128:	341a      	adds	r4, #26
 800112a:	42b5      	cmp	r5, r6
 800112c:	d11a      	bne.n	8001164 <_printf_common+0xc8>
 800112e:	2000      	movs	r0, #0
 8001130:	e008      	b.n	8001144 <_printf_common+0xa8>
 8001132:	2301      	movs	r3, #1
 8001134:	4652      	mov	r2, sl
 8001136:	4641      	mov	r1, r8
 8001138:	4638      	mov	r0, r7
 800113a:	47c8      	blx	r9
 800113c:	3001      	adds	r0, #1
 800113e:	d103      	bne.n	8001148 <_printf_common+0xac>
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001148:	3501      	adds	r5, #1
 800114a:	e7c6      	b.n	80010da <_printf_common+0x3e>
 800114c:	18e1      	adds	r1, r4, r3
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	2030      	movs	r0, #48	@ 0x30
 8001152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001156:	4422      	add	r2, r4
 8001158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800115c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001160:	3302      	adds	r3, #2
 8001162:	e7c7      	b.n	80010f4 <_printf_common+0x58>
 8001164:	2301      	movs	r3, #1
 8001166:	4622      	mov	r2, r4
 8001168:	4641      	mov	r1, r8
 800116a:	4638      	mov	r0, r7
 800116c:	47c8      	blx	r9
 800116e:	3001      	adds	r0, #1
 8001170:	d0e6      	beq.n	8001140 <_printf_common+0xa4>
 8001172:	3601      	adds	r6, #1
 8001174:	e7d9      	b.n	800112a <_printf_common+0x8e>
	...

08001178 <_printf_i>:
 8001178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800117c:	7e0f      	ldrb	r7, [r1, #24]
 800117e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001180:	2f78      	cmp	r7, #120	@ 0x78
 8001182:	4691      	mov	r9, r2
 8001184:	4680      	mov	r8, r0
 8001186:	460c      	mov	r4, r1
 8001188:	469a      	mov	sl, r3
 800118a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800118e:	d807      	bhi.n	80011a0 <_printf_i+0x28>
 8001190:	2f62      	cmp	r7, #98	@ 0x62
 8001192:	d80a      	bhi.n	80011aa <_printf_i+0x32>
 8001194:	2f00      	cmp	r7, #0
 8001196:	f000 80d2 	beq.w	800133e <_printf_i+0x1c6>
 800119a:	2f58      	cmp	r7, #88	@ 0x58
 800119c:	f000 80b9 	beq.w	8001312 <_printf_i+0x19a>
 80011a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80011a8:	e03a      	b.n	8001220 <_printf_i+0xa8>
 80011aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80011ae:	2b15      	cmp	r3, #21
 80011b0:	d8f6      	bhi.n	80011a0 <_printf_i+0x28>
 80011b2:	a101      	add	r1, pc, #4	@ (adr r1, 80011b8 <_printf_i+0x40>)
 80011b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011b8:	08001211 	.word	0x08001211
 80011bc:	08001225 	.word	0x08001225
 80011c0:	080011a1 	.word	0x080011a1
 80011c4:	080011a1 	.word	0x080011a1
 80011c8:	080011a1 	.word	0x080011a1
 80011cc:	080011a1 	.word	0x080011a1
 80011d0:	08001225 	.word	0x08001225
 80011d4:	080011a1 	.word	0x080011a1
 80011d8:	080011a1 	.word	0x080011a1
 80011dc:	080011a1 	.word	0x080011a1
 80011e0:	080011a1 	.word	0x080011a1
 80011e4:	08001325 	.word	0x08001325
 80011e8:	0800124f 	.word	0x0800124f
 80011ec:	080012df 	.word	0x080012df
 80011f0:	080011a1 	.word	0x080011a1
 80011f4:	080011a1 	.word	0x080011a1
 80011f8:	08001347 	.word	0x08001347
 80011fc:	080011a1 	.word	0x080011a1
 8001200:	0800124f 	.word	0x0800124f
 8001204:	080011a1 	.word	0x080011a1
 8001208:	080011a1 	.word	0x080011a1
 800120c:	080012e7 	.word	0x080012e7
 8001210:	6833      	ldr	r3, [r6, #0]
 8001212:	1d1a      	adds	r2, r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6032      	str	r2, [r6, #0]
 8001218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800121c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001220:	2301      	movs	r3, #1
 8001222:	e09d      	b.n	8001360 <_printf_i+0x1e8>
 8001224:	6833      	ldr	r3, [r6, #0]
 8001226:	6820      	ldr	r0, [r4, #0]
 8001228:	1d19      	adds	r1, r3, #4
 800122a:	6031      	str	r1, [r6, #0]
 800122c:	0606      	lsls	r6, r0, #24
 800122e:	d501      	bpl.n	8001234 <_printf_i+0xbc>
 8001230:	681d      	ldr	r5, [r3, #0]
 8001232:	e003      	b.n	800123c <_printf_i+0xc4>
 8001234:	0645      	lsls	r5, r0, #25
 8001236:	d5fb      	bpl.n	8001230 <_printf_i+0xb8>
 8001238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800123c:	2d00      	cmp	r5, #0
 800123e:	da03      	bge.n	8001248 <_printf_i+0xd0>
 8001240:	232d      	movs	r3, #45	@ 0x2d
 8001242:	426d      	negs	r5, r5
 8001244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001248:	4859      	ldr	r0, [pc, #356]	@ (80013b0 <_printf_i+0x238>)
 800124a:	230a      	movs	r3, #10
 800124c:	e011      	b.n	8001272 <_printf_i+0xfa>
 800124e:	6821      	ldr	r1, [r4, #0]
 8001250:	6833      	ldr	r3, [r6, #0]
 8001252:	0608      	lsls	r0, r1, #24
 8001254:	f853 5b04 	ldr.w	r5, [r3], #4
 8001258:	d402      	bmi.n	8001260 <_printf_i+0xe8>
 800125a:	0649      	lsls	r1, r1, #25
 800125c:	bf48      	it	mi
 800125e:	b2ad      	uxthmi	r5, r5
 8001260:	2f6f      	cmp	r7, #111	@ 0x6f
 8001262:	4853      	ldr	r0, [pc, #332]	@ (80013b0 <_printf_i+0x238>)
 8001264:	6033      	str	r3, [r6, #0]
 8001266:	bf14      	ite	ne
 8001268:	230a      	movne	r3, #10
 800126a:	2308      	moveq	r3, #8
 800126c:	2100      	movs	r1, #0
 800126e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001272:	6866      	ldr	r6, [r4, #4]
 8001274:	60a6      	str	r6, [r4, #8]
 8001276:	2e00      	cmp	r6, #0
 8001278:	bfa2      	ittt	ge
 800127a:	6821      	ldrge	r1, [r4, #0]
 800127c:	f021 0104 	bicge.w	r1, r1, #4
 8001280:	6021      	strge	r1, [r4, #0]
 8001282:	b90d      	cbnz	r5, 8001288 <_printf_i+0x110>
 8001284:	2e00      	cmp	r6, #0
 8001286:	d04b      	beq.n	8001320 <_printf_i+0x1a8>
 8001288:	4616      	mov	r6, r2
 800128a:	fbb5 f1f3 	udiv	r1, r5, r3
 800128e:	fb03 5711 	mls	r7, r3, r1, r5
 8001292:	5dc7      	ldrb	r7, [r0, r7]
 8001294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001298:	462f      	mov	r7, r5
 800129a:	42bb      	cmp	r3, r7
 800129c:	460d      	mov	r5, r1
 800129e:	d9f4      	bls.n	800128a <_printf_i+0x112>
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d10b      	bne.n	80012bc <_printf_i+0x144>
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	07df      	lsls	r7, r3, #31
 80012a8:	d508      	bpl.n	80012bc <_printf_i+0x144>
 80012aa:	6923      	ldr	r3, [r4, #16]
 80012ac:	6861      	ldr	r1, [r4, #4]
 80012ae:	4299      	cmp	r1, r3
 80012b0:	bfde      	ittt	le
 80012b2:	2330      	movle	r3, #48	@ 0x30
 80012b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80012bc:	1b92      	subs	r2, r2, r6
 80012be:	6122      	str	r2, [r4, #16]
 80012c0:	f8cd a000 	str.w	sl, [sp]
 80012c4:	464b      	mov	r3, r9
 80012c6:	aa03      	add	r2, sp, #12
 80012c8:	4621      	mov	r1, r4
 80012ca:	4640      	mov	r0, r8
 80012cc:	f7ff fee6 	bl	800109c <_printf_common>
 80012d0:	3001      	adds	r0, #1
 80012d2:	d14a      	bne.n	800136a <_printf_i+0x1f2>
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	b004      	add	sp, #16
 80012da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	4833      	ldr	r0, [pc, #204]	@ (80013b4 <_printf_i+0x23c>)
 80012e8:	2778      	movs	r7, #120	@ 0x78
 80012ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	6831      	ldr	r1, [r6, #0]
 80012f2:	061f      	lsls	r7, r3, #24
 80012f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80012f8:	d402      	bmi.n	8001300 <_printf_i+0x188>
 80012fa:	065f      	lsls	r7, r3, #25
 80012fc:	bf48      	it	mi
 80012fe:	b2ad      	uxthmi	r5, r5
 8001300:	6031      	str	r1, [r6, #0]
 8001302:	07d9      	lsls	r1, r3, #31
 8001304:	bf44      	itt	mi
 8001306:	f043 0320 	orrmi.w	r3, r3, #32
 800130a:	6023      	strmi	r3, [r4, #0]
 800130c:	b11d      	cbz	r5, 8001316 <_printf_i+0x19e>
 800130e:	2310      	movs	r3, #16
 8001310:	e7ac      	b.n	800126c <_printf_i+0xf4>
 8001312:	4827      	ldr	r0, [pc, #156]	@ (80013b0 <_printf_i+0x238>)
 8001314:	e7e9      	b.n	80012ea <_printf_i+0x172>
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	f023 0320 	bic.w	r3, r3, #32
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	e7f6      	b.n	800130e <_printf_i+0x196>
 8001320:	4616      	mov	r6, r2
 8001322:	e7bd      	b.n	80012a0 <_printf_i+0x128>
 8001324:	6833      	ldr	r3, [r6, #0]
 8001326:	6825      	ldr	r5, [r4, #0]
 8001328:	6961      	ldr	r1, [r4, #20]
 800132a:	1d18      	adds	r0, r3, #4
 800132c:	6030      	str	r0, [r6, #0]
 800132e:	062e      	lsls	r6, r5, #24
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	d501      	bpl.n	8001338 <_printf_i+0x1c0>
 8001334:	6019      	str	r1, [r3, #0]
 8001336:	e002      	b.n	800133e <_printf_i+0x1c6>
 8001338:	0668      	lsls	r0, r5, #25
 800133a:	d5fb      	bpl.n	8001334 <_printf_i+0x1bc>
 800133c:	8019      	strh	r1, [r3, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	6123      	str	r3, [r4, #16]
 8001342:	4616      	mov	r6, r2
 8001344:	e7bc      	b.n	80012c0 <_printf_i+0x148>
 8001346:	6833      	ldr	r3, [r6, #0]
 8001348:	1d1a      	adds	r2, r3, #4
 800134a:	6032      	str	r2, [r6, #0]
 800134c:	681e      	ldr	r6, [r3, #0]
 800134e:	6862      	ldr	r2, [r4, #4]
 8001350:	2100      	movs	r1, #0
 8001352:	4630      	mov	r0, r6
 8001354:	f7fe ff44 	bl	80001e0 <memchr>
 8001358:	b108      	cbz	r0, 800135e <_printf_i+0x1e6>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	6060      	str	r0, [r4, #4]
 800135e:	6863      	ldr	r3, [r4, #4]
 8001360:	6123      	str	r3, [r4, #16]
 8001362:	2300      	movs	r3, #0
 8001364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001368:	e7aa      	b.n	80012c0 <_printf_i+0x148>
 800136a:	6923      	ldr	r3, [r4, #16]
 800136c:	4632      	mov	r2, r6
 800136e:	4649      	mov	r1, r9
 8001370:	4640      	mov	r0, r8
 8001372:	47d0      	blx	sl
 8001374:	3001      	adds	r0, #1
 8001376:	d0ad      	beq.n	80012d4 <_printf_i+0x15c>
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	079b      	lsls	r3, r3, #30
 800137c:	d413      	bmi.n	80013a6 <_printf_i+0x22e>
 800137e:	68e0      	ldr	r0, [r4, #12]
 8001380:	9b03      	ldr	r3, [sp, #12]
 8001382:	4298      	cmp	r0, r3
 8001384:	bfb8      	it	lt
 8001386:	4618      	movlt	r0, r3
 8001388:	e7a6      	b.n	80012d8 <_printf_i+0x160>
 800138a:	2301      	movs	r3, #1
 800138c:	4632      	mov	r2, r6
 800138e:	4649      	mov	r1, r9
 8001390:	4640      	mov	r0, r8
 8001392:	47d0      	blx	sl
 8001394:	3001      	adds	r0, #1
 8001396:	d09d      	beq.n	80012d4 <_printf_i+0x15c>
 8001398:	3501      	adds	r5, #1
 800139a:	68e3      	ldr	r3, [r4, #12]
 800139c:	9903      	ldr	r1, [sp, #12]
 800139e:	1a5b      	subs	r3, r3, r1
 80013a0:	42ab      	cmp	r3, r5
 80013a2:	dcf2      	bgt.n	800138a <_printf_i+0x212>
 80013a4:	e7eb      	b.n	800137e <_printf_i+0x206>
 80013a6:	2500      	movs	r5, #0
 80013a8:	f104 0619 	add.w	r6, r4, #25
 80013ac:	e7f5      	b.n	800139a <_printf_i+0x222>
 80013ae:	bf00      	nop
 80013b0:	08001e26 	.word	0x08001e26
 80013b4:	08001e37 	.word	0x08001e37

080013b8 <__sflush_r>:
 80013b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c0:	0716      	lsls	r6, r2, #28
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	d454      	bmi.n	8001472 <__sflush_r+0xba>
 80013c8:	684b      	ldr	r3, [r1, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dc02      	bgt.n	80013d4 <__sflush_r+0x1c>
 80013ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd48      	ble.n	8001466 <__sflush_r+0xae>
 80013d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013d6:	2e00      	cmp	r6, #0
 80013d8:	d045      	beq.n	8001466 <__sflush_r+0xae>
 80013da:	2300      	movs	r3, #0
 80013dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80013e0:	682f      	ldr	r7, [r5, #0]
 80013e2:	6a21      	ldr	r1, [r4, #32]
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	d030      	beq.n	800144a <__sflush_r+0x92>
 80013e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	0759      	lsls	r1, r3, #29
 80013ee:	d505      	bpl.n	80013fc <__sflush_r+0x44>
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	1ad2      	subs	r2, r2, r3
 80013f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013f6:	b10b      	cbz	r3, 80013fc <__sflush_r+0x44>
 80013f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	2300      	movs	r3, #0
 80013fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001400:	6a21      	ldr	r1, [r4, #32]
 8001402:	4628      	mov	r0, r5
 8001404:	47b0      	blx	r6
 8001406:	1c43      	adds	r3, r0, #1
 8001408:	89a3      	ldrh	r3, [r4, #12]
 800140a:	d106      	bne.n	800141a <__sflush_r+0x62>
 800140c:	6829      	ldr	r1, [r5, #0]
 800140e:	291d      	cmp	r1, #29
 8001410:	d82b      	bhi.n	800146a <__sflush_r+0xb2>
 8001412:	4a2a      	ldr	r2, [pc, #168]	@ (80014bc <__sflush_r+0x104>)
 8001414:	410a      	asrs	r2, r1
 8001416:	07d6      	lsls	r6, r2, #31
 8001418:	d427      	bmi.n	800146a <__sflush_r+0xb2>
 800141a:	2200      	movs	r2, #0
 800141c:	6062      	str	r2, [r4, #4]
 800141e:	04d9      	lsls	r1, r3, #19
 8001420:	6922      	ldr	r2, [r4, #16]
 8001422:	6022      	str	r2, [r4, #0]
 8001424:	d504      	bpl.n	8001430 <__sflush_r+0x78>
 8001426:	1c42      	adds	r2, r0, #1
 8001428:	d101      	bne.n	800142e <__sflush_r+0x76>
 800142a:	682b      	ldr	r3, [r5, #0]
 800142c:	b903      	cbnz	r3, 8001430 <__sflush_r+0x78>
 800142e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001432:	602f      	str	r7, [r5, #0]
 8001434:	b1b9      	cbz	r1, 8001466 <__sflush_r+0xae>
 8001436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800143a:	4299      	cmp	r1, r3
 800143c:	d002      	beq.n	8001444 <__sflush_r+0x8c>
 800143e:	4628      	mov	r0, r5
 8001440:	f7ff fbf2 	bl	8000c28 <_free_r>
 8001444:	2300      	movs	r3, #0
 8001446:	6363      	str	r3, [r4, #52]	@ 0x34
 8001448:	e00d      	b.n	8001466 <__sflush_r+0xae>
 800144a:	2301      	movs	r3, #1
 800144c:	4628      	mov	r0, r5
 800144e:	47b0      	blx	r6
 8001450:	4602      	mov	r2, r0
 8001452:	1c50      	adds	r0, r2, #1
 8001454:	d1c9      	bne.n	80013ea <__sflush_r+0x32>
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0c6      	beq.n	80013ea <__sflush_r+0x32>
 800145c:	2b1d      	cmp	r3, #29
 800145e:	d001      	beq.n	8001464 <__sflush_r+0xac>
 8001460:	2b16      	cmp	r3, #22
 8001462:	d11e      	bne.n	80014a2 <__sflush_r+0xea>
 8001464:	602f      	str	r7, [r5, #0]
 8001466:	2000      	movs	r0, #0
 8001468:	e022      	b.n	80014b0 <__sflush_r+0xf8>
 800146a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800146e:	b21b      	sxth	r3, r3
 8001470:	e01b      	b.n	80014aa <__sflush_r+0xf2>
 8001472:	690f      	ldr	r7, [r1, #16]
 8001474:	2f00      	cmp	r7, #0
 8001476:	d0f6      	beq.n	8001466 <__sflush_r+0xae>
 8001478:	0793      	lsls	r3, r2, #30
 800147a:	680e      	ldr	r6, [r1, #0]
 800147c:	bf08      	it	eq
 800147e:	694b      	ldreq	r3, [r1, #20]
 8001480:	600f      	str	r7, [r1, #0]
 8001482:	bf18      	it	ne
 8001484:	2300      	movne	r3, #0
 8001486:	eba6 0807 	sub.w	r8, r6, r7
 800148a:	608b      	str	r3, [r1, #8]
 800148c:	f1b8 0f00 	cmp.w	r8, #0
 8001490:	dde9      	ble.n	8001466 <__sflush_r+0xae>
 8001492:	6a21      	ldr	r1, [r4, #32]
 8001494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001496:	4643      	mov	r3, r8
 8001498:	463a      	mov	r2, r7
 800149a:	4628      	mov	r0, r5
 800149c:	47b0      	blx	r6
 800149e:	2800      	cmp	r0, #0
 80014a0:	dc08      	bgt.n	80014b4 <__sflush_r+0xfc>
 80014a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014aa:	81a3      	strh	r3, [r4, #12]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014b4:	4407      	add	r7, r0
 80014b6:	eba8 0800 	sub.w	r8, r8, r0
 80014ba:	e7e7      	b.n	800148c <__sflush_r+0xd4>
 80014bc:	dfbffffe 	.word	0xdfbffffe

080014c0 <_fflush_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	690b      	ldr	r3, [r1, #16]
 80014c4:	4605      	mov	r5, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	b913      	cbnz	r3, 80014d0 <_fflush_r+0x10>
 80014ca:	2500      	movs	r5, #0
 80014cc:	4628      	mov	r0, r5
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	b118      	cbz	r0, 80014da <_fflush_r+0x1a>
 80014d2:	6a03      	ldr	r3, [r0, #32]
 80014d4:	b90b      	cbnz	r3, 80014da <_fflush_r+0x1a>
 80014d6:	f7ff fa9f 	bl	8000a18 <__sinit>
 80014da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f3      	beq.n	80014ca <_fflush_r+0xa>
 80014e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014e4:	07d0      	lsls	r0, r2, #31
 80014e6:	d404      	bmi.n	80014f2 <_fflush_r+0x32>
 80014e8:	0599      	lsls	r1, r3, #22
 80014ea:	d402      	bmi.n	80014f2 <_fflush_r+0x32>
 80014ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014ee:	f7ff fb98 	bl	8000c22 <__retarget_lock_acquire_recursive>
 80014f2:	4628      	mov	r0, r5
 80014f4:	4621      	mov	r1, r4
 80014f6:	f7ff ff5f 	bl	80013b8 <__sflush_r>
 80014fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80014fc:	07da      	lsls	r2, r3, #31
 80014fe:	4605      	mov	r5, r0
 8001500:	d4e4      	bmi.n	80014cc <_fflush_r+0xc>
 8001502:	89a3      	ldrh	r3, [r4, #12]
 8001504:	059b      	lsls	r3, r3, #22
 8001506:	d4e1      	bmi.n	80014cc <_fflush_r+0xc>
 8001508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800150a:	f7ff fb8b 	bl	8000c24 <__retarget_lock_release_recursive>
 800150e:	e7dd      	b.n	80014cc <_fflush_r+0xc>

08001510 <__swbuf_r>:
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	460e      	mov	r6, r1
 8001514:	4614      	mov	r4, r2
 8001516:	4605      	mov	r5, r0
 8001518:	b118      	cbz	r0, 8001522 <__swbuf_r+0x12>
 800151a:	6a03      	ldr	r3, [r0, #32]
 800151c:	b90b      	cbnz	r3, 8001522 <__swbuf_r+0x12>
 800151e:	f7ff fa7b 	bl	8000a18 <__sinit>
 8001522:	69a3      	ldr	r3, [r4, #24]
 8001524:	60a3      	str	r3, [r4, #8]
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	071a      	lsls	r2, r3, #28
 800152a:	d501      	bpl.n	8001530 <__swbuf_r+0x20>
 800152c:	6923      	ldr	r3, [r4, #16]
 800152e:	b943      	cbnz	r3, 8001542 <__swbuf_r+0x32>
 8001530:	4621      	mov	r1, r4
 8001532:	4628      	mov	r0, r5
 8001534:	f000 f82a 	bl	800158c <__swsetup_r>
 8001538:	b118      	cbz	r0, 8001542 <__swbuf_r+0x32>
 800153a:	f04f 37ff 	mov.w	r7, #4294967295
 800153e:	4638      	mov	r0, r7
 8001540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	6922      	ldr	r2, [r4, #16]
 8001546:	1a98      	subs	r0, r3, r2
 8001548:	6963      	ldr	r3, [r4, #20]
 800154a:	b2f6      	uxtb	r6, r6
 800154c:	4283      	cmp	r3, r0
 800154e:	4637      	mov	r7, r6
 8001550:	dc05      	bgt.n	800155e <__swbuf_r+0x4e>
 8001552:	4621      	mov	r1, r4
 8001554:	4628      	mov	r0, r5
 8001556:	f7ff ffb3 	bl	80014c0 <_fflush_r>
 800155a:	2800      	cmp	r0, #0
 800155c:	d1ed      	bne.n	800153a <__swbuf_r+0x2a>
 800155e:	68a3      	ldr	r3, [r4, #8]
 8001560:	3b01      	subs	r3, #1
 8001562:	60a3      	str	r3, [r4, #8]
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	6022      	str	r2, [r4, #0]
 800156a:	701e      	strb	r6, [r3, #0]
 800156c:	6962      	ldr	r2, [r4, #20]
 800156e:	1c43      	adds	r3, r0, #1
 8001570:	429a      	cmp	r2, r3
 8001572:	d004      	beq.n	800157e <__swbuf_r+0x6e>
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	07db      	lsls	r3, r3, #31
 8001578:	d5e1      	bpl.n	800153e <__swbuf_r+0x2e>
 800157a:	2e0a      	cmp	r6, #10
 800157c:	d1df      	bne.n	800153e <__swbuf_r+0x2e>
 800157e:	4621      	mov	r1, r4
 8001580:	4628      	mov	r0, r5
 8001582:	f7ff ff9d 	bl	80014c0 <_fflush_r>
 8001586:	2800      	cmp	r0, #0
 8001588:	d0d9      	beq.n	800153e <__swbuf_r+0x2e>
 800158a:	e7d6      	b.n	800153a <__swbuf_r+0x2a>

0800158c <__swsetup_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <__swsetup_r+0xa8>)
 8001590:	4605      	mov	r5, r0
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	460c      	mov	r4, r1
 8001596:	b118      	cbz	r0, 80015a0 <__swsetup_r+0x14>
 8001598:	6a03      	ldr	r3, [r0, #32]
 800159a:	b90b      	cbnz	r3, 80015a0 <__swsetup_r+0x14>
 800159c:	f7ff fa3c 	bl	8000a18 <__sinit>
 80015a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015a4:	0719      	lsls	r1, r3, #28
 80015a6:	d422      	bmi.n	80015ee <__swsetup_r+0x62>
 80015a8:	06da      	lsls	r2, r3, #27
 80015aa:	d407      	bmi.n	80015bc <__swsetup_r+0x30>
 80015ac:	2209      	movs	r2, #9
 80015ae:	602a      	str	r2, [r5, #0]
 80015b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b4:	81a3      	strh	r3, [r4, #12]
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ba:	e033      	b.n	8001624 <__swsetup_r+0x98>
 80015bc:	0758      	lsls	r0, r3, #29
 80015be:	d512      	bpl.n	80015e6 <__swsetup_r+0x5a>
 80015c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015c2:	b141      	cbz	r1, 80015d6 <__swsetup_r+0x4a>
 80015c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015c8:	4299      	cmp	r1, r3
 80015ca:	d002      	beq.n	80015d2 <__swsetup_r+0x46>
 80015cc:	4628      	mov	r0, r5
 80015ce:	f7ff fb2b 	bl	8000c28 <_free_r>
 80015d2:	2300      	movs	r3, #0
 80015d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80015d6:	89a3      	ldrh	r3, [r4, #12]
 80015d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	6063      	str	r3, [r4, #4]
 80015e2:	6923      	ldr	r3, [r4, #16]
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	81a3      	strh	r3, [r4, #12]
 80015ee:	6923      	ldr	r3, [r4, #16]
 80015f0:	b94b      	cbnz	r3, 8001606 <__swsetup_r+0x7a>
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80015f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015fc:	d003      	beq.n	8001606 <__swsetup_r+0x7a>
 80015fe:	4621      	mov	r1, r4
 8001600:	4628      	mov	r0, r5
 8001602:	f000 f84f 	bl	80016a4 <__smakebuf_r>
 8001606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800160a:	f013 0201 	ands.w	r2, r3, #1
 800160e:	d00a      	beq.n	8001626 <__swsetup_r+0x9a>
 8001610:	2200      	movs	r2, #0
 8001612:	60a2      	str	r2, [r4, #8]
 8001614:	6962      	ldr	r2, [r4, #20]
 8001616:	4252      	negs	r2, r2
 8001618:	61a2      	str	r2, [r4, #24]
 800161a:	6922      	ldr	r2, [r4, #16]
 800161c:	b942      	cbnz	r2, 8001630 <__swsetup_r+0xa4>
 800161e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001622:	d1c5      	bne.n	80015b0 <__swsetup_r+0x24>
 8001624:	bd38      	pop	{r3, r4, r5, pc}
 8001626:	0799      	lsls	r1, r3, #30
 8001628:	bf58      	it	pl
 800162a:	6962      	ldrpl	r2, [r4, #20]
 800162c:	60a2      	str	r2, [r4, #8]
 800162e:	e7f4      	b.n	800161a <__swsetup_r+0x8e>
 8001630:	2000      	movs	r0, #0
 8001632:	e7f7      	b.n	8001624 <__swsetup_r+0x98>
 8001634:	2000000c 	.word	0x2000000c

08001638 <_sbrk_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4d06      	ldr	r5, [pc, #24]	@ (8001654 <_sbrk_r+0x1c>)
 800163c:	2300      	movs	r3, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	602b      	str	r3, [r5, #0]
 8001644:	f7fe ff88 	bl	8000558 <_sbrk>
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	d102      	bne.n	8001652 <_sbrk_r+0x1a>
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	b103      	cbz	r3, 8001652 <_sbrk_r+0x1a>
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	bd38      	pop	{r3, r4, r5, pc}
 8001654:	200001e0 	.word	0x200001e0

08001658 <__swhatbuf_r>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	460c      	mov	r4, r1
 800165c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001660:	2900      	cmp	r1, #0
 8001662:	b096      	sub	sp, #88	@ 0x58
 8001664:	4615      	mov	r5, r2
 8001666:	461e      	mov	r6, r3
 8001668:	da0d      	bge.n	8001686 <__swhatbuf_r+0x2e>
 800166a:	89a3      	ldrh	r3, [r4, #12]
 800166c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	bf14      	ite	ne
 8001676:	2340      	movne	r3, #64	@ 0x40
 8001678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800167c:	2000      	movs	r0, #0
 800167e:	6031      	str	r1, [r6, #0]
 8001680:	602b      	str	r3, [r5, #0]
 8001682:	b016      	add	sp, #88	@ 0x58
 8001684:	bd70      	pop	{r4, r5, r6, pc}
 8001686:	466a      	mov	r2, sp
 8001688:	f000 f848 	bl	800171c <_fstat_r>
 800168c:	2800      	cmp	r0, #0
 800168e:	dbec      	blt.n	800166a <__swhatbuf_r+0x12>
 8001690:	9901      	ldr	r1, [sp, #4]
 8001692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800169a:	4259      	negs	r1, r3
 800169c:	4159      	adcs	r1, r3
 800169e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a2:	e7eb      	b.n	800167c <__swhatbuf_r+0x24>

080016a4 <__smakebuf_r>:
 80016a4:	898b      	ldrh	r3, [r1, #12]
 80016a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016a8:	079d      	lsls	r5, r3, #30
 80016aa:	4606      	mov	r6, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	d507      	bpl.n	80016c0 <__smakebuf_r+0x1c>
 80016b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	6123      	str	r3, [r4, #16]
 80016b8:	2301      	movs	r3, #1
 80016ba:	6163      	str	r3, [r4, #20]
 80016bc:	b003      	add	sp, #12
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c0:	ab01      	add	r3, sp, #4
 80016c2:	466a      	mov	r2, sp
 80016c4:	f7ff ffc8 	bl	8001658 <__swhatbuf_r>
 80016c8:	9f00      	ldr	r7, [sp, #0]
 80016ca:	4605      	mov	r5, r0
 80016cc:	4639      	mov	r1, r7
 80016ce:	4630      	mov	r0, r6
 80016d0:	f7ff fb16 	bl	8000d00 <_malloc_r>
 80016d4:	b948      	cbnz	r0, 80016ea <__smakebuf_r+0x46>
 80016d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016da:	059a      	lsls	r2, r3, #22
 80016dc:	d4ee      	bmi.n	80016bc <__smakebuf_r+0x18>
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	81a3      	strh	r3, [r4, #12]
 80016e8:	e7e2      	b.n	80016b0 <__smakebuf_r+0xc>
 80016ea:	89a3      	ldrh	r3, [r4, #12]
 80016ec:	6020      	str	r0, [r4, #0]
 80016ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f2:	81a3      	strh	r3, [r4, #12]
 80016f4:	9b01      	ldr	r3, [sp, #4]
 80016f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016fa:	b15b      	cbz	r3, 8001714 <__smakebuf_r+0x70>
 80016fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001700:	4630      	mov	r0, r6
 8001702:	f000 f81d 	bl	8001740 <_isatty_r>
 8001706:	b128      	cbz	r0, 8001714 <__smakebuf_r+0x70>
 8001708:	89a3      	ldrh	r3, [r4, #12]
 800170a:	f023 0303 	bic.w	r3, r3, #3
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	81a3      	strh	r3, [r4, #12]
 8001714:	89a3      	ldrh	r3, [r4, #12]
 8001716:	431d      	orrs	r5, r3
 8001718:	81a5      	strh	r5, [r4, #12]
 800171a:	e7cf      	b.n	80016bc <__smakebuf_r+0x18>

0800171c <_fstat_r>:
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4d07      	ldr	r5, [pc, #28]	@ (800173c <_fstat_r+0x20>)
 8001720:	2300      	movs	r3, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	602b      	str	r3, [r5, #0]
 800172a:	f7fe feed 	bl	8000508 <_fstat>
 800172e:	1c43      	adds	r3, r0, #1
 8001730:	d102      	bne.n	8001738 <_fstat_r+0x1c>
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	b103      	cbz	r3, 8001738 <_fstat_r+0x1c>
 8001736:	6023      	str	r3, [r4, #0]
 8001738:	bd38      	pop	{r3, r4, r5, pc}
 800173a:	bf00      	nop
 800173c:	200001e0 	.word	0x200001e0

08001740 <_isatty_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d06      	ldr	r5, [pc, #24]	@ (800175c <_isatty_r+0x1c>)
 8001744:	2300      	movs	r3, #0
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	602b      	str	r3, [r5, #0]
 800174c:	f7fe feec 	bl	8000528 <_isatty>
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d102      	bne.n	800175a <_isatty_r+0x1a>
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	b103      	cbz	r3, 800175a <_isatty_r+0x1a>
 8001758:	6023      	str	r3, [r4, #0]
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	200001e0 	.word	0x200001e0

08001760 <_init>:
 8001760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001762:	bf00      	nop
 8001764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001766:	bc08      	pop	{r3}
 8001768:	469e      	mov	lr, r3
 800176a:	4770      	bx	lr

0800176c <_fini>:
 800176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176e:	bf00      	nop
 8001770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001772:	bc08      	pop	{r3}
 8001774:	469e      	mov	lr, r3
 8001776:	4770      	bx	lr
