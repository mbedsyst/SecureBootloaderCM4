
BOOT0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000151c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080016bc  080016bc  000026bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e4  080018e4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080018e4  080018e4  000028e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018ec  080018ec  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018ec  080018ec  000028ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018f0  080018f0  000028f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080018f4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000005c  08001950  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001950  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018f1  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008f3  00000000  00000000  0000497d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00005270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000176  00000000  00000000  00005498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd35  00000000  00000000  0000560e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d1b  00000000  00000000  00015343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000556c0  00000000  00000000  0001805e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d71e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e1c  00000000  00000000  0006d764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0006e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080016a4 	.word	0x080016a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080016a4 	.word	0x080016a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <BOOT_Init>:
#include "Drivers/CRC.h"

static app_Metadata applicationMetadata;

void BOOT_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	LED_Init();
 8000284:	f000 f9c6 	bl	8000614 <LED_Init>
	UART2_Init();
 8000288:	f000 fa2c 	bl	80006e4 <UART2_Init>
	CRC_Init();
 800028c:	f000 f978 	bl	8000580 <CRC_Init>
	printf("[info] Initializing Bootloader.\n\r");
 8000290:	4802      	ldr	r0, [pc, #8]	@ (800029c <BOOT_Init+0x1c>)
 8000292:	f000 fb99 	bl	80009c8 <iprintf>

}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	080016bc 	.word	0x080016bc

080002a0 <BOOT_DeInit>:

static void BOOT_DeInit(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	printf("[info] De-Initializing Bootloader.\n\r");
 80002a4:	4805      	ldr	r0, [pc, #20]	@ (80002bc <BOOT_DeInit+0x1c>)
 80002a6:	f000 fb8f 	bl	80009c8 <iprintf>
	LED_DeInit();
 80002aa:	f000 f9e3 	bl	8000674 <LED_DeInit>
	UART2_DeInit();
 80002ae:	f000 fa55 	bl	800075c <UART2_DeInit>
	CRC_DeInit();
 80002b2:	f000 f97d 	bl	80005b0 <CRC_DeInit>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	080016e0 	.word	0x080016e0

080002c0 <BOOT_SaveMetadata>:

static void BOOT_SaveMetadata(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	applicationMetadata.id = *(volatile uint32_t *)APP_ID_ADDR;
 80002c4:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <BOOT_SaveMetadata+0x60>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 80002ca:	6013      	str	r3, [r2, #0]
	applicationMetadata.version = *(volatile uint32_t *)APP_VERSION_ADDR;
 80002cc:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <BOOT_SaveMetadata+0x60>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3304      	adds	r3, #4
 80002d2:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 80002d4:	6053      	str	r3, [r2, #4]
	applicationMetadata.size = *(volatile uint32_t *)APP_SIZE_ADDR;
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <BOOT_SaveMetadata+0x60>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3308      	adds	r3, #8
 80002dc:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 80002de:	6093      	str	r3, [r2, #8]
	applicationMetadata.crc = *(volatile uint32_t *)APP_CRC_ADDR;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <BOOT_SaveMetadata+0x60>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	330c      	adds	r3, #12
 80002e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 80002e8:	60d3      	str	r3, [r2, #12]

	printf("[info] Application ID: 0x%08X\r\n", (unsigned int)applicationMetadata.id);
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4619      	mov	r1, r3
 80002f0:	480d      	ldr	r0, [pc, #52]	@ (8000328 <BOOT_SaveMetadata+0x68>)
 80002f2:	f000 fb69 	bl	80009c8 <iprintf>
	printf("[info] Application Version: %u\r\n", (unsigned int)applicationMetadata.version);
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	4619      	mov	r1, r3
 80002fc:	480b      	ldr	r0, [pc, #44]	@ (800032c <BOOT_SaveMetadata+0x6c>)
 80002fe:	f000 fb63 	bl	80009c8 <iprintf>
	printf("[info] Application File size: %u bytes\r\n", (unsigned int)applicationMetadata.size);
 8000302:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	4619      	mov	r1, r3
 8000308:	4809      	ldr	r0, [pc, #36]	@ (8000330 <BOOT_SaveMetadata+0x70>)
 800030a:	f000 fb5d 	bl	80009c8 <iprintf>
	printf("[info] Application CRC Value: 0x%08X\r\n",(unsigned int)applicationMetadata.crc);
 800030e:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <BOOT_SaveMetadata+0x64>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4619      	mov	r1, r3
 8000314:	4807      	ldr	r0, [pc, #28]	@ (8000334 <BOOT_SaveMetadata+0x74>)
 8000316:	f000 fb57 	bl	80009c8 <iprintf>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	08008000 	.word	0x08008000
 8000324:	20000078 	.word	0x20000078
 8000328:	08001708 	.word	0x08001708
 800032c:	08001728 	.word	0x08001728
 8000330:	0800174c 	.word	0x0800174c
 8000334:	08001778 	.word	0x08001778

08000338 <BOOT_LocateApplication>:

uint32_t BOOT_LocateApplication(uint32_t app_id_address)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint32_t appID = *(volatile uint32_t *)app_id_address;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	60fb      	str	r3, [r7, #12]
	if(appID != APP_ID)
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <BOOT_LocateApplication+0x3c>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d005      	beq.n	800035a <BOOT_LocateApplication+0x22>
	{
		printf("\033[0;31m[error] Application missing at: 0x%08X\033[0m\n\r", (unsigned int)app_id_address);
 800034e:	6879      	ldr	r1, [r7, #4]
 8000350:	4809      	ldr	r0, [pc, #36]	@ (8000378 <BOOT_LocateApplication+0x40>)
 8000352:	f000 fb39 	bl	80009c8 <iprintf>
		return 0;
 8000356:	2300      	movs	r3, #0
 8000358:	e007      	b.n	800036a <BOOT_LocateApplication+0x32>
	}
	printf("[info] Application found at: 0x%08X\n\r", (unsigned int)app_id_address);
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	4807      	ldr	r0, [pc, #28]	@ (800037c <BOOT_LocateApplication+0x44>)
 800035e:	f000 fb33 	bl	80009c8 <iprintf>
	BOOT_SaveMetadata();
 8000362:	f7ff ffad 	bl	80002c0 <BOOT_SaveMetadata>
	return applicationMetadata.size;
 8000366:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <BOOT_LocateApplication+0x48>)
 8000368:	689b      	ldr	r3, [r3, #8]
}
 800036a:	4618      	mov	r0, r3
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	deadbeef 	.word	0xdeadbeef
 8000378:	080017a0 	.word	0x080017a0
 800037c:	080017d4 	.word	0x080017d4
 8000380:	20000078 	.word	0x20000078

08000384 <BOOT_VerifyApplication>:

bool BOOT_VerifyApplication(uint32_t app_size)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint32_t app_words = applicationMetadata.size/4;
 800038c:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <BOOT_VerifyApplication+0x4c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	617b      	str	r3, [r7, #20]
	uint32_t appCRC = applicationMetadata.crc;
 8000394:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <BOOT_VerifyApplication+0x4c>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	613b      	str	r3, [r7, #16]
	const uint32_t appCODE = *(const uint32_t *)APP_CODE_START;
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <BOOT_VerifyApplication+0x50>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3310      	adds	r3, #16
 80003a0:	60fb      	str	r3, [r7, #12]
	uint32_t calculated_CRC = CRC_Calculate((const uint32_t *)appCODE, app_words);
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	6979      	ldr	r1, [r7, #20]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f912 	bl	80005d0 <CRC_Calculate>
 80003ac:	60b8      	str	r0, [r7, #8]

	if(calculated_CRC != appCRC)
 80003ae:	68ba      	ldr	r2, [r7, #8]
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d004      	beq.n	80003c0 <BOOT_VerifyApplication+0x3c>
	{
		printf("\033[0;31m[error] Application Verification failed: Checksum error.\033[0m\n\r");
 80003b6:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <BOOT_VerifyApplication+0x54>)
 80003b8:	f000 fb06 	bl	80009c8 <iprintf>
		return false;
 80003bc:	2300      	movs	r3, #0
 80003be:	e003      	b.n	80003c8 <BOOT_VerifyApplication+0x44>
	}

	printf("[info] Application Verification success: Checksum pass.\n\r");
 80003c0:	4806      	ldr	r0, [pc, #24]	@ (80003dc <BOOT_VerifyApplication+0x58>)
 80003c2:	f000 fb01 	bl	80009c8 <iprintf>
	return true;
 80003c6:	2301      	movs	r3, #1
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3718      	adds	r7, #24
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000078 	.word	0x20000078
 80003d4:	08008000 	.word	0x08008000
 80003d8:	080017fc 	.word	0x080017fc
 80003dc:	08001844 	.word	0x08001844

080003e0 <BOOT_LoadApplication>:

void BOOT_LoadApplication()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
	uint32_t app_code_start = APP_CODE_START;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <BOOT_LoadApplication+0x40>)
 80003e8:	617b      	str	r3, [r7, #20]
	uint32_t *app_vector_table = (uint32_t *)app_code_start;
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	613b      	str	r3, [r7, #16]
	uint32_t app_stack_pointer = app_vector_table[0];
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	60fb      	str	r3, [r7, #12]
	uint32_t app_reset_handler = app_vector_table[1];
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fa:	b672      	cpsid	i
}
 80003fc:	bf00      	nop

	__disable_irq();

	BOOT_DeInit();
 80003fe:	f7ff ff4f 	bl	80002a0 <BOOT_DeInit>

	SCB->VTOR = app_code_start;
 8000402:	4a08      	ldr	r2, [pc, #32]	@ (8000424 <BOOT_LoadApplication+0x44>)
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	6093      	str	r3, [r2, #8]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	f383 8808 	msr	MSP, r3
}
 8000412:	bf00      	nop
	__set_MSP(app_stack_pointer);

	void (*reset_handler)(void) = (void (*)(void))app_reset_handler;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	607b      	str	r3, [r7, #4]
	reset_handler();
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4798      	blx	r3
	while(1);
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <BOOT_LoadApplication+0x3c>
 8000420:	08008010 	.word	0x08008010
 8000424:	e000ed00 	.word	0xe000ed00

08000428 <BOOT_HandleErrors>:
}

void BOOT_HandleErrors(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	printf("\033[0;31m[error] Application Failed to Load.\033[0m\n\r");
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <BOOT_HandleErrors+0x10>)
 800042e:	f000 facb 	bl	80009c8 <iprintf>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	08001880 	.word	0x08001880

0800043c <main>:
#include "main.h"

int main()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	uint32_t applicationSize;

	BOOT_Init();
 8000442:	f7ff ff1d 	bl	8000280 <BOOT_Init>
	applicationSize = BOOT_LocateApplication(APP_ID_ADDR);
 8000446:	4809      	ldr	r0, [pc, #36]	@ (800046c <main+0x30>)
 8000448:	f7ff ff76 	bl	8000338 <BOOT_LocateApplication>
 800044c:	6078      	str	r0, [r7, #4]

	if(BOOT_VerifyApplication(applicationSize))
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ff98 	bl	8000384 <BOOT_VerifyApplication>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <main+0x24>
	{
		BOOT_LoadApplication();
 800045a:	f7ff ffc1 	bl	80003e0 <BOOT_LoadApplication>
 800045e:	e002      	b.n	8000466 <main+0x2a>
	}
	else
	{
		BOOT_HandleErrors();
 8000460:	f7ff ffe2 	bl	8000428 <BOOT_HandleErrors>
	}

	while(1)
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	e7fd      	b.n	8000466 <main+0x2a>
 800046a:	bf00      	nop
 800046c:	08008000 	.word	0x08008000

08000470 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	e00a      	b.n	8000498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000482:	f3af 8000 	nop.w
 8000486:	4601      	mov	r1, r0
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	60ba      	str	r2, [r7, #8]
 800048e:	b2ca      	uxtb	r2, r1
 8000490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	3301      	adds	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf0      	blt.n	8000482 <_read+0x12>
  }

  return len;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004d2:	605a      	str	r2, [r3, #4]
  return 0;
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <_isatty>:

int _isatty(int file)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004ea:	2301      	movs	r3, #1
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800051c:	4a14      	ldr	r2, [pc, #80]	@ (8000570 <_sbrk+0x5c>)
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <_sbrk+0x60>)
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <_sbrk+0x64>)
 8000532:	4a12      	ldr	r2, [pc, #72]	@ (800057c <_sbrk+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <_sbrk+0x64>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	429a      	cmp	r2, r3
 8000542:	d207      	bcs.n	8000554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000544:	f000 fae4 	bl	8000b10 <__errno>
 8000548:	4603      	mov	r3, r0
 800054a:	220c      	movs	r2, #12
 800054c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	e009      	b.n	8000568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <_sbrk+0x64>)
 8000564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20018000 	.word	0x20018000
 8000574:	00000400 	.word	0x00000400
 8000578:	20000088 	.word	0x20000088
 800057c:	200001d8 	.word	0x200001d8

08000580 <CRC_Init>:
#include "Drivers/CRC.h"

void CRC_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <CRC_Init+0x28>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000588:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <CRC_Init+0x28>)
 800058a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800058e:	6313      	str	r3, [r2, #48]	@ 0x30
	CRC->CR |= CRC_CR_RESET;
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <CRC_Init+0x2c>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <CRC_Init+0x2c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6093      	str	r3, [r2, #8]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40023000 	.word	0x40023000

080005b0 <CRC_DeInit>:

void CRC_DeInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_CRCEN;
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <CRC_DeInit+0x1c>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <CRC_DeInit+0x1c>)
 80005ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80005be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <CRC_Calculate>:

uint32_t CRC_Calculate(const uint32_t *data, uint32_t len)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	CRC->CR |= CRC_CR_RESET;
 80005da:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <CRC_Calculate+0x40>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <CRC_Calculate+0x40>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6093      	str	r3, [r2, #8]
	while(len--)
 80005e6:	e005      	b.n	80005f4 <CRC_Calculate+0x24>
	{
		CRC->DR = *data++;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	1d1a      	adds	r2, r3, #4
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <CRC_Calculate+0x40>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6013      	str	r3, [r2, #0]
	while(len--)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	603a      	str	r2, [r7, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f4      	bne.n	80005e8 <CRC_Calculate+0x18>
	}
	return CRC->DR;
 80005fe:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <CRC_Calculate+0x40>)
 8000600:	681b      	ldr	r3, [r3, #0]
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023000 	.word	0x40023000

08000614 <LED_Init>:
#include "Drivers/LED.h"

void LED_Init(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <LED_Init+0x58>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	4a13      	ldr	r2, [pc, #76]	@ (800066c <LED_Init+0x58>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <LED_Init+0x5c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <LED_Init+0x5c>)
 800062a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800062e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <LED_Init+0x5c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <LED_Init+0x5c>)
 8000636:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800063a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <LED_Init+0x5c>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <LED_Init+0x5c>)
 8000642:	f023 0320 	bic.w	r3, r3, #32
 8000646:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <LED_Init+0x5c>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4a08      	ldr	r2, [pc, #32]	@ (8000670 <LED_Init+0x5c>)
 800064e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000652:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <LED_Init+0x5c>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <LED_Init+0x5c>)
 800065a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000

08000674 <LED_DeInit>:

void LED_DeInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	 RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <LED_DeInit+0x1c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <LED_DeInit+0x1c>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	085a      	lsrs	r2, r3, #1
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	441a      	add	r2, r3
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ac:	b29b      	uxth	r3, r3
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 80006c6:	6839      	ldr	r1, [r7, #0]
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ffe3 	bl	8000694 <Compute_UART_Baud>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <UART2_SetBaudRate+0x24>)
 80006d4:	609a      	str	r2, [r3, #8]
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40004400 	.word	0x40004400

080006e4 <UART2_Init>:

void UART2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <UART2_Init+0x68>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a17      	ldr	r2, [pc, #92]	@ (800074c <UART2_Init+0x68>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <UART2_Init+0x68>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <UART2_Init+0x68>)
 80006fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <UART2_Init+0x6c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <UART2_Init+0x6c>)
 8000706:	f023 0310 	bic.w	r3, r3, #16
 800070a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <UART2_Init+0x6c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0f      	ldr	r2, [pc, #60]	@ (8000750 <UART2_Init+0x6c>)
 8000712:	f043 0320 	orr.w	r3, r3, #32
 8000716:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <UART2_Init+0x6c>)
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <UART2_Init+0x6c>)
 800071e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000722:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 8000724:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000728:	480a      	ldr	r0, [pc, #40]	@ (8000754 <UART2_Init+0x70>)
 800072a:	f7ff ffc7 	bl	80006bc <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <UART2_Init+0x74>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	4a09      	ldr	r2, [pc, #36]	@ (8000758 <UART2_Init+0x74>)
 8000734:	f043 030c 	orr.w	r3, r3, #12
 8000738:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <UART2_Init+0x74>)
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	4a06      	ldr	r2, [pc, #24]	@ (8000758 <UART2_Init+0x74>)
 8000740:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000744:	60d3      	str	r3, [r2, #12]
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000
 8000754:	00f42400 	.word	0x00f42400
 8000758:	40004400 	.word	0x40004400

0800075c <UART2_DeInit>:

void UART2_DeInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <UART2_DeInit+0x28>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <UART2_DeInit+0x28>)
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR &= ~RCC_APB1ENR_USART2EN;
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <UART2_DeInit+0x28>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <UART2_DeInit+0x28>)
 8000772:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000776:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <UART2_TxChar>:

void UART2_TxChar(char ch)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART2->SR & USART_SR_TXE));
 8000792:	bf00      	nop
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <UART2_TxChar+0x2c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0f9      	beq.n	8000794 <UART2_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART2->DR = (ch &0xFF);
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <UART2_TxChar+0x2c>)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	6053      	str	r3, [r2, #4]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40004400 	.word	0x40004400

080007b8 <_write>:
	while(!(USART2->SR & (1<<5)));
	return USART2->DR;
}

int _write(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e009      	b.n	80007de <_write+0x26>
    {
        UART2_TxChar(ptr[i]);
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	4413      	add	r3, r2
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffd8 	bl	8000788 <UART2_TxChar>
    for (int i = 0; i < len; i++)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbf1      	blt.n	80007ca <_write+0x12>
    }
    return len;
 80007e6:	687b      	ldr	r3, [r7, #4]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	@ (8000830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	@ (800083c <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081e:	f000 f97d 	bl	8000b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fe0b 	bl	800043c <main>

08000826 <LoopForever>:

LoopForever:
  b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   r0, =_estack
 8000828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000834:	080018f4 	.word	0x080018f4
  ldr r2, =_sbss
 8000838:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800083c:	200001d8 	.word	0x200001d8

08000840 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>
	...

08000844 <std>:
 8000844:	2300      	movs	r3, #0
 8000846:	b510      	push	{r4, lr}
 8000848:	4604      	mov	r4, r0
 800084a:	e9c0 3300 	strd	r3, r3, [r0]
 800084e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000852:	6083      	str	r3, [r0, #8]
 8000854:	8181      	strh	r1, [r0, #12]
 8000856:	6643      	str	r3, [r0, #100]	@ 0x64
 8000858:	81c2      	strh	r2, [r0, #14]
 800085a:	6183      	str	r3, [r0, #24]
 800085c:	4619      	mov	r1, r3
 800085e:	2208      	movs	r2, #8
 8000860:	305c      	adds	r0, #92	@ 0x5c
 8000862:	f000 f906 	bl	8000a72 <memset>
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <std+0x58>)
 8000868:	6263      	str	r3, [r4, #36]	@ 0x24
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <std+0x5c>)
 800086c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <std+0x60>)
 8000870:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <std+0x64>)
 8000874:	6323      	str	r3, [r4, #48]	@ 0x30
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <std+0x68>)
 8000878:	6224      	str	r4, [r4, #32]
 800087a:	429c      	cmp	r4, r3
 800087c:	d006      	beq.n	800088c <std+0x48>
 800087e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000882:	4294      	cmp	r4, r2
 8000884:	d002      	beq.n	800088c <std+0x48>
 8000886:	33d0      	adds	r3, #208	@ 0xd0
 8000888:	429c      	cmp	r4, r3
 800088a:	d105      	bne.n	8000898 <std+0x54>
 800088c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000894:	f000 b966 	b.w	8000b64 <__retarget_lock_init_recursive>
 8000898:	bd10      	pop	{r4, pc}
 800089a:	bf00      	nop
 800089c:	080009ed 	.word	0x080009ed
 80008a0:	08000a0f 	.word	0x08000a0f
 80008a4:	08000a47 	.word	0x08000a47
 80008a8:	08000a6b 	.word	0x08000a6b
 80008ac:	2000008c 	.word	0x2000008c

080008b0 <stdio_exit_handler>:
 80008b0:	4a02      	ldr	r2, [pc, #8]	@ (80008bc <stdio_exit_handler+0xc>)
 80008b2:	4903      	ldr	r1, [pc, #12]	@ (80008c0 <stdio_exit_handler+0x10>)
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <stdio_exit_handler+0x14>)
 80008b6:	f000 b869 	b.w	800098c <_fwalk_sglue>
 80008ba:	bf00      	nop
 80008bc:	20000000 	.word	0x20000000
 80008c0:	08001405 	.word	0x08001405
 80008c4:	20000010 	.word	0x20000010

080008c8 <cleanup_stdio>:
 80008c8:	6841      	ldr	r1, [r0, #4]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <cleanup_stdio+0x34>)
 80008cc:	4299      	cmp	r1, r3
 80008ce:	b510      	push	{r4, lr}
 80008d0:	4604      	mov	r4, r0
 80008d2:	d001      	beq.n	80008d8 <cleanup_stdio+0x10>
 80008d4:	f000 fd96 	bl	8001404 <_fflush_r>
 80008d8:	68a1      	ldr	r1, [r4, #8]
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <cleanup_stdio+0x38>)
 80008dc:	4299      	cmp	r1, r3
 80008de:	d002      	beq.n	80008e6 <cleanup_stdio+0x1e>
 80008e0:	4620      	mov	r0, r4
 80008e2:	f000 fd8f 	bl	8001404 <_fflush_r>
 80008e6:	68e1      	ldr	r1, [r4, #12]
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <cleanup_stdio+0x3c>)
 80008ea:	4299      	cmp	r1, r3
 80008ec:	d004      	beq.n	80008f8 <cleanup_stdio+0x30>
 80008ee:	4620      	mov	r0, r4
 80008f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f4:	f000 bd86 	b.w	8001404 <_fflush_r>
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	bf00      	nop
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	200000f4 	.word	0x200000f4
 8000904:	2000015c 	.word	0x2000015c

08000908 <global_stdio_init.part.0>:
 8000908:	b510      	push	{r4, lr}
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <global_stdio_init.part.0+0x30>)
 800090c:	4c0b      	ldr	r4, [pc, #44]	@ (800093c <global_stdio_init.part.0+0x34>)
 800090e:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <global_stdio_init.part.0+0x38>)
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	4620      	mov	r0, r4
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	f7ff ff94 	bl	8000844 <std>
 800091c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000920:	2201      	movs	r2, #1
 8000922:	2109      	movs	r1, #9
 8000924:	f7ff ff8e 	bl	8000844 <std>
 8000928:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800092c:	2202      	movs	r2, #2
 800092e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000932:	2112      	movs	r1, #18
 8000934:	f7ff bf86 	b.w	8000844 <std>
 8000938:	200001c4 	.word	0x200001c4
 800093c:	2000008c 	.word	0x2000008c
 8000940:	080008b1 	.word	0x080008b1

08000944 <__sfp_lock_acquire>:
 8000944:	4801      	ldr	r0, [pc, #4]	@ (800094c <__sfp_lock_acquire+0x8>)
 8000946:	f000 b90e 	b.w	8000b66 <__retarget_lock_acquire_recursive>
 800094a:	bf00      	nop
 800094c:	200001cd 	.word	0x200001cd

08000950 <__sfp_lock_release>:
 8000950:	4801      	ldr	r0, [pc, #4]	@ (8000958 <__sfp_lock_release+0x8>)
 8000952:	f000 b909 	b.w	8000b68 <__retarget_lock_release_recursive>
 8000956:	bf00      	nop
 8000958:	200001cd 	.word	0x200001cd

0800095c <__sinit>:
 800095c:	b510      	push	{r4, lr}
 800095e:	4604      	mov	r4, r0
 8000960:	f7ff fff0 	bl	8000944 <__sfp_lock_acquire>
 8000964:	6a23      	ldr	r3, [r4, #32]
 8000966:	b11b      	cbz	r3, 8000970 <__sinit+0x14>
 8000968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800096c:	f7ff bff0 	b.w	8000950 <__sfp_lock_release>
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <__sinit+0x28>)
 8000972:	6223      	str	r3, [r4, #32]
 8000974:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <__sinit+0x2c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f5      	bne.n	8000968 <__sinit+0xc>
 800097c:	f7ff ffc4 	bl	8000908 <global_stdio_init.part.0>
 8000980:	e7f2      	b.n	8000968 <__sinit+0xc>
 8000982:	bf00      	nop
 8000984:	080008c9 	.word	0x080008c9
 8000988:	200001c4 	.word	0x200001c4

0800098c <_fwalk_sglue>:
 800098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000990:	4607      	mov	r7, r0
 8000992:	4688      	mov	r8, r1
 8000994:	4614      	mov	r4, r2
 8000996:	2600      	movs	r6, #0
 8000998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800099c:	f1b9 0901 	subs.w	r9, r9, #1
 80009a0:	d505      	bpl.n	80009ae <_fwalk_sglue+0x22>
 80009a2:	6824      	ldr	r4, [r4, #0]
 80009a4:	2c00      	cmp	r4, #0
 80009a6:	d1f7      	bne.n	8000998 <_fwalk_sglue+0xc>
 80009a8:	4630      	mov	r0, r6
 80009aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009ae:	89ab      	ldrh	r3, [r5, #12]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d907      	bls.n	80009c4 <_fwalk_sglue+0x38>
 80009b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009b8:	3301      	adds	r3, #1
 80009ba:	d003      	beq.n	80009c4 <_fwalk_sglue+0x38>
 80009bc:	4629      	mov	r1, r5
 80009be:	4638      	mov	r0, r7
 80009c0:	47c0      	blx	r8
 80009c2:	4306      	orrs	r6, r0
 80009c4:	3568      	adds	r5, #104	@ 0x68
 80009c6:	e7e9      	b.n	800099c <_fwalk_sglue+0x10>

080009c8 <iprintf>:
 80009c8:	b40f      	push	{r0, r1, r2, r3}
 80009ca:	b507      	push	{r0, r1, r2, lr}
 80009cc:	4906      	ldr	r1, [pc, #24]	@ (80009e8 <iprintf+0x20>)
 80009ce:	ab04      	add	r3, sp, #16
 80009d0:	6808      	ldr	r0, [r1, #0]
 80009d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80009d6:	6881      	ldr	r1, [r0, #8]
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	f000 f9e9 	bl	8000db0 <_vfiprintf_r>
 80009de:	b003      	add	sp, #12
 80009e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80009e4:	b004      	add	sp, #16
 80009e6:	4770      	bx	lr
 80009e8:	2000000c 	.word	0x2000000c

080009ec <__sread>:
 80009ec:	b510      	push	{r4, lr}
 80009ee:	460c      	mov	r4, r1
 80009f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f4:	f000 f868 	bl	8000ac8 <_read_r>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	bfab      	itete	ge
 80009fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009fe:	89a3      	ldrhlt	r3, [r4, #12]
 8000a00:	181b      	addge	r3, r3, r0
 8000a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a06:	bfac      	ite	ge
 8000a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a0a:	81a3      	strhlt	r3, [r4, #12]
 8000a0c:	bd10      	pop	{r4, pc}

08000a0e <__swrite>:
 8000a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a12:	461f      	mov	r7, r3
 8000a14:	898b      	ldrh	r3, [r1, #12]
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	4605      	mov	r5, r0
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	4616      	mov	r6, r2
 8000a1e:	d505      	bpl.n	8000a2c <__swrite+0x1e>
 8000a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a24:	2302      	movs	r3, #2
 8000a26:	2200      	movs	r2, #0
 8000a28:	f000 f83c 	bl	8000aa4 <_lseek_r>
 8000a2c:	89a3      	ldrh	r3, [r4, #12]
 8000a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a36:	81a3      	strh	r3, [r4, #12]
 8000a38:	4632      	mov	r2, r6
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a42:	f000 b853 	b.w	8000aec <_write_r>

08000a46 <__sseek>:
 8000a46:	b510      	push	{r4, lr}
 8000a48:	460c      	mov	r4, r1
 8000a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a4e:	f000 f829 	bl	8000aa4 <_lseek_r>
 8000a52:	1c43      	adds	r3, r0, #1
 8000a54:	89a3      	ldrh	r3, [r4, #12]
 8000a56:	bf15      	itete	ne
 8000a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a62:	81a3      	strheq	r3, [r4, #12]
 8000a64:	bf18      	it	ne
 8000a66:	81a3      	strhne	r3, [r4, #12]
 8000a68:	bd10      	pop	{r4, pc}

08000a6a <__sclose>:
 8000a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a6e:	f000 b809 	b.w	8000a84 <_close_r>

08000a72 <memset>:
 8000a72:	4402      	add	r2, r0
 8000a74:	4603      	mov	r3, r0
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d100      	bne.n	8000a7c <memset+0xa>
 8000a7a:	4770      	bx	lr
 8000a7c:	f803 1b01 	strb.w	r1, [r3], #1
 8000a80:	e7f9      	b.n	8000a76 <memset+0x4>
	...

08000a84 <_close_r>:
 8000a84:	b538      	push	{r3, r4, r5, lr}
 8000a86:	4d06      	ldr	r5, [pc, #24]	@ (8000aa0 <_close_r+0x1c>)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	602b      	str	r3, [r5, #0]
 8000a90:	f7ff fd0b 	bl	80004aa <_close>
 8000a94:	1c43      	adds	r3, r0, #1
 8000a96:	d102      	bne.n	8000a9e <_close_r+0x1a>
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	b103      	cbz	r3, 8000a9e <_close_r+0x1a>
 8000a9c:	6023      	str	r3, [r4, #0]
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
 8000aa0:	200001c8 	.word	0x200001c8

08000aa4 <_lseek_r>:
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4d07      	ldr	r5, [pc, #28]	@ (8000ac4 <_lseek_r+0x20>)
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	2200      	movs	r2, #0
 8000ab0:	602a      	str	r2, [r5, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f7ff fd20 	bl	80004f8 <_lseek>
 8000ab8:	1c43      	adds	r3, r0, #1
 8000aba:	d102      	bne.n	8000ac2 <_lseek_r+0x1e>
 8000abc:	682b      	ldr	r3, [r5, #0]
 8000abe:	b103      	cbz	r3, 8000ac2 <_lseek_r+0x1e>
 8000ac0:	6023      	str	r3, [r4, #0]
 8000ac2:	bd38      	pop	{r3, r4, r5, pc}
 8000ac4:	200001c8 	.word	0x200001c8

08000ac8 <_read_r>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	4d07      	ldr	r5, [pc, #28]	@ (8000ae8 <_read_r+0x20>)
 8000acc:	4604      	mov	r4, r0
 8000ace:	4608      	mov	r0, r1
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	602a      	str	r2, [r5, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f7ff fcca 	bl	8000470 <_read>
 8000adc:	1c43      	adds	r3, r0, #1
 8000ade:	d102      	bne.n	8000ae6 <_read_r+0x1e>
 8000ae0:	682b      	ldr	r3, [r5, #0]
 8000ae2:	b103      	cbz	r3, 8000ae6 <_read_r+0x1e>
 8000ae4:	6023      	str	r3, [r4, #0]
 8000ae6:	bd38      	pop	{r3, r4, r5, pc}
 8000ae8:	200001c8 	.word	0x200001c8

08000aec <_write_r>:
 8000aec:	b538      	push	{r3, r4, r5, lr}
 8000aee:	4d07      	ldr	r5, [pc, #28]	@ (8000b0c <_write_r+0x20>)
 8000af0:	4604      	mov	r4, r0
 8000af2:	4608      	mov	r0, r1
 8000af4:	4611      	mov	r1, r2
 8000af6:	2200      	movs	r2, #0
 8000af8:	602a      	str	r2, [r5, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	f7ff fe5c 	bl	80007b8 <_write>
 8000b00:	1c43      	adds	r3, r0, #1
 8000b02:	d102      	bne.n	8000b0a <_write_r+0x1e>
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	b103      	cbz	r3, 8000b0a <_write_r+0x1e>
 8000b08:	6023      	str	r3, [r4, #0]
 8000b0a:	bd38      	pop	{r3, r4, r5, pc}
 8000b0c:	200001c8 	.word	0x200001c8

08000b10 <__errno>:
 8000b10:	4b01      	ldr	r3, [pc, #4]	@ (8000b18 <__errno+0x8>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000000c 	.word	0x2000000c

08000b1c <__libc_init_array>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8000b54 <__libc_init_array+0x38>)
 8000b20:	4c0d      	ldr	r4, [pc, #52]	@ (8000b58 <__libc_init_array+0x3c>)
 8000b22:	1b64      	subs	r4, r4, r5
 8000b24:	10a4      	asrs	r4, r4, #2
 8000b26:	2600      	movs	r6, #0
 8000b28:	42a6      	cmp	r6, r4
 8000b2a:	d109      	bne.n	8000b40 <__libc_init_array+0x24>
 8000b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8000b5c <__libc_init_array+0x40>)
 8000b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8000b60 <__libc_init_array+0x44>)
 8000b30:	f000 fdb8 	bl	80016a4 <_init>
 8000b34:	1b64      	subs	r4, r4, r5
 8000b36:	10a4      	asrs	r4, r4, #2
 8000b38:	2600      	movs	r6, #0
 8000b3a:	42a6      	cmp	r6, r4
 8000b3c:	d105      	bne.n	8000b4a <__libc_init_array+0x2e>
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b44:	4798      	blx	r3
 8000b46:	3601      	adds	r6, #1
 8000b48:	e7ee      	b.n	8000b28 <__libc_init_array+0xc>
 8000b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4e:	4798      	blx	r3
 8000b50:	3601      	adds	r6, #1
 8000b52:	e7f2      	b.n	8000b3a <__libc_init_array+0x1e>
 8000b54:	080018ec 	.word	0x080018ec
 8000b58:	080018ec 	.word	0x080018ec
 8000b5c:	080018ec 	.word	0x080018ec
 8000b60:	080018f0 	.word	0x080018f0

08000b64 <__retarget_lock_init_recursive>:
 8000b64:	4770      	bx	lr

08000b66 <__retarget_lock_acquire_recursive>:
 8000b66:	4770      	bx	lr

08000b68 <__retarget_lock_release_recursive>:
 8000b68:	4770      	bx	lr
	...

08000b6c <_free_r>:
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	4605      	mov	r5, r0
 8000b70:	2900      	cmp	r1, #0
 8000b72:	d041      	beq.n	8000bf8 <_free_r+0x8c>
 8000b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b78:	1f0c      	subs	r4, r1, #4
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bfb8      	it	lt
 8000b7e:	18e4      	addlt	r4, r4, r3
 8000b80:	f000 f8e0 	bl	8000d44 <__malloc_lock>
 8000b84:	4a1d      	ldr	r2, [pc, #116]	@ (8000bfc <_free_r+0x90>)
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	b933      	cbnz	r3, 8000b98 <_free_r+0x2c>
 8000b8a:	6063      	str	r3, [r4, #4]
 8000b8c:	6014      	str	r4, [r2, #0]
 8000b8e:	4628      	mov	r0, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b8dc 	b.w	8000d50 <__malloc_unlock>
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	d908      	bls.n	8000bae <_free_r+0x42>
 8000b9c:	6820      	ldr	r0, [r4, #0]
 8000b9e:	1821      	adds	r1, r4, r0
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	bf01      	itttt	eq
 8000ba4:	6819      	ldreq	r1, [r3, #0]
 8000ba6:	685b      	ldreq	r3, [r3, #4]
 8000ba8:	1809      	addeq	r1, r1, r0
 8000baa:	6021      	streq	r1, [r4, #0]
 8000bac:	e7ed      	b.n	8000b8a <_free_r+0x1e>
 8000bae:	461a      	mov	r2, r3
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	b10b      	cbz	r3, 8000bb8 <_free_r+0x4c>
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	d9fa      	bls.n	8000bae <_free_r+0x42>
 8000bb8:	6811      	ldr	r1, [r2, #0]
 8000bba:	1850      	adds	r0, r2, r1
 8000bbc:	42a0      	cmp	r0, r4
 8000bbe:	d10b      	bne.n	8000bd8 <_free_r+0x6c>
 8000bc0:	6820      	ldr	r0, [r4, #0]
 8000bc2:	4401      	add	r1, r0
 8000bc4:	1850      	adds	r0, r2, r1
 8000bc6:	4283      	cmp	r3, r0
 8000bc8:	6011      	str	r1, [r2, #0]
 8000bca:	d1e0      	bne.n	8000b8e <_free_r+0x22>
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	6053      	str	r3, [r2, #4]
 8000bd2:	4408      	add	r0, r1
 8000bd4:	6010      	str	r0, [r2, #0]
 8000bd6:	e7da      	b.n	8000b8e <_free_r+0x22>
 8000bd8:	d902      	bls.n	8000be0 <_free_r+0x74>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	602b      	str	r3, [r5, #0]
 8000bde:	e7d6      	b.n	8000b8e <_free_r+0x22>
 8000be0:	6820      	ldr	r0, [r4, #0]
 8000be2:	1821      	adds	r1, r4, r0
 8000be4:	428b      	cmp	r3, r1
 8000be6:	bf04      	itt	eq
 8000be8:	6819      	ldreq	r1, [r3, #0]
 8000bea:	685b      	ldreq	r3, [r3, #4]
 8000bec:	6063      	str	r3, [r4, #4]
 8000bee:	bf04      	itt	eq
 8000bf0:	1809      	addeq	r1, r1, r0
 8000bf2:	6021      	streq	r1, [r4, #0]
 8000bf4:	6054      	str	r4, [r2, #4]
 8000bf6:	e7ca      	b.n	8000b8e <_free_r+0x22>
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001d4 	.word	0x200001d4

08000c00 <sbrk_aligned>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	4e0f      	ldr	r6, [pc, #60]	@ (8000c40 <sbrk_aligned+0x40>)
 8000c04:	460c      	mov	r4, r1
 8000c06:	6831      	ldr	r1, [r6, #0]
 8000c08:	4605      	mov	r5, r0
 8000c0a:	b911      	cbnz	r1, 8000c12 <sbrk_aligned+0x12>
 8000c0c:	f000 fcb6 	bl	800157c <_sbrk_r>
 8000c10:	6030      	str	r0, [r6, #0]
 8000c12:	4621      	mov	r1, r4
 8000c14:	4628      	mov	r0, r5
 8000c16:	f000 fcb1 	bl	800157c <_sbrk_r>
 8000c1a:	1c43      	adds	r3, r0, #1
 8000c1c:	d103      	bne.n	8000c26 <sbrk_aligned+0x26>
 8000c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8000c22:	4620      	mov	r0, r4
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	1cc4      	adds	r4, r0, #3
 8000c28:	f024 0403 	bic.w	r4, r4, #3
 8000c2c:	42a0      	cmp	r0, r4
 8000c2e:	d0f8      	beq.n	8000c22 <sbrk_aligned+0x22>
 8000c30:	1a21      	subs	r1, r4, r0
 8000c32:	4628      	mov	r0, r5
 8000c34:	f000 fca2 	bl	800157c <_sbrk_r>
 8000c38:	3001      	adds	r0, #1
 8000c3a:	d1f2      	bne.n	8000c22 <sbrk_aligned+0x22>
 8000c3c:	e7ef      	b.n	8000c1e <sbrk_aligned+0x1e>
 8000c3e:	bf00      	nop
 8000c40:	200001d0 	.word	0x200001d0

08000c44 <_malloc_r>:
 8000c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c48:	1ccd      	adds	r5, r1, #3
 8000c4a:	f025 0503 	bic.w	r5, r5, #3
 8000c4e:	3508      	adds	r5, #8
 8000c50:	2d0c      	cmp	r5, #12
 8000c52:	bf38      	it	cc
 8000c54:	250c      	movcc	r5, #12
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	4606      	mov	r6, r0
 8000c5a:	db01      	blt.n	8000c60 <_malloc_r+0x1c>
 8000c5c:	42a9      	cmp	r1, r5
 8000c5e:	d904      	bls.n	8000c6a <_malloc_r+0x26>
 8000c60:	230c      	movs	r3, #12
 8000c62:	6033      	str	r3, [r6, #0]
 8000c64:	2000      	movs	r0, #0
 8000c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d40 <_malloc_r+0xfc>
 8000c6e:	f000 f869 	bl	8000d44 <__malloc_lock>
 8000c72:	f8d8 3000 	ldr.w	r3, [r8]
 8000c76:	461c      	mov	r4, r3
 8000c78:	bb44      	cbnz	r4, 8000ccc <_malloc_r+0x88>
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f7ff ffbf 	bl	8000c00 <sbrk_aligned>
 8000c82:	1c43      	adds	r3, r0, #1
 8000c84:	4604      	mov	r4, r0
 8000c86:	d158      	bne.n	8000d3a <_malloc_r+0xf6>
 8000c88:	f8d8 4000 	ldr.w	r4, [r8]
 8000c8c:	4627      	mov	r7, r4
 8000c8e:	2f00      	cmp	r7, #0
 8000c90:	d143      	bne.n	8000d1a <_malloc_r+0xd6>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d04b      	beq.n	8000d2e <_malloc_r+0xea>
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	eb04 0903 	add.w	r9, r4, r3
 8000ca0:	f000 fc6c 	bl	800157c <_sbrk_r>
 8000ca4:	4581      	cmp	r9, r0
 8000ca6:	d142      	bne.n	8000d2e <_malloc_r+0xea>
 8000ca8:	6821      	ldr	r1, [r4, #0]
 8000caa:	1a6d      	subs	r5, r5, r1
 8000cac:	4629      	mov	r1, r5
 8000cae:	4630      	mov	r0, r6
 8000cb0:	f7ff ffa6 	bl	8000c00 <sbrk_aligned>
 8000cb4:	3001      	adds	r0, #1
 8000cb6:	d03a      	beq.n	8000d2e <_malloc_r+0xea>
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	442b      	add	r3, r5
 8000cbc:	6023      	str	r3, [r4, #0]
 8000cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	bb62      	cbnz	r2, 8000d20 <_malloc_r+0xdc>
 8000cc6:	f8c8 7000 	str.w	r7, [r8]
 8000cca:	e00f      	b.n	8000cec <_malloc_r+0xa8>
 8000ccc:	6822      	ldr	r2, [r4, #0]
 8000cce:	1b52      	subs	r2, r2, r5
 8000cd0:	d420      	bmi.n	8000d14 <_malloc_r+0xd0>
 8000cd2:	2a0b      	cmp	r2, #11
 8000cd4:	d917      	bls.n	8000d06 <_malloc_r+0xc2>
 8000cd6:	1961      	adds	r1, r4, r5
 8000cd8:	42a3      	cmp	r3, r4
 8000cda:	6025      	str	r5, [r4, #0]
 8000cdc:	bf18      	it	ne
 8000cde:	6059      	strne	r1, [r3, #4]
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	bf08      	it	eq
 8000ce4:	f8c8 1000 	streq.w	r1, [r8]
 8000ce8:	5162      	str	r2, [r4, r5]
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	4630      	mov	r0, r6
 8000cee:	f000 f82f 	bl	8000d50 <__malloc_unlock>
 8000cf2:	f104 000b 	add.w	r0, r4, #11
 8000cf6:	1d23      	adds	r3, r4, #4
 8000cf8:	f020 0007 	bic.w	r0, r0, #7
 8000cfc:	1ac2      	subs	r2, r0, r3
 8000cfe:	bf1c      	itt	ne
 8000d00:	1a1b      	subne	r3, r3, r0
 8000d02:	50a3      	strne	r3, [r4, r2]
 8000d04:	e7af      	b.n	8000c66 <_malloc_r+0x22>
 8000d06:	6862      	ldr	r2, [r4, #4]
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	bf0c      	ite	eq
 8000d0c:	f8c8 2000 	streq.w	r2, [r8]
 8000d10:	605a      	strne	r2, [r3, #4]
 8000d12:	e7eb      	b.n	8000cec <_malloc_r+0xa8>
 8000d14:	4623      	mov	r3, r4
 8000d16:	6864      	ldr	r4, [r4, #4]
 8000d18:	e7ae      	b.n	8000c78 <_malloc_r+0x34>
 8000d1a:	463c      	mov	r4, r7
 8000d1c:	687f      	ldr	r7, [r7, #4]
 8000d1e:	e7b6      	b.n	8000c8e <_malloc_r+0x4a>
 8000d20:	461a      	mov	r2, r3
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d1fb      	bne.n	8000d20 <_malloc_r+0xdc>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	6053      	str	r3, [r2, #4]
 8000d2c:	e7de      	b.n	8000cec <_malloc_r+0xa8>
 8000d2e:	230c      	movs	r3, #12
 8000d30:	6033      	str	r3, [r6, #0]
 8000d32:	4630      	mov	r0, r6
 8000d34:	f000 f80c 	bl	8000d50 <__malloc_unlock>
 8000d38:	e794      	b.n	8000c64 <_malloc_r+0x20>
 8000d3a:	6005      	str	r5, [r0, #0]
 8000d3c:	e7d6      	b.n	8000cec <_malloc_r+0xa8>
 8000d3e:	bf00      	nop
 8000d40:	200001d4 	.word	0x200001d4

08000d44 <__malloc_lock>:
 8000d44:	4801      	ldr	r0, [pc, #4]	@ (8000d4c <__malloc_lock+0x8>)
 8000d46:	f7ff bf0e 	b.w	8000b66 <__retarget_lock_acquire_recursive>
 8000d4a:	bf00      	nop
 8000d4c:	200001cc 	.word	0x200001cc

08000d50 <__malloc_unlock>:
 8000d50:	4801      	ldr	r0, [pc, #4]	@ (8000d58 <__malloc_unlock+0x8>)
 8000d52:	f7ff bf09 	b.w	8000b68 <__retarget_lock_release_recursive>
 8000d56:	bf00      	nop
 8000d58:	200001cc 	.word	0x200001cc

08000d5c <__sfputc_r>:
 8000d5c:	6893      	ldr	r3, [r2, #8]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	b410      	push	{r4}
 8000d64:	6093      	str	r3, [r2, #8]
 8000d66:	da08      	bge.n	8000d7a <__sfputc_r+0x1e>
 8000d68:	6994      	ldr	r4, [r2, #24]
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	db01      	blt.n	8000d72 <__sfputc_r+0x16>
 8000d6e:	290a      	cmp	r1, #10
 8000d70:	d103      	bne.n	8000d7a <__sfputc_r+0x1e>
 8000d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d76:	f000 bb6d 	b.w	8001454 <__swbuf_r>
 8000d7a:	6813      	ldr	r3, [r2, #0]
 8000d7c:	1c58      	adds	r0, r3, #1
 8000d7e:	6010      	str	r0, [r2, #0]
 8000d80:	7019      	strb	r1, [r3, #0]
 8000d82:	4608      	mov	r0, r1
 8000d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <__sfputs_r>:
 8000d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	4614      	mov	r4, r2
 8000d92:	18d5      	adds	r5, r2, r3
 8000d94:	42ac      	cmp	r4, r5
 8000d96:	d101      	bne.n	8000d9c <__sfputs_r+0x12>
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e007      	b.n	8000dac <__sfputs_r+0x22>
 8000d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000da0:	463a      	mov	r2, r7
 8000da2:	4630      	mov	r0, r6
 8000da4:	f7ff ffda 	bl	8000d5c <__sfputc_r>
 8000da8:	1c43      	adds	r3, r0, #1
 8000daa:	d1f3      	bne.n	8000d94 <__sfputs_r+0xa>
 8000dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000db0 <_vfiprintf_r>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	460d      	mov	r5, r1
 8000db6:	b09d      	sub	sp, #116	@ 0x74
 8000db8:	4614      	mov	r4, r2
 8000dba:	4698      	mov	r8, r3
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	b118      	cbz	r0, 8000dc8 <_vfiprintf_r+0x18>
 8000dc0:	6a03      	ldr	r3, [r0, #32]
 8000dc2:	b90b      	cbnz	r3, 8000dc8 <_vfiprintf_r+0x18>
 8000dc4:	f7ff fdca 	bl	800095c <__sinit>
 8000dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dca:	07d9      	lsls	r1, r3, #31
 8000dcc:	d405      	bmi.n	8000dda <_vfiprintf_r+0x2a>
 8000dce:	89ab      	ldrh	r3, [r5, #12]
 8000dd0:	059a      	lsls	r2, r3, #22
 8000dd2:	d402      	bmi.n	8000dda <_vfiprintf_r+0x2a>
 8000dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dd6:	f7ff fec6 	bl	8000b66 <__retarget_lock_acquire_recursive>
 8000dda:	89ab      	ldrh	r3, [r5, #12]
 8000ddc:	071b      	lsls	r3, r3, #28
 8000dde:	d501      	bpl.n	8000de4 <_vfiprintf_r+0x34>
 8000de0:	692b      	ldr	r3, [r5, #16]
 8000de2:	b99b      	cbnz	r3, 8000e0c <_vfiprintf_r+0x5c>
 8000de4:	4629      	mov	r1, r5
 8000de6:	4630      	mov	r0, r6
 8000de8:	f000 fb72 	bl	80014d0 <__swsetup_r>
 8000dec:	b170      	cbz	r0, 8000e0c <_vfiprintf_r+0x5c>
 8000dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000df0:	07dc      	lsls	r4, r3, #31
 8000df2:	d504      	bpl.n	8000dfe <_vfiprintf_r+0x4e>
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	b01d      	add	sp, #116	@ 0x74
 8000dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dfe:	89ab      	ldrh	r3, [r5, #12]
 8000e00:	0598      	lsls	r0, r3, #22
 8000e02:	d4f7      	bmi.n	8000df4 <_vfiprintf_r+0x44>
 8000e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e06:	f7ff feaf 	bl	8000b68 <__retarget_lock_release_recursive>
 8000e0a:	e7f3      	b.n	8000df4 <_vfiprintf_r+0x44>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e10:	2320      	movs	r3, #32
 8000e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e1a:	2330      	movs	r3, #48	@ 0x30
 8000e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000fcc <_vfiprintf_r+0x21c>
 8000e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e24:	f04f 0901 	mov.w	r9, #1
 8000e28:	4623      	mov	r3, r4
 8000e2a:	469a      	mov	sl, r3
 8000e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e30:	b10a      	cbz	r2, 8000e36 <_vfiprintf_r+0x86>
 8000e32:	2a25      	cmp	r2, #37	@ 0x25
 8000e34:	d1f9      	bne.n	8000e2a <_vfiprintf_r+0x7a>
 8000e36:	ebba 0b04 	subs.w	fp, sl, r4
 8000e3a:	d00b      	beq.n	8000e54 <_vfiprintf_r+0xa4>
 8000e3c:	465b      	mov	r3, fp
 8000e3e:	4622      	mov	r2, r4
 8000e40:	4629      	mov	r1, r5
 8000e42:	4630      	mov	r0, r6
 8000e44:	f7ff ffa1 	bl	8000d8a <__sfputs_r>
 8000e48:	3001      	adds	r0, #1
 8000e4a:	f000 80a7 	beq.w	8000f9c <_vfiprintf_r+0x1ec>
 8000e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e50:	445a      	add	r2, fp
 8000e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e54:	f89a 3000 	ldrb.w	r3, [sl]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 809f 	beq.w	8000f9c <_vfiprintf_r+0x1ec>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e68:	f10a 0a01 	add.w	sl, sl, #1
 8000e6c:	9304      	str	r3, [sp, #16]
 8000e6e:	9307      	str	r3, [sp, #28]
 8000e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e76:	4654      	mov	r4, sl
 8000e78:	2205      	movs	r2, #5
 8000e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e7e:	4853      	ldr	r0, [pc, #332]	@ (8000fcc <_vfiprintf_r+0x21c>)
 8000e80:	f7ff f9ae 	bl	80001e0 <memchr>
 8000e84:	9a04      	ldr	r2, [sp, #16]
 8000e86:	b9d8      	cbnz	r0, 8000ec0 <_vfiprintf_r+0x110>
 8000e88:	06d1      	lsls	r1, r2, #27
 8000e8a:	bf44      	itt	mi
 8000e8c:	2320      	movmi	r3, #32
 8000e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e92:	0713      	lsls	r3, r2, #28
 8000e94:	bf44      	itt	mi
 8000e96:	232b      	movmi	r3, #43	@ 0x2b
 8000e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8000ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ea2:	d015      	beq.n	8000ed0 <_vfiprintf_r+0x120>
 8000ea4:	9a07      	ldr	r2, [sp, #28]
 8000ea6:	4654      	mov	r4, sl
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f04f 0c0a 	mov.w	ip, #10
 8000eae:	4621      	mov	r1, r4
 8000eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000eb4:	3b30      	subs	r3, #48	@ 0x30
 8000eb6:	2b09      	cmp	r3, #9
 8000eb8:	d94b      	bls.n	8000f52 <_vfiprintf_r+0x1a2>
 8000eba:	b1b0      	cbz	r0, 8000eea <_vfiprintf_r+0x13a>
 8000ebc:	9207      	str	r2, [sp, #28]
 8000ebe:	e014      	b.n	8000eea <_vfiprintf_r+0x13a>
 8000ec0:	eba0 0308 	sub.w	r3, r0, r8
 8000ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	9304      	str	r3, [sp, #16]
 8000ecc:	46a2      	mov	sl, r4
 8000ece:	e7d2      	b.n	8000e76 <_vfiprintf_r+0xc6>
 8000ed0:	9b03      	ldr	r3, [sp, #12]
 8000ed2:	1d19      	adds	r1, r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	9103      	str	r1, [sp, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bfbb      	ittet	lt
 8000edc:	425b      	neglt	r3, r3
 8000ede:	f042 0202 	orrlt.w	r2, r2, #2
 8000ee2:	9307      	strge	r3, [sp, #28]
 8000ee4:	9307      	strlt	r3, [sp, #28]
 8000ee6:	bfb8      	it	lt
 8000ee8:	9204      	strlt	r2, [sp, #16]
 8000eea:	7823      	ldrb	r3, [r4, #0]
 8000eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8000eee:	d10a      	bne.n	8000f06 <_vfiprintf_r+0x156>
 8000ef0:	7863      	ldrb	r3, [r4, #1]
 8000ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ef4:	d132      	bne.n	8000f5c <_vfiprintf_r+0x1ac>
 8000ef6:	9b03      	ldr	r3, [sp, #12]
 8000ef8:	1d1a      	adds	r2, r3, #4
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	9203      	str	r2, [sp, #12]
 8000efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f02:	3402      	adds	r4, #2
 8000f04:	9305      	str	r3, [sp, #20]
 8000f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000fdc <_vfiprintf_r+0x22c>
 8000f0a:	7821      	ldrb	r1, [r4, #0]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4650      	mov	r0, sl
 8000f10:	f7ff f966 	bl	80001e0 <memchr>
 8000f14:	b138      	cbz	r0, 8000f26 <_vfiprintf_r+0x176>
 8000f16:	9b04      	ldr	r3, [sp, #16]
 8000f18:	eba0 000a 	sub.w	r0, r0, sl
 8000f1c:	2240      	movs	r2, #64	@ 0x40
 8000f1e:	4082      	lsls	r2, r0
 8000f20:	4313      	orrs	r3, r2
 8000f22:	3401      	adds	r4, #1
 8000f24:	9304      	str	r3, [sp, #16]
 8000f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f2a:	4829      	ldr	r0, [pc, #164]	@ (8000fd0 <_vfiprintf_r+0x220>)
 8000f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f30:	2206      	movs	r2, #6
 8000f32:	f7ff f955 	bl	80001e0 <memchr>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d03f      	beq.n	8000fba <_vfiprintf_r+0x20a>
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <_vfiprintf_r+0x224>)
 8000f3c:	bb1b      	cbnz	r3, 8000f86 <_vfiprintf_r+0x1d6>
 8000f3e:	9b03      	ldr	r3, [sp, #12]
 8000f40:	3307      	adds	r3, #7
 8000f42:	f023 0307 	bic.w	r3, r3, #7
 8000f46:	3308      	adds	r3, #8
 8000f48:	9303      	str	r3, [sp, #12]
 8000f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f4c:	443b      	add	r3, r7
 8000f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f50:	e76a      	b.n	8000e28 <_vfiprintf_r+0x78>
 8000f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f56:	460c      	mov	r4, r1
 8000f58:	2001      	movs	r0, #1
 8000f5a:	e7a8      	b.n	8000eae <_vfiprintf_r+0xfe>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	3401      	adds	r4, #1
 8000f60:	9305      	str	r3, [sp, #20]
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 0c0a 	mov.w	ip, #10
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f6e:	3a30      	subs	r2, #48	@ 0x30
 8000f70:	2a09      	cmp	r2, #9
 8000f72:	d903      	bls.n	8000f7c <_vfiprintf_r+0x1cc>
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0c6      	beq.n	8000f06 <_vfiprintf_r+0x156>
 8000f78:	9105      	str	r1, [sp, #20]
 8000f7a:	e7c4      	b.n	8000f06 <_vfiprintf_r+0x156>
 8000f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f80:	4604      	mov	r4, r0
 8000f82:	2301      	movs	r3, #1
 8000f84:	e7f0      	b.n	8000f68 <_vfiprintf_r+0x1b8>
 8000f86:	ab03      	add	r3, sp, #12
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	462a      	mov	r2, r5
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <_vfiprintf_r+0x228>)
 8000f8e:	a904      	add	r1, sp, #16
 8000f90:	4630      	mov	r0, r6
 8000f92:	f3af 8000 	nop.w
 8000f96:	4607      	mov	r7, r0
 8000f98:	1c78      	adds	r0, r7, #1
 8000f9a:	d1d6      	bne.n	8000f4a <_vfiprintf_r+0x19a>
 8000f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f9e:	07d9      	lsls	r1, r3, #31
 8000fa0:	d405      	bmi.n	8000fae <_vfiprintf_r+0x1fe>
 8000fa2:	89ab      	ldrh	r3, [r5, #12]
 8000fa4:	059a      	lsls	r2, r3, #22
 8000fa6:	d402      	bmi.n	8000fae <_vfiprintf_r+0x1fe>
 8000fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000faa:	f7ff fddd 	bl	8000b68 <__retarget_lock_release_recursive>
 8000fae:	89ab      	ldrh	r3, [r5, #12]
 8000fb0:	065b      	lsls	r3, r3, #25
 8000fb2:	f53f af1f 	bmi.w	8000df4 <_vfiprintf_r+0x44>
 8000fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000fb8:	e71e      	b.n	8000df8 <_vfiprintf_r+0x48>
 8000fba:	ab03      	add	r3, sp, #12
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <_vfiprintf_r+0x228>)
 8000fc2:	a904      	add	r1, sp, #16
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	f000 f879 	bl	80010bc <_printf_i>
 8000fca:	e7e4      	b.n	8000f96 <_vfiprintf_r+0x1e6>
 8000fcc:	080018b1 	.word	0x080018b1
 8000fd0:	080018bb 	.word	0x080018bb
 8000fd4:	00000000 	.word	0x00000000
 8000fd8:	08000d8b 	.word	0x08000d8b
 8000fdc:	080018b7 	.word	0x080018b7

08000fe0 <_printf_common>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	4616      	mov	r6, r2
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	688a      	ldr	r2, [r1, #8]
 8000fea:	690b      	ldr	r3, [r1, #16]
 8000fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	bfb8      	it	lt
 8000ff4:	4613      	movlt	r3, r2
 8000ff6:	6033      	str	r3, [r6, #0]
 8000ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ffc:	4607      	mov	r7, r0
 8000ffe:	460c      	mov	r4, r1
 8001000:	b10a      	cbz	r2, 8001006 <_printf_common+0x26>
 8001002:	3301      	adds	r3, #1
 8001004:	6033      	str	r3, [r6, #0]
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	0699      	lsls	r1, r3, #26
 800100a:	bf42      	ittt	mi
 800100c:	6833      	ldrmi	r3, [r6, #0]
 800100e:	3302      	addmi	r3, #2
 8001010:	6033      	strmi	r3, [r6, #0]
 8001012:	6825      	ldr	r5, [r4, #0]
 8001014:	f015 0506 	ands.w	r5, r5, #6
 8001018:	d106      	bne.n	8001028 <_printf_common+0x48>
 800101a:	f104 0a19 	add.w	sl, r4, #25
 800101e:	68e3      	ldr	r3, [r4, #12]
 8001020:	6832      	ldr	r2, [r6, #0]
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	42ab      	cmp	r3, r5
 8001026:	dc26      	bgt.n	8001076 <_printf_common+0x96>
 8001028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	3b00      	subs	r3, #0
 8001030:	bf18      	it	ne
 8001032:	2301      	movne	r3, #1
 8001034:	0692      	lsls	r2, r2, #26
 8001036:	d42b      	bmi.n	8001090 <_printf_common+0xb0>
 8001038:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800103c:	4641      	mov	r1, r8
 800103e:	4638      	mov	r0, r7
 8001040:	47c8      	blx	r9
 8001042:	3001      	adds	r0, #1
 8001044:	d01e      	beq.n	8001084 <_printf_common+0xa4>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	6922      	ldr	r2, [r4, #16]
 800104a:	f003 0306 	and.w	r3, r3, #6
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf02      	ittt	eq
 8001052:	68e5      	ldreq	r5, [r4, #12]
 8001054:	6833      	ldreq	r3, [r6, #0]
 8001056:	1aed      	subeq	r5, r5, r3
 8001058:	68a3      	ldr	r3, [r4, #8]
 800105a:	bf0c      	ite	eq
 800105c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001060:	2500      	movne	r5, #0
 8001062:	4293      	cmp	r3, r2
 8001064:	bfc4      	itt	gt
 8001066:	1a9b      	subgt	r3, r3, r2
 8001068:	18ed      	addgt	r5, r5, r3
 800106a:	2600      	movs	r6, #0
 800106c:	341a      	adds	r4, #26
 800106e:	42b5      	cmp	r5, r6
 8001070:	d11a      	bne.n	80010a8 <_printf_common+0xc8>
 8001072:	2000      	movs	r0, #0
 8001074:	e008      	b.n	8001088 <_printf_common+0xa8>
 8001076:	2301      	movs	r3, #1
 8001078:	4652      	mov	r2, sl
 800107a:	4641      	mov	r1, r8
 800107c:	4638      	mov	r0, r7
 800107e:	47c8      	blx	r9
 8001080:	3001      	adds	r0, #1
 8001082:	d103      	bne.n	800108c <_printf_common+0xac>
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108c:	3501      	adds	r5, #1
 800108e:	e7c6      	b.n	800101e <_printf_common+0x3e>
 8001090:	18e1      	adds	r1, r4, r3
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	2030      	movs	r0, #48	@ 0x30
 8001096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800109a:	4422      	add	r2, r4
 800109c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80010a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80010a4:	3302      	adds	r3, #2
 80010a6:	e7c7      	b.n	8001038 <_printf_common+0x58>
 80010a8:	2301      	movs	r3, #1
 80010aa:	4622      	mov	r2, r4
 80010ac:	4641      	mov	r1, r8
 80010ae:	4638      	mov	r0, r7
 80010b0:	47c8      	blx	r9
 80010b2:	3001      	adds	r0, #1
 80010b4:	d0e6      	beq.n	8001084 <_printf_common+0xa4>
 80010b6:	3601      	adds	r6, #1
 80010b8:	e7d9      	b.n	800106e <_printf_common+0x8e>
	...

080010bc <_printf_i>:
 80010bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010c0:	7e0f      	ldrb	r7, [r1, #24]
 80010c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80010c4:	2f78      	cmp	r7, #120	@ 0x78
 80010c6:	4691      	mov	r9, r2
 80010c8:	4680      	mov	r8, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	469a      	mov	sl, r3
 80010ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80010d2:	d807      	bhi.n	80010e4 <_printf_i+0x28>
 80010d4:	2f62      	cmp	r7, #98	@ 0x62
 80010d6:	d80a      	bhi.n	80010ee <_printf_i+0x32>
 80010d8:	2f00      	cmp	r7, #0
 80010da:	f000 80d2 	beq.w	8001282 <_printf_i+0x1c6>
 80010de:	2f58      	cmp	r7, #88	@ 0x58
 80010e0:	f000 80b9 	beq.w	8001256 <_printf_i+0x19a>
 80010e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80010ec:	e03a      	b.n	8001164 <_printf_i+0xa8>
 80010ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80010f2:	2b15      	cmp	r3, #21
 80010f4:	d8f6      	bhi.n	80010e4 <_printf_i+0x28>
 80010f6:	a101      	add	r1, pc, #4	@ (adr r1, 80010fc <_printf_i+0x40>)
 80010f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010fc:	08001155 	.word	0x08001155
 8001100:	08001169 	.word	0x08001169
 8001104:	080010e5 	.word	0x080010e5
 8001108:	080010e5 	.word	0x080010e5
 800110c:	080010e5 	.word	0x080010e5
 8001110:	080010e5 	.word	0x080010e5
 8001114:	08001169 	.word	0x08001169
 8001118:	080010e5 	.word	0x080010e5
 800111c:	080010e5 	.word	0x080010e5
 8001120:	080010e5 	.word	0x080010e5
 8001124:	080010e5 	.word	0x080010e5
 8001128:	08001269 	.word	0x08001269
 800112c:	08001193 	.word	0x08001193
 8001130:	08001223 	.word	0x08001223
 8001134:	080010e5 	.word	0x080010e5
 8001138:	080010e5 	.word	0x080010e5
 800113c:	0800128b 	.word	0x0800128b
 8001140:	080010e5 	.word	0x080010e5
 8001144:	08001193 	.word	0x08001193
 8001148:	080010e5 	.word	0x080010e5
 800114c:	080010e5 	.word	0x080010e5
 8001150:	0800122b 	.word	0x0800122b
 8001154:	6833      	ldr	r3, [r6, #0]
 8001156:	1d1a      	adds	r2, r3, #4
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6032      	str	r2, [r6, #0]
 800115c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001164:	2301      	movs	r3, #1
 8001166:	e09d      	b.n	80012a4 <_printf_i+0x1e8>
 8001168:	6833      	ldr	r3, [r6, #0]
 800116a:	6820      	ldr	r0, [r4, #0]
 800116c:	1d19      	adds	r1, r3, #4
 800116e:	6031      	str	r1, [r6, #0]
 8001170:	0606      	lsls	r6, r0, #24
 8001172:	d501      	bpl.n	8001178 <_printf_i+0xbc>
 8001174:	681d      	ldr	r5, [r3, #0]
 8001176:	e003      	b.n	8001180 <_printf_i+0xc4>
 8001178:	0645      	lsls	r5, r0, #25
 800117a:	d5fb      	bpl.n	8001174 <_printf_i+0xb8>
 800117c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001180:	2d00      	cmp	r5, #0
 8001182:	da03      	bge.n	800118c <_printf_i+0xd0>
 8001184:	232d      	movs	r3, #45	@ 0x2d
 8001186:	426d      	negs	r5, r5
 8001188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800118c:	4859      	ldr	r0, [pc, #356]	@ (80012f4 <_printf_i+0x238>)
 800118e:	230a      	movs	r3, #10
 8001190:	e011      	b.n	80011b6 <_printf_i+0xfa>
 8001192:	6821      	ldr	r1, [r4, #0]
 8001194:	6833      	ldr	r3, [r6, #0]
 8001196:	0608      	lsls	r0, r1, #24
 8001198:	f853 5b04 	ldr.w	r5, [r3], #4
 800119c:	d402      	bmi.n	80011a4 <_printf_i+0xe8>
 800119e:	0649      	lsls	r1, r1, #25
 80011a0:	bf48      	it	mi
 80011a2:	b2ad      	uxthmi	r5, r5
 80011a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80011a6:	4853      	ldr	r0, [pc, #332]	@ (80012f4 <_printf_i+0x238>)
 80011a8:	6033      	str	r3, [r6, #0]
 80011aa:	bf14      	ite	ne
 80011ac:	230a      	movne	r3, #10
 80011ae:	2308      	moveq	r3, #8
 80011b0:	2100      	movs	r1, #0
 80011b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80011b6:	6866      	ldr	r6, [r4, #4]
 80011b8:	60a6      	str	r6, [r4, #8]
 80011ba:	2e00      	cmp	r6, #0
 80011bc:	bfa2      	ittt	ge
 80011be:	6821      	ldrge	r1, [r4, #0]
 80011c0:	f021 0104 	bicge.w	r1, r1, #4
 80011c4:	6021      	strge	r1, [r4, #0]
 80011c6:	b90d      	cbnz	r5, 80011cc <_printf_i+0x110>
 80011c8:	2e00      	cmp	r6, #0
 80011ca:	d04b      	beq.n	8001264 <_printf_i+0x1a8>
 80011cc:	4616      	mov	r6, r2
 80011ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80011d2:	fb03 5711 	mls	r7, r3, r1, r5
 80011d6:	5dc7      	ldrb	r7, [r0, r7]
 80011d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80011dc:	462f      	mov	r7, r5
 80011de:	42bb      	cmp	r3, r7
 80011e0:	460d      	mov	r5, r1
 80011e2:	d9f4      	bls.n	80011ce <_printf_i+0x112>
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d10b      	bne.n	8001200 <_printf_i+0x144>
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	07df      	lsls	r7, r3, #31
 80011ec:	d508      	bpl.n	8001200 <_printf_i+0x144>
 80011ee:	6923      	ldr	r3, [r4, #16]
 80011f0:	6861      	ldr	r1, [r4, #4]
 80011f2:	4299      	cmp	r1, r3
 80011f4:	bfde      	ittt	le
 80011f6:	2330      	movle	r3, #48	@ 0x30
 80011f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80011fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001200:	1b92      	subs	r2, r2, r6
 8001202:	6122      	str	r2, [r4, #16]
 8001204:	f8cd a000 	str.w	sl, [sp]
 8001208:	464b      	mov	r3, r9
 800120a:	aa03      	add	r2, sp, #12
 800120c:	4621      	mov	r1, r4
 800120e:	4640      	mov	r0, r8
 8001210:	f7ff fee6 	bl	8000fe0 <_printf_common>
 8001214:	3001      	adds	r0, #1
 8001216:	d14a      	bne.n	80012ae <_printf_i+0x1f2>
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	b004      	add	sp, #16
 800121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	4833      	ldr	r0, [pc, #204]	@ (80012f8 <_printf_i+0x23c>)
 800122c:	2778      	movs	r7, #120	@ 0x78
 800122e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	6831      	ldr	r1, [r6, #0]
 8001236:	061f      	lsls	r7, r3, #24
 8001238:	f851 5b04 	ldr.w	r5, [r1], #4
 800123c:	d402      	bmi.n	8001244 <_printf_i+0x188>
 800123e:	065f      	lsls	r7, r3, #25
 8001240:	bf48      	it	mi
 8001242:	b2ad      	uxthmi	r5, r5
 8001244:	6031      	str	r1, [r6, #0]
 8001246:	07d9      	lsls	r1, r3, #31
 8001248:	bf44      	itt	mi
 800124a:	f043 0320 	orrmi.w	r3, r3, #32
 800124e:	6023      	strmi	r3, [r4, #0]
 8001250:	b11d      	cbz	r5, 800125a <_printf_i+0x19e>
 8001252:	2310      	movs	r3, #16
 8001254:	e7ac      	b.n	80011b0 <_printf_i+0xf4>
 8001256:	4827      	ldr	r0, [pc, #156]	@ (80012f4 <_printf_i+0x238>)
 8001258:	e7e9      	b.n	800122e <_printf_i+0x172>
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	f023 0320 	bic.w	r3, r3, #32
 8001260:	6023      	str	r3, [r4, #0]
 8001262:	e7f6      	b.n	8001252 <_printf_i+0x196>
 8001264:	4616      	mov	r6, r2
 8001266:	e7bd      	b.n	80011e4 <_printf_i+0x128>
 8001268:	6833      	ldr	r3, [r6, #0]
 800126a:	6825      	ldr	r5, [r4, #0]
 800126c:	6961      	ldr	r1, [r4, #20]
 800126e:	1d18      	adds	r0, r3, #4
 8001270:	6030      	str	r0, [r6, #0]
 8001272:	062e      	lsls	r6, r5, #24
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	d501      	bpl.n	800127c <_printf_i+0x1c0>
 8001278:	6019      	str	r1, [r3, #0]
 800127a:	e002      	b.n	8001282 <_printf_i+0x1c6>
 800127c:	0668      	lsls	r0, r5, #25
 800127e:	d5fb      	bpl.n	8001278 <_printf_i+0x1bc>
 8001280:	8019      	strh	r1, [r3, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	6123      	str	r3, [r4, #16]
 8001286:	4616      	mov	r6, r2
 8001288:	e7bc      	b.n	8001204 <_printf_i+0x148>
 800128a:	6833      	ldr	r3, [r6, #0]
 800128c:	1d1a      	adds	r2, r3, #4
 800128e:	6032      	str	r2, [r6, #0]
 8001290:	681e      	ldr	r6, [r3, #0]
 8001292:	6862      	ldr	r2, [r4, #4]
 8001294:	2100      	movs	r1, #0
 8001296:	4630      	mov	r0, r6
 8001298:	f7fe ffa2 	bl	80001e0 <memchr>
 800129c:	b108      	cbz	r0, 80012a2 <_printf_i+0x1e6>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	6060      	str	r0, [r4, #4]
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	6123      	str	r3, [r4, #16]
 80012a6:	2300      	movs	r3, #0
 80012a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012ac:	e7aa      	b.n	8001204 <_printf_i+0x148>
 80012ae:	6923      	ldr	r3, [r4, #16]
 80012b0:	4632      	mov	r2, r6
 80012b2:	4649      	mov	r1, r9
 80012b4:	4640      	mov	r0, r8
 80012b6:	47d0      	blx	sl
 80012b8:	3001      	adds	r0, #1
 80012ba:	d0ad      	beq.n	8001218 <_printf_i+0x15c>
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	079b      	lsls	r3, r3, #30
 80012c0:	d413      	bmi.n	80012ea <_printf_i+0x22e>
 80012c2:	68e0      	ldr	r0, [r4, #12]
 80012c4:	9b03      	ldr	r3, [sp, #12]
 80012c6:	4298      	cmp	r0, r3
 80012c8:	bfb8      	it	lt
 80012ca:	4618      	movlt	r0, r3
 80012cc:	e7a6      	b.n	800121c <_printf_i+0x160>
 80012ce:	2301      	movs	r3, #1
 80012d0:	4632      	mov	r2, r6
 80012d2:	4649      	mov	r1, r9
 80012d4:	4640      	mov	r0, r8
 80012d6:	47d0      	blx	sl
 80012d8:	3001      	adds	r0, #1
 80012da:	d09d      	beq.n	8001218 <_printf_i+0x15c>
 80012dc:	3501      	adds	r5, #1
 80012de:	68e3      	ldr	r3, [r4, #12]
 80012e0:	9903      	ldr	r1, [sp, #12]
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	42ab      	cmp	r3, r5
 80012e6:	dcf2      	bgt.n	80012ce <_printf_i+0x212>
 80012e8:	e7eb      	b.n	80012c2 <_printf_i+0x206>
 80012ea:	2500      	movs	r5, #0
 80012ec:	f104 0619 	add.w	r6, r4, #25
 80012f0:	e7f5      	b.n	80012de <_printf_i+0x222>
 80012f2:	bf00      	nop
 80012f4:	080018c2 	.word	0x080018c2
 80012f8:	080018d3 	.word	0x080018d3

080012fc <__sflush_r>:
 80012fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001304:	0716      	lsls	r6, r2, #28
 8001306:	4605      	mov	r5, r0
 8001308:	460c      	mov	r4, r1
 800130a:	d454      	bmi.n	80013b6 <__sflush_r+0xba>
 800130c:	684b      	ldr	r3, [r1, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	dc02      	bgt.n	8001318 <__sflush_r+0x1c>
 8001312:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd48      	ble.n	80013aa <__sflush_r+0xae>
 8001318:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800131a:	2e00      	cmp	r6, #0
 800131c:	d045      	beq.n	80013aa <__sflush_r+0xae>
 800131e:	2300      	movs	r3, #0
 8001320:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001324:	682f      	ldr	r7, [r5, #0]
 8001326:	6a21      	ldr	r1, [r4, #32]
 8001328:	602b      	str	r3, [r5, #0]
 800132a:	d030      	beq.n	800138e <__sflush_r+0x92>
 800132c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	0759      	lsls	r1, r3, #29
 8001332:	d505      	bpl.n	8001340 <__sflush_r+0x44>
 8001334:	6863      	ldr	r3, [r4, #4]
 8001336:	1ad2      	subs	r2, r2, r3
 8001338:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800133a:	b10b      	cbz	r3, 8001340 <__sflush_r+0x44>
 800133c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800133e:	1ad2      	subs	r2, r2, r3
 8001340:	2300      	movs	r3, #0
 8001342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001344:	6a21      	ldr	r1, [r4, #32]
 8001346:	4628      	mov	r0, r5
 8001348:	47b0      	blx	r6
 800134a:	1c43      	adds	r3, r0, #1
 800134c:	89a3      	ldrh	r3, [r4, #12]
 800134e:	d106      	bne.n	800135e <__sflush_r+0x62>
 8001350:	6829      	ldr	r1, [r5, #0]
 8001352:	291d      	cmp	r1, #29
 8001354:	d82b      	bhi.n	80013ae <__sflush_r+0xb2>
 8001356:	4a2a      	ldr	r2, [pc, #168]	@ (8001400 <__sflush_r+0x104>)
 8001358:	410a      	asrs	r2, r1
 800135a:	07d6      	lsls	r6, r2, #31
 800135c:	d427      	bmi.n	80013ae <__sflush_r+0xb2>
 800135e:	2200      	movs	r2, #0
 8001360:	6062      	str	r2, [r4, #4]
 8001362:	04d9      	lsls	r1, r3, #19
 8001364:	6922      	ldr	r2, [r4, #16]
 8001366:	6022      	str	r2, [r4, #0]
 8001368:	d504      	bpl.n	8001374 <__sflush_r+0x78>
 800136a:	1c42      	adds	r2, r0, #1
 800136c:	d101      	bne.n	8001372 <__sflush_r+0x76>
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	b903      	cbnz	r3, 8001374 <__sflush_r+0x78>
 8001372:	6560      	str	r0, [r4, #84]	@ 0x54
 8001374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001376:	602f      	str	r7, [r5, #0]
 8001378:	b1b9      	cbz	r1, 80013aa <__sflush_r+0xae>
 800137a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800137e:	4299      	cmp	r1, r3
 8001380:	d002      	beq.n	8001388 <__sflush_r+0x8c>
 8001382:	4628      	mov	r0, r5
 8001384:	f7ff fbf2 	bl	8000b6c <_free_r>
 8001388:	2300      	movs	r3, #0
 800138a:	6363      	str	r3, [r4, #52]	@ 0x34
 800138c:	e00d      	b.n	80013aa <__sflush_r+0xae>
 800138e:	2301      	movs	r3, #1
 8001390:	4628      	mov	r0, r5
 8001392:	47b0      	blx	r6
 8001394:	4602      	mov	r2, r0
 8001396:	1c50      	adds	r0, r2, #1
 8001398:	d1c9      	bne.n	800132e <__sflush_r+0x32>
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0c6      	beq.n	800132e <__sflush_r+0x32>
 80013a0:	2b1d      	cmp	r3, #29
 80013a2:	d001      	beq.n	80013a8 <__sflush_r+0xac>
 80013a4:	2b16      	cmp	r3, #22
 80013a6:	d11e      	bne.n	80013e6 <__sflush_r+0xea>
 80013a8:	602f      	str	r7, [r5, #0]
 80013aa:	2000      	movs	r0, #0
 80013ac:	e022      	b.n	80013f4 <__sflush_r+0xf8>
 80013ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	e01b      	b.n	80013ee <__sflush_r+0xf2>
 80013b6:	690f      	ldr	r7, [r1, #16]
 80013b8:	2f00      	cmp	r7, #0
 80013ba:	d0f6      	beq.n	80013aa <__sflush_r+0xae>
 80013bc:	0793      	lsls	r3, r2, #30
 80013be:	680e      	ldr	r6, [r1, #0]
 80013c0:	bf08      	it	eq
 80013c2:	694b      	ldreq	r3, [r1, #20]
 80013c4:	600f      	str	r7, [r1, #0]
 80013c6:	bf18      	it	ne
 80013c8:	2300      	movne	r3, #0
 80013ca:	eba6 0807 	sub.w	r8, r6, r7
 80013ce:	608b      	str	r3, [r1, #8]
 80013d0:	f1b8 0f00 	cmp.w	r8, #0
 80013d4:	dde9      	ble.n	80013aa <__sflush_r+0xae>
 80013d6:	6a21      	ldr	r1, [r4, #32]
 80013d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80013da:	4643      	mov	r3, r8
 80013dc:	463a      	mov	r2, r7
 80013de:	4628      	mov	r0, r5
 80013e0:	47b0      	blx	r6
 80013e2:	2800      	cmp	r0, #0
 80013e4:	dc08      	bgt.n	80013f8 <__sflush_r+0xfc>
 80013e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ee:	81a3      	strh	r3, [r4, #12]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013f8:	4407      	add	r7, r0
 80013fa:	eba8 0800 	sub.w	r8, r8, r0
 80013fe:	e7e7      	b.n	80013d0 <__sflush_r+0xd4>
 8001400:	dfbffffe 	.word	0xdfbffffe

08001404 <_fflush_r>:
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	690b      	ldr	r3, [r1, #16]
 8001408:	4605      	mov	r5, r0
 800140a:	460c      	mov	r4, r1
 800140c:	b913      	cbnz	r3, 8001414 <_fflush_r+0x10>
 800140e:	2500      	movs	r5, #0
 8001410:	4628      	mov	r0, r5
 8001412:	bd38      	pop	{r3, r4, r5, pc}
 8001414:	b118      	cbz	r0, 800141e <_fflush_r+0x1a>
 8001416:	6a03      	ldr	r3, [r0, #32]
 8001418:	b90b      	cbnz	r3, 800141e <_fflush_r+0x1a>
 800141a:	f7ff fa9f 	bl	800095c <__sinit>
 800141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f3      	beq.n	800140e <_fflush_r+0xa>
 8001426:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001428:	07d0      	lsls	r0, r2, #31
 800142a:	d404      	bmi.n	8001436 <_fflush_r+0x32>
 800142c:	0599      	lsls	r1, r3, #22
 800142e:	d402      	bmi.n	8001436 <_fflush_r+0x32>
 8001430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001432:	f7ff fb98 	bl	8000b66 <__retarget_lock_acquire_recursive>
 8001436:	4628      	mov	r0, r5
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff ff5f 	bl	80012fc <__sflush_r>
 800143e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001440:	07da      	lsls	r2, r3, #31
 8001442:	4605      	mov	r5, r0
 8001444:	d4e4      	bmi.n	8001410 <_fflush_r+0xc>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	059b      	lsls	r3, r3, #22
 800144a:	d4e1      	bmi.n	8001410 <_fflush_r+0xc>
 800144c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800144e:	f7ff fb8b 	bl	8000b68 <__retarget_lock_release_recursive>
 8001452:	e7dd      	b.n	8001410 <_fflush_r+0xc>

08001454 <__swbuf_r>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	460e      	mov	r6, r1
 8001458:	4614      	mov	r4, r2
 800145a:	4605      	mov	r5, r0
 800145c:	b118      	cbz	r0, 8001466 <__swbuf_r+0x12>
 800145e:	6a03      	ldr	r3, [r0, #32]
 8001460:	b90b      	cbnz	r3, 8001466 <__swbuf_r+0x12>
 8001462:	f7ff fa7b 	bl	800095c <__sinit>
 8001466:	69a3      	ldr	r3, [r4, #24]
 8001468:	60a3      	str	r3, [r4, #8]
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	071a      	lsls	r2, r3, #28
 800146e:	d501      	bpl.n	8001474 <__swbuf_r+0x20>
 8001470:	6923      	ldr	r3, [r4, #16]
 8001472:	b943      	cbnz	r3, 8001486 <__swbuf_r+0x32>
 8001474:	4621      	mov	r1, r4
 8001476:	4628      	mov	r0, r5
 8001478:	f000 f82a 	bl	80014d0 <__swsetup_r>
 800147c:	b118      	cbz	r0, 8001486 <__swbuf_r+0x32>
 800147e:	f04f 37ff 	mov.w	r7, #4294967295
 8001482:	4638      	mov	r0, r7
 8001484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	6922      	ldr	r2, [r4, #16]
 800148a:	1a98      	subs	r0, r3, r2
 800148c:	6963      	ldr	r3, [r4, #20]
 800148e:	b2f6      	uxtb	r6, r6
 8001490:	4283      	cmp	r3, r0
 8001492:	4637      	mov	r7, r6
 8001494:	dc05      	bgt.n	80014a2 <__swbuf_r+0x4e>
 8001496:	4621      	mov	r1, r4
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff ffb3 	bl	8001404 <_fflush_r>
 800149e:	2800      	cmp	r0, #0
 80014a0:	d1ed      	bne.n	800147e <__swbuf_r+0x2a>
 80014a2:	68a3      	ldr	r3, [r4, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60a3      	str	r3, [r4, #8]
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	6022      	str	r2, [r4, #0]
 80014ae:	701e      	strb	r6, [r3, #0]
 80014b0:	6962      	ldr	r2, [r4, #20]
 80014b2:	1c43      	adds	r3, r0, #1
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d004      	beq.n	80014c2 <__swbuf_r+0x6e>
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	07db      	lsls	r3, r3, #31
 80014bc:	d5e1      	bpl.n	8001482 <__swbuf_r+0x2e>
 80014be:	2e0a      	cmp	r6, #10
 80014c0:	d1df      	bne.n	8001482 <__swbuf_r+0x2e>
 80014c2:	4621      	mov	r1, r4
 80014c4:	4628      	mov	r0, r5
 80014c6:	f7ff ff9d 	bl	8001404 <_fflush_r>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d0d9      	beq.n	8001482 <__swbuf_r+0x2e>
 80014ce:	e7d6      	b.n	800147e <__swbuf_r+0x2a>

080014d0 <__swsetup_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <__swsetup_r+0xa8>)
 80014d4:	4605      	mov	r5, r0
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	460c      	mov	r4, r1
 80014da:	b118      	cbz	r0, 80014e4 <__swsetup_r+0x14>
 80014dc:	6a03      	ldr	r3, [r0, #32]
 80014de:	b90b      	cbnz	r3, 80014e4 <__swsetup_r+0x14>
 80014e0:	f7ff fa3c 	bl	800095c <__sinit>
 80014e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e8:	0719      	lsls	r1, r3, #28
 80014ea:	d422      	bmi.n	8001532 <__swsetup_r+0x62>
 80014ec:	06da      	lsls	r2, r3, #27
 80014ee:	d407      	bmi.n	8001500 <__swsetup_r+0x30>
 80014f0:	2209      	movs	r2, #9
 80014f2:	602a      	str	r2, [r5, #0]
 80014f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f8:	81a3      	strh	r3, [r4, #12]
 80014fa:	f04f 30ff 	mov.w	r0, #4294967295
 80014fe:	e033      	b.n	8001568 <__swsetup_r+0x98>
 8001500:	0758      	lsls	r0, r3, #29
 8001502:	d512      	bpl.n	800152a <__swsetup_r+0x5a>
 8001504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001506:	b141      	cbz	r1, 800151a <__swsetup_r+0x4a>
 8001508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800150c:	4299      	cmp	r1, r3
 800150e:	d002      	beq.n	8001516 <__swsetup_r+0x46>
 8001510:	4628      	mov	r0, r5
 8001512:	f7ff fb2b 	bl	8000b6c <_free_r>
 8001516:	2300      	movs	r3, #0
 8001518:	6363      	str	r3, [r4, #52]	@ 0x34
 800151a:	89a3      	ldrh	r3, [r4, #12]
 800151c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001520:	81a3      	strh	r3, [r4, #12]
 8001522:	2300      	movs	r3, #0
 8001524:	6063      	str	r3, [r4, #4]
 8001526:	6923      	ldr	r3, [r4, #16]
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	81a3      	strh	r3, [r4, #12]
 8001532:	6923      	ldr	r3, [r4, #16]
 8001534:	b94b      	cbnz	r3, 800154a <__swsetup_r+0x7a>
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800153c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001540:	d003      	beq.n	800154a <__swsetup_r+0x7a>
 8001542:	4621      	mov	r1, r4
 8001544:	4628      	mov	r0, r5
 8001546:	f000 f84f 	bl	80015e8 <__smakebuf_r>
 800154a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800154e:	f013 0201 	ands.w	r2, r3, #1
 8001552:	d00a      	beq.n	800156a <__swsetup_r+0x9a>
 8001554:	2200      	movs	r2, #0
 8001556:	60a2      	str	r2, [r4, #8]
 8001558:	6962      	ldr	r2, [r4, #20]
 800155a:	4252      	negs	r2, r2
 800155c:	61a2      	str	r2, [r4, #24]
 800155e:	6922      	ldr	r2, [r4, #16]
 8001560:	b942      	cbnz	r2, 8001574 <__swsetup_r+0xa4>
 8001562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001566:	d1c5      	bne.n	80014f4 <__swsetup_r+0x24>
 8001568:	bd38      	pop	{r3, r4, r5, pc}
 800156a:	0799      	lsls	r1, r3, #30
 800156c:	bf58      	it	pl
 800156e:	6962      	ldrpl	r2, [r4, #20]
 8001570:	60a2      	str	r2, [r4, #8]
 8001572:	e7f4      	b.n	800155e <__swsetup_r+0x8e>
 8001574:	2000      	movs	r0, #0
 8001576:	e7f7      	b.n	8001568 <__swsetup_r+0x98>
 8001578:	2000000c 	.word	0x2000000c

0800157c <_sbrk_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4d06      	ldr	r5, [pc, #24]	@ (8001598 <_sbrk_r+0x1c>)
 8001580:	2300      	movs	r3, #0
 8001582:	4604      	mov	r4, r0
 8001584:	4608      	mov	r0, r1
 8001586:	602b      	str	r3, [r5, #0]
 8001588:	f7fe ffc4 	bl	8000514 <_sbrk>
 800158c:	1c43      	adds	r3, r0, #1
 800158e:	d102      	bne.n	8001596 <_sbrk_r+0x1a>
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	b103      	cbz	r3, 8001596 <_sbrk_r+0x1a>
 8001594:	6023      	str	r3, [r4, #0]
 8001596:	bd38      	pop	{r3, r4, r5, pc}
 8001598:	200001c8 	.word	0x200001c8

0800159c <__swhatbuf_r>:
 800159c:	b570      	push	{r4, r5, r6, lr}
 800159e:	460c      	mov	r4, r1
 80015a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015a4:	2900      	cmp	r1, #0
 80015a6:	b096      	sub	sp, #88	@ 0x58
 80015a8:	4615      	mov	r5, r2
 80015aa:	461e      	mov	r6, r3
 80015ac:	da0d      	bge.n	80015ca <__swhatbuf_r+0x2e>
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2340      	movne	r3, #64	@ 0x40
 80015bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015c0:	2000      	movs	r0, #0
 80015c2:	6031      	str	r1, [r6, #0]
 80015c4:	602b      	str	r3, [r5, #0]
 80015c6:	b016      	add	sp, #88	@ 0x58
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
 80015ca:	466a      	mov	r2, sp
 80015cc:	f000 f848 	bl	8001660 <_fstat_r>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	dbec      	blt.n	80015ae <__swhatbuf_r+0x12>
 80015d4:	9901      	ldr	r1, [sp, #4]
 80015d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015de:	4259      	negs	r1, r3
 80015e0:	4159      	adcs	r1, r3
 80015e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015e6:	e7eb      	b.n	80015c0 <__swhatbuf_r+0x24>

080015e8 <__smakebuf_r>:
 80015e8:	898b      	ldrh	r3, [r1, #12]
 80015ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015ec:	079d      	lsls	r5, r3, #30
 80015ee:	4606      	mov	r6, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	d507      	bpl.n	8001604 <__smakebuf_r+0x1c>
 80015f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	6123      	str	r3, [r4, #16]
 80015fc:	2301      	movs	r3, #1
 80015fe:	6163      	str	r3, [r4, #20]
 8001600:	b003      	add	sp, #12
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001604:	ab01      	add	r3, sp, #4
 8001606:	466a      	mov	r2, sp
 8001608:	f7ff ffc8 	bl	800159c <__swhatbuf_r>
 800160c:	9f00      	ldr	r7, [sp, #0]
 800160e:	4605      	mov	r5, r0
 8001610:	4639      	mov	r1, r7
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff fb16 	bl	8000c44 <_malloc_r>
 8001618:	b948      	cbnz	r0, 800162e <__smakebuf_r+0x46>
 800161a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800161e:	059a      	lsls	r2, r3, #22
 8001620:	d4ee      	bmi.n	8001600 <__smakebuf_r+0x18>
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	81a3      	strh	r3, [r4, #12]
 800162c:	e7e2      	b.n	80015f4 <__smakebuf_r+0xc>
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	6020      	str	r0, [r4, #0]
 8001632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001636:	81a3      	strh	r3, [r4, #12]
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800163e:	b15b      	cbz	r3, 8001658 <__smakebuf_r+0x70>
 8001640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001644:	4630      	mov	r0, r6
 8001646:	f000 f81d 	bl	8001684 <_isatty_r>
 800164a:	b128      	cbz	r0, 8001658 <__smakebuf_r+0x70>
 800164c:	89a3      	ldrh	r3, [r4, #12]
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	81a3      	strh	r3, [r4, #12]
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	431d      	orrs	r5, r3
 800165c:	81a5      	strh	r5, [r4, #12]
 800165e:	e7cf      	b.n	8001600 <__smakebuf_r+0x18>

08001660 <_fstat_r>:
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	4d07      	ldr	r5, [pc, #28]	@ (8001680 <_fstat_r+0x20>)
 8001664:	2300      	movs	r3, #0
 8001666:	4604      	mov	r4, r0
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	602b      	str	r3, [r5, #0]
 800166e:	f7fe ff28 	bl	80004c2 <_fstat>
 8001672:	1c43      	adds	r3, r0, #1
 8001674:	d102      	bne.n	800167c <_fstat_r+0x1c>
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	b103      	cbz	r3, 800167c <_fstat_r+0x1c>
 800167a:	6023      	str	r3, [r4, #0]
 800167c:	bd38      	pop	{r3, r4, r5, pc}
 800167e:	bf00      	nop
 8001680:	200001c8 	.word	0x200001c8

08001684 <_isatty_r>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	4d06      	ldr	r5, [pc, #24]	@ (80016a0 <_isatty_r+0x1c>)
 8001688:	2300      	movs	r3, #0
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	602b      	str	r3, [r5, #0]
 8001690:	f7fe ff27 	bl	80004e2 <_isatty>
 8001694:	1c43      	adds	r3, r0, #1
 8001696:	d102      	bne.n	800169e <_isatty_r+0x1a>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	b103      	cbz	r3, 800169e <_isatty_r+0x1a>
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	bd38      	pop	{r3, r4, r5, pc}
 80016a0:	200001c8 	.word	0x200001c8

080016a4 <_init>:
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	bf00      	nop
 80016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016aa:	bc08      	pop	{r3}
 80016ac:	469e      	mov	lr, r3
 80016ae:	4770      	bx	lr

080016b0 <_fini>:
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	bf00      	nop
 80016b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b6:	bc08      	pop	{r3}
 80016b8:	469e      	mov	lr, r3
 80016ba:	4770      	bx	lr
