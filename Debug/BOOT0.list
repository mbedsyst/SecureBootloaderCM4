
BOOT0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002178  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08002318  08002318  00003318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002c68  08002c68  00003c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c70  08002c70  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c70  08002c70  00003c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c74  08002c74  00003c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002c78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000060  08002cd8  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08002cd8  00004298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039b6  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fc8  00000000  00000000  00007a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00008a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c7  00000000  00000000  00008e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010295  00000000  00000000  000090cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c81  00000000  00000000  00019364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000565c3  00000000  00000000  0001dfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000745a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001620  00000000  00000000  000745ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00075c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002300 	.word	0x08002300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08002300 	.word	0x08002300

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <PrintBanner>:
app_code_metadata_t UpdateMetadata;
app_slot_metadata_t SlotMetadata[3];


static void PrintBanner(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	printf(" _  ______  ______  ______  ______  ______  _____  ______  ______  ______  ______  ______  _ \n\r");
 8000284:	481a      	ldr	r0, [pc, #104]	@ (80002f0 <PrintBanner+0x70>)
 8000286:	f001 f8df 	bl	8001448 <iprintf>
	printf("|_||______||______||______||______||______||_____||______||______||______||______||______||_|\n\r");
 800028a:	481a      	ldr	r0, [pc, #104]	@ (80002f4 <PrintBanner+0x74>)
 800028c:	f001 f8dc 	bl	8001448 <iprintf>
	printf("|_|                                                                                       |_|\n\r");
 8000290:	4819      	ldr	r0, [pc, #100]	@ (80002f8 <PrintBanner+0x78>)
 8000292:	f001 f8d9 	bl	8001448 <iprintf>
	printf("|_|  ███████ ███████  ██████ ██    ██ ██████  ███████ ██████   ██████   ██████  ████████  |_|\n\r");
 8000296:	4819      	ldr	r0, [pc, #100]	@ (80002fc <PrintBanner+0x7c>)
 8000298:	f001 f8d6 	bl	8001448 <iprintf>
	printf("|_|  ██      ██      ██      ██    ██ ██   ██ ██      ██   ██ ██    ██ ██    ██    ██     |_|\n\r");
 800029c:	4818      	ldr	r0, [pc, #96]	@ (8000300 <PrintBanner+0x80>)
 800029e:	f001 f8d3 	bl	8001448 <iprintf>
	printf("|_|  ███████ █████   ██      ██    ██ ██████  █████   ██████  ██    ██ ██    ██    ██     |_|\n\r");
 80002a2:	4818      	ldr	r0, [pc, #96]	@ (8000304 <PrintBanner+0x84>)
 80002a4:	f001 f8d0 	bl	8001448 <iprintf>
	printf("|_|       ██ ██      ██      ██    ██ ██   ██ ██      ██   ██ ██    ██ ██    ██    ██     |_|\n\r");
 80002a8:	4817      	ldr	r0, [pc, #92]	@ (8000308 <PrintBanner+0x88>)
 80002aa:	f001 f8cd 	bl	8001448 <iprintf>
	printf("|_|  ███████ ███████  ██████  ██████  ██   ██ ███████ ██████   ██████   ██████     ██     |_|\n\r");
 80002ae:	4817      	ldr	r0, [pc, #92]	@ (800030c <PrintBanner+0x8c>)
 80002b0:	f001 f8ca 	bl	8001448 <iprintf>
	printf("|_| ______  ______  ______  ______  ______  _____  ______  ______  ______  ______  ______ |_|\n\r");
 80002b4:	4816      	ldr	r0, [pc, #88]	@ (8000310 <PrintBanner+0x90>)
 80002b6:	f001 f8c7 	bl	8001448 <iprintf>
	printf("|_||______||______||______||______||______||_____||______||______||______||______||______||_|\n\r");
 80002ba:	480e      	ldr	r0, [pc, #56]	@ (80002f4 <PrintBanner+0x74>)
 80002bc:	f001 f8c4 	bl	8001448 <iprintf>
	printf("\n\n\n\r");
 80002c0:	4814      	ldr	r0, [pc, #80]	@ (8000314 <PrintBanner+0x94>)
 80002c2:	f001 f8c1 	bl	8001448 <iprintf>
	printf("[info] Initializing LED\n\r");
 80002c6:	4814      	ldr	r0, [pc, #80]	@ (8000318 <PrintBanner+0x98>)
 80002c8:	f001 f8be 	bl	8001448 <iprintf>
	printf("[info] Initializing UART\n\r");
 80002cc:	4813      	ldr	r0, [pc, #76]	@ (800031c <PrintBanner+0x9c>)
 80002ce:	f001 f8bb 	bl	8001448 <iprintf>
	printf("[info] Initializing CRC\n\r");
 80002d2:	4813      	ldr	r0, [pc, #76]	@ (8000320 <PrintBanner+0xa0>)
 80002d4:	f001 f8b8 	bl	8001448 <iprintf>
	printf("[info] Initializing SPI\n\r");
 80002d8:	4812      	ldr	r0, [pc, #72]	@ (8000324 <PrintBanner+0xa4>)
 80002da:	f001 f8b5 	bl	8001448 <iprintf>
	printf("[info] Initializing External Flash Memory\n\r");
 80002de:	4812      	ldr	r0, [pc, #72]	@ (8000328 <PrintBanner+0xa8>)
 80002e0:	f001 f8b2 	bl	8001448 <iprintf>
	printf("[info] Bootloader Initialized...\n\r");
 80002e4:	4811      	ldr	r0, [pc, #68]	@ (800032c <PrintBanner+0xac>)
 80002e6:	f001 f8af 	bl	8001448 <iprintf>

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	08002318 	.word	0x08002318
 80002f4:	08002378 	.word	0x08002378
 80002f8:	080023d8 	.word	0x080023d8
 80002fc:	08002438 	.word	0x08002438
 8000300:	08002518 	.word	0x08002518
 8000304:	080025b4 	.word	0x080025b4
 8000308:	08002670 	.word	0x08002670
 800030c:	0800270c 	.word	0x0800270c
 8000310:	080027e0 	.word	0x080027e0
 8000314:	08002840 	.word	0x08002840
 8000318:	08002848 	.word	0x08002848
 800031c:	08002864 	.word	0x08002864
 8000320:	08002880 	.word	0x08002880
 8000324:	0800289c 	.word	0x0800289c
 8000328:	080028b8 	.word	0x080028b8
 800032c:	080028e4 	.word	0x080028e4

08000330 <BOOT_Init>:

void BOOT_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	LED_Init();
 8000334:	f000 fba8 	bl	8000a88 <LED_Init>
	UART2_Init();
 8000338:	f000 fd8a 	bl	8000e50 <UART2_Init>
	CRC_Init();
 800033c:	f000 fb60 	bl	8000a00 <CRC_Init>
	W25Q_Init();
 8000340:	f000 fe59 	bl	8000ff6 <W25Q_Init>
	PrintBanner();
 8000344:	f7ff ff9c 	bl	8000280 <PrintBanner>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <BOOT_DeInit>:

static void BOOT_DeInit(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	printf("[info] De-Initializing Bootloader.\n\r");
 8000350:	4806      	ldr	r0, [pc, #24]	@ (800036c <BOOT_DeInit+0x20>)
 8000352:	f001 f879 	bl	8001448 <iprintf>
	printf("[info] Loading Application Code.\n\r");
 8000356:	4806      	ldr	r0, [pc, #24]	@ (8000370 <BOOT_DeInit+0x24>)
 8000358:	f001 f876 	bl	8001448 <iprintf>
	LED_DeInit();
 800035c:	f000 fbc4 	bl	8000ae8 <LED_DeInit>
	UART2_DeInit();
 8000360:	f000 fdb2 	bl	8000ec8 <UART2_DeInit>
	CRC_DeInit();
 8000364:	f000 fb64 	bl	8000a30 <CRC_DeInit>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	08002908 	.word	0x08002908
 8000370:	08002930 	.word	0x08002930

08000374 <FillSlotMetadata>:

static void FillSlotMetadata(app_slot_metadata_t *slots, int num_slots)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < num_slots; i++)
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	e023      	b.n	80003cc <FillSlotMetadata+0x58>
	{
		slots[i].slot_address = (APP_SLOT_START_ADDR + i * APP_SLOT_SIZE);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800038a:	0459      	lsls	r1, r3, #17
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	460a      	mov	r2, r1
 8000396:	601a      	str	r2, [r3, #0]
		slots[i].is_valid = 0;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	711a      	strb	r2, [r3, #4]

		uint32_t *slotStart = (uint32_t *)slots[i].slot_address;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4413      	add	r3, r2
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	60bb      	str	r3, [r7, #8]

		if(*slotStart == APP_MAGIC_NUMBER)
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0b      	ldr	r2, [pc, #44]	@ (80003e4 <FillSlotMetadata+0x70>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d105      	bne.n	80003c6 <FillSlotMetadata+0x52>
		{
			slots[i].is_valid = 1;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	2201      	movs	r2, #1
 80003c4:	711a      	strb	r2, [r3, #4]
	for(int i = 0; i < num_slots; i++)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3301      	adds	r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbd7      	blt.n	8000384 <FillSlotMetadata+0x10>
		}
	}
}
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	deadbeef 	.word	0xdeadbeef

080003e8 <FillCodeMetadata>:

static void FillCodeMetadata(app_slot_metadata_t *slots, app_code_metadata_t *codes, int num_slots)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < num_slots; i++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	e05c      	b.n	80004b4 <FillCodeMetadata+0xcc>
	{
		if(slots[i].is_valid)
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	68fa      	ldr	r2, [r7, #12]
 8000400:	4413      	add	r3, r2
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d052      	beq.n	80004ae <FillCodeMetadata+0xc6>
		{
			codes[i].id 		= *(volatile uint32_t *)(APP_SLOT_START_ADDR + (i * APP_SLOT_SIZE) + 0);
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800040e:	045b      	lsls	r3, r3, #17
 8000410:	4619      	mov	r1, r3
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	222c      	movs	r2, #44	@ 0x2c
 8000416:	fb02 f303 	mul.w	r3, r2, r3
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	4413      	add	r3, r2
 800041e:	680a      	ldr	r2, [r1, #0]
 8000420:	601a      	str	r2, [r3, #0]
			codes[i].size 		= *(volatile uint32_t *)(APP_SLOT_START_ADDR + (i * APP_SLOT_SIZE) + 1);
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 8000428:	045b      	lsls	r3, r3, #17
 800042a:	3301      	adds	r3, #1
 800042c:	4619      	mov	r1, r3
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	222c      	movs	r2, #44	@ 0x2c
 8000432:	fb02 f303 	mul.w	r3, r2, r3
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	4413      	add	r3, r2
 800043a:	680a      	ldr	r2, [r1, #0]
 800043c:	605a      	str	r2, [r3, #4]
			codes[i].version 	= *(volatile uint32_t *)(APP_SLOT_START_ADDR + (i * APP_SLOT_SIZE) + 2);
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 8000444:	045b      	lsls	r3, r3, #17
 8000446:	3302      	adds	r3, #2
 8000448:	4619      	mov	r1, r3
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	222c      	movs	r2, #44	@ 0x2c
 800044e:	fb02 f303 	mul.w	r3, r2, r3
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	4413      	add	r3, r2
 8000456:	680a      	ldr	r2, [r1, #0]
 8000458:	609a      	str	r2, [r3, #8]
			codes[i].crc 		= *(volatile uint32_t *)(APP_SLOT_START_ADDR + (i * APP_SLOT_SIZE) + 3);
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 8000460:	045b      	lsls	r3, r3, #17
 8000462:	3303      	adds	r3, #3
 8000464:	4619      	mov	r1, r3
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	222c      	movs	r2, #44	@ 0x2c
 800046a:	fb02 f303 	mul.w	r3, r2, r3
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	4413      	add	r3, r2
 8000472:	680a      	ldr	r2, [r1, #0]
 8000474:	60da      	str	r2, [r3, #12]
			codes[i].timestamp	= *(volatile uint32_t *)(APP_SLOT_START_ADDR + (i * APP_SLOT_SIZE) + 4);
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 800047c:	045b      	lsls	r3, r3, #17
 800047e:	3304      	adds	r3, #4
 8000480:	4619      	mov	r1, r3
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	222c      	movs	r2, #44	@ 0x2c
 8000486:	fb02 f303 	mul.w	r3, r2, r3
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	4413      	add	r3, r2
 800048e:	680a      	ldr	r2, [r1, #0]
 8000490:	611a      	str	r2, [r3, #16]
			codes[i].start_addr = (uint32_t)(APP_SLOT_START_ADDR + (i * APP_SLOT_SIZE) + 10);
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 8000498:	045b      	lsls	r3, r3, #17
 800049a:	f103 010a 	add.w	r1, r3, #10
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	222c      	movs	r2, #44	@ 0x2c
 80004a2:	fb02 f303 	mul.w	r3, r2, r3
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	4413      	add	r3, r2
 80004aa:	460a      	mov	r2, r1
 80004ac:	619a      	str	r2, [r3, #24]
	for(int i = 0; i < num_slots; i++)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	db9e      	blt.n	80003fa <FillCodeMetadata+0x12>
		}
	}
}
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	371c      	adds	r7, #28
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <VerifyAppChecksum>:

static void VerifyAppChecksum(app_code_metadata_t *codes, int num_slots)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b086      	sub	sp, #24
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < num_slots; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e033      	b.n	8000542 <VerifyAppChecksum+0x78>
	{
		const uint32_t app_code_start= *(const uint32_t *)(codes[i].start_addr);
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	222c      	movs	r2, #44	@ 0x2c
 80004de:	fb02 f303 	mul.w	r3, r2, r3
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	613b      	str	r3, [r7, #16]
		uint32_t app_crc = CRC_Calculate((const uint32_t *)app_code_start, codes[i].size/4);
 80004ec:	6938      	ldr	r0, [r7, #16]
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	222c      	movs	r2, #44	@ 0x2c
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	089b      	lsrs	r3, r3, #2
 80004fe:	4619      	mov	r1, r3
 8000500:	f000 faa6 	bl	8000a50 <CRC_Calculate>
 8000504:	60f8      	str	r0, [r7, #12]
		if(app_crc != codes[i].crc)
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	222c      	movs	r2, #44	@ 0x2c
 800050a:	fb02 f303 	mul.w	r3, r2, r3
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	429a      	cmp	r2, r3
 8000518:	d008      	beq.n	800052c <VerifyAppChecksum+0x62>
		{
			codes[i].valid = 0;
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	222c      	movs	r2, #44	@ 0x2c
 800051e:	fb02 f303 	mul.w	r3, r2, r3
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
 800052a:	e007      	b.n	800053c <VerifyAppChecksum+0x72>
		}
		else
		{
			codes[i].valid = 1;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	222c      	movs	r2, #44	@ 0x2c
 8000530:	fb02 f303 	mul.w	r3, r2, r3
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4413      	add	r3, r2
 8000538:	2201      	movs	r2, #1
 800053a:	615a      	str	r2, [r3, #20]
	for(int i = 0; i < num_slots; i++)
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	3301      	adds	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	697a      	ldr	r2, [r7, #20]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	429a      	cmp	r2, r3
 8000548:	dbc7      	blt.n	80004da <VerifyAppChecksum+0x10>
		}
	}
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <PrintValidAppCount>:

static void PrintValidAppCount(app_code_metadata_t *codes, int num_slots)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < num_slots; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	e00e      	b.n	8000586 <PrintValidAppCount+0x32>
	{
		if(codes[i].valid == 1)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	222c      	movs	r2, #44	@ 0x2c
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d102      	bne.n	8000580 <PrintValidAppCount+0x2c>
		{
			count++;
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	3301      	adds	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < num_slots; i++)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	dbec      	blt.n	8000568 <PrintValidAppCount+0x14>
		}
	}
	printf("[info] Found %d valid applications in the Internal Flash Memory\n\r", count);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4619      	mov	r1, r3
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <PrintValidAppCount+0x4c>)
 8000594:	f000 ff58 	bl	8001448 <iprintf>
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	08002954 	.word	0x08002954

080005a4 <ProcessFirmwareMetadata>:

static int ProcessFirmwareMetadata(uint8_t *firmware_metadata)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	uint32_t magic_number = *(uint32_t *)firmware_metadata;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	60fb      	str	r3, [r7, #12]
	if (magic_number != APP_MAGIC_NUMBER)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <ProcessFirmwareMetadata+0x34>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d005      	beq.n	80005c6 <ProcessFirmwareMetadata+0x22>
	{
		printf("[error] Invalid Magic Number in External Flash.\n\r");
 80005ba:	4808      	ldr	r0, [pc, #32]	@ (80005dc <ProcessFirmwareMetadata+0x38>)
 80005bc:	f000 ff44 	bl	8001448 <iprintf>
		return -1;
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	e004      	b.n	80005d0 <ProcessFirmwareMetadata+0x2c>
	}
	memcpy(&UpdateMetadata, firmware_metadata, sizeof(app_code_metadata_t));
 80005c6:	222c      	movs	r2, #44	@ 0x2c
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <ProcessFirmwareMetadata+0x3c>)
 80005cc:	f001 f981 	bl	80018d2 <memcpy>
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	deadbeef 	.word	0xdeadbeef
 80005dc:	08002998 	.word	0x08002998
 80005e0:	20000100 	.word	0x20000100

080005e4 <CheckOldestVersion>:
        return 0;
    }
}

static int CheckOldestVersion(app_code_metadata_t *codes, int num_slots)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	uint32_t oldest_version = codes[0].version;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < num_slots; i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	e014      	b.n	8000624 <CheckOldestVersion+0x40>
	{
		if(codes[i].version < oldest_version)
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	222c      	movs	r2, #44	@ 0x2c
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	429a      	cmp	r2, r3
 800060c:	d907      	bls.n	800061e <CheckOldestVersion+0x3a>
		{
			oldest_version = codes[i].version;
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	222c      	movs	r2, #44	@ 0x2c
 8000612:	fb02 f303 	mul.w	r3, r2, r3
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < num_slots; i++)
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	3301      	adds	r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbe6      	blt.n	80005fa <CheckOldestVersion+0x16>
		}
	}

	// ToDo Return oldest version data

}
 800062c:	bf00      	nop
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <FindDefaultApplication>:

static int FindDefaultApplication(app_code_metadata_t *codes, int num_slots)
{
 800063a:	b480      	push	{r7}
 800063c:	b087      	sub	sp, #28
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
    int default_index = -1;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	617b      	str	r3, [r7, #20]
    uint32_t latest_version = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < num_slots; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e01f      	b.n	8000694 <FindDefaultApplication+0x5a>
    {
        if (codes[i].valid && codes[i].version > latest_version)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	222c      	movs	r2, #44	@ 0x2c
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d013      	beq.n	800068e <FindDefaultApplication+0x54>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	222c      	movs	r2, #44	@ 0x2c
 800066a:	fb02 f303 	mul.w	r3, r2, r3
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	429a      	cmp	r2, r3
 8000678:	d209      	bcs.n	800068e <FindDefaultApplication+0x54>
        {
            latest_version = codes[i].version;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	222c      	movs	r2, #44	@ 0x2c
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	613b      	str	r3, [r7, #16]
            default_index = i;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < num_slots; i++)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbdb      	blt.n	8000654 <FindDefaultApplication+0x1a>
        }
    }
    return default_index;
 800069c:	697b      	ldr	r3, [r7, #20]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	371c      	adds	r7, #28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <ChooseApplicationToBoot>:

// Function to choose application to boot
static int ChooseApplicationToBoot(app_code_metadata_t *codes, int num_slots)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b08b      	sub	sp, #44	@ 0x2c
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    printf("Available Applications:\n");
 80006b6:	483d      	ldr	r0, [pc, #244]	@ (80007ac <ChooseApplicationToBoot+0x100>)
 80006b8:	f000 ff2e 	bl	8001518 <puts>
    for (int i = 0; i < num_slots; i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	e02a      	b.n	8000718 <ChooseApplicationToBoot+0x6c>
    {
        if (codes[i].valid)
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	222c      	movs	r2, #44	@ 0x2c
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d01e      	beq.n	8000712 <ChooseApplicationToBoot+0x66>
        {
            printf("[%d] %s (Version: %d, Size: %d bytes)\n\r", i + 1, codes[i].application_name, (int)codes[i].version, (int)codes[i].size);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	1c59      	adds	r1, r3, #1
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	222c      	movs	r2, #44	@ 0x2c
 80006dc:	fb02 f303 	mul.w	r3, r2, r3
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	f103 001c 	add.w	r0, r3, #28
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	222c      	movs	r2, #44	@ 0x2c
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	461c      	mov	r4, r3
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	222c      	movs	r2, #44	@ 0x2c
 80006fc:	fb02 f303 	mul.w	r3, r2, r3
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4623      	mov	r3, r4
 800070a:	4602      	mov	r2, r0
 800070c:	4828      	ldr	r0, [pc, #160]	@ (80007b0 <ChooseApplicationToBoot+0x104>)
 800070e:	f000 fe9b 	bl	8001448 <iprintf>
    for (int i = 0; i < num_slots; i++)
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3301      	adds	r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	69fa      	ldr	r2, [r7, #28]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	dbd0      	blt.n	80006c2 <ChooseApplicationToBoot+0x16>
        }
    }

    printf("Choose an application to boot (1-3):\n\r");
 8000720:	4824      	ldr	r0, [pc, #144]	@ (80007b4 <ChooseApplicationToBoot+0x108>)
 8000722:	f000 fe91 	bl	8001448 <iprintf>
    printf("Booting the default application in 8 seconds...\n\r");
 8000726:	4824      	ldr	r0, [pc, #144]	@ (80007b8 <ChooseApplicationToBoot+0x10c>)
 8000728:	f000 fe8e 	bl	8001448 <iprintf>

    TIM2_Init();  // Initialize the timer
 800072c:	f000 fafa 	bl	8000d24 <TIM2_Init>
    TIM2_Start(); // Start the timer
 8000730:	f000 fb1a 	bl	8000d68 <TIM2_Start>
    char user_input[10];

    while (!timeout_flag)
 8000734:	e029      	b.n	800078a <ChooseApplicationToBoot+0xde>
    {
        if (fgets(user_input, sizeof(user_input), stdin) != NULL)
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <ChooseApplicationToBoot+0x110>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	210a      	movs	r1, #10
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fdb4 	bl	80012b0 <fgets>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d01d      	beq.n	800078a <ChooseApplicationToBoot+0xde>
        {
            int choice = atoi(user_input);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fcbd 	bl	80010d2 <atoi>
 8000758:	61b8      	str	r0, [r7, #24]
            if (choice >= 1 && choice <= 3 && codes[choice - 1].valid)
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	2b00      	cmp	r3, #0
 800075e:	dd11      	ble.n	8000784 <ChooseApplicationToBoot+0xd8>
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	2b03      	cmp	r3, #3
 8000764:	dc0e      	bgt.n	8000784 <ChooseApplicationToBoot+0xd8>
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	222c      	movs	r2, #44	@ 0x2c
 800076a:	fb02 f303 	mul.w	r3, r2, r3
 800076e:	3b2c      	subs	r3, #44	@ 0x2c
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d004      	beq.n	8000784 <ChooseApplicationToBoot+0xd8>
            {
                TIM2_Stop(); // Stop the timer on valid input
 800077a:	f000 fb08 	bl	8000d8e <TIM2_Stop>
                return choice - 1;
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	3b01      	subs	r3, #1
 8000782:	e00f      	b.n	80007a4 <ChooseApplicationToBoot+0xf8>
            }
            else
            {
                printf("Invalid choice. Please enter a valid option.\n\r");
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <ChooseApplicationToBoot+0x114>)
 8000786:	f000 fe5f 	bl	8001448 <iprintf>
    while (!timeout_flag)
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <ChooseApplicationToBoot+0x118>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0d0      	beq.n	8000736 <ChooseApplicationToBoot+0x8a>
            }
        }
    }
    printf("No selection made. Booting the default application...\n\r");
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <ChooseApplicationToBoot+0x11c>)
 8000796:	f000 fe57 	bl	8001448 <iprintf>
    // Return the default application
    return FindDefaultApplication(AppMetadata, APP_SLOT_COUNT);
 800079a:	2103      	movs	r1, #3
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <ChooseApplicationToBoot+0x120>)
 800079e:	f7ff ff4c 	bl	800063a <FindDefaultApplication>
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3724      	adds	r7, #36	@ 0x24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	080029cc 	.word	0x080029cc
 80007b0:	080029e4 	.word	0x080029e4
 80007b4:	08002a0c 	.word	0x08002a0c
 80007b8:	08002a34 	.word	0x08002a34
 80007bc:	20000010 	.word	0x20000010
 80007c0:	08002a68 	.word	0x08002a68
 80007c4:	20000148 	.word	0x20000148
 80007c8:	08002a98 	.word	0x08002a98
 80007cc:	2000007c 	.word	0x2000007c

080007d0 <BootApplication>:

static void BootApplication(app_code_metadata_t *codes, int app_index)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    if (app_index < 0 || app_index > 2 || !codes[app_index].valid)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0b      	blt.n	80007f8 <BootApplication+0x28>
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	dc08      	bgt.n	80007f8 <BootApplication+0x28>
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	222c      	movs	r2, #44	@ 0x2c
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d103      	bne.n	8000800 <BootApplication+0x30>
    {
        printf("Invalid application index or application not valid.\n\r");
 80007f8:	4813      	ldr	r0, [pc, #76]	@ (8000848 <BootApplication+0x78>)
 80007fa:	f000 fe25 	bl	8001448 <iprintf>
        return;
 80007fe:	e01f      	b.n	8000840 <BootApplication+0x70>
    }
    uint32_t app_start_addr = codes[app_index].start_addr;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	222c      	movs	r2, #44	@ 0x2c
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	617b      	str	r3, [r7, #20]
    uint32_t *app_vector_table = (uint32_t *)app_start_addr;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	613b      	str	r3, [r7, #16]

    BOOT_DeInit();
 8000814:	f7ff fd9a 	bl	800034c <BOOT_DeInit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop

    __disable_irq();
    SCB->VTOR = app_start_addr;
 800081c:	4a0b      	ldr	r2, [pc, #44]	@ (800084c <BootApplication+0x7c>)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	6093      	str	r3, [r2, #8]
    __set_MSP(app_vector_table[0]);
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	f383 8808 	msr	MSP, r3
}
 800082e:	bf00      	nop
    void (*app_reset_handler)(void) = (void (*)(void))app_vector_table[1];
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3304      	adds	r3, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	60fb      	str	r3, [r7, #12]
    app_reset_handler();
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4798      	blx	r3

    while (1);
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BootApplication+0x6c>
}
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08002ad0 	.word	0x08002ad0
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <FindApplications>:

void FindApplications(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	FillSlotMetadata(SlotMetadata, APP_SLOT_COUNT);
 8000854:	2103      	movs	r1, #3
 8000856:	4809      	ldr	r0, [pc, #36]	@ (800087c <FindApplications+0x2c>)
 8000858:	f7ff fd8c 	bl	8000374 <FillSlotMetadata>
	FillCodeMetadata(SlotMetadata, AppMetadata, APP_SLOT_COUNT);
 800085c:	2203      	movs	r2, #3
 800085e:	4908      	ldr	r1, [pc, #32]	@ (8000880 <FindApplications+0x30>)
 8000860:	4806      	ldr	r0, [pc, #24]	@ (800087c <FindApplications+0x2c>)
 8000862:	f7ff fdc1 	bl	80003e8 <FillCodeMetadata>
	VerifyAppChecksum(AppMetadata, APP_SLOT_COUNT);
 8000866:	2103      	movs	r1, #3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <FindApplications+0x30>)
 800086a:	f7ff fe2e 	bl	80004ca <VerifyAppChecksum>
	PrintValidAppCount(AppMetadata, APP_SLOT_COUNT);
 800086e:	2103      	movs	r1, #3
 8000870:	4803      	ldr	r0, [pc, #12]	@ (8000880 <FindApplications+0x30>)
 8000872:	f7ff fe6f 	bl	8000554 <PrintValidAppCount>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000012c 	.word	0x2000012c
 8000880:	2000007c 	.word	0x2000007c

08000884 <CheckFirmwareUpdate>:

void CheckFirmwareUpdate(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	@ 0x38
 8000888:	af00      	add	r7, sp, #0
	uint8_t firmware_metadata[44];
	int8_t err = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint32_t oldest_app_address;
	W25Q_Init();
 8000890:	f000 fbb1 	bl	8000ff6 <W25Q_Init>
	W25Q_ReadData(0, 0, firmware_metadata, sizeof(firmware_metadata));
 8000894:	1d3a      	adds	r2, r7, #4
 8000896:	232c      	movs	r3, #44	@ 0x2c
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fbb3 	bl	8001006 <W25Q_ReadData>
	err = ProcessFirmwareMetadata(firmware_metadata);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe7e 	bl	80005a4 <ProcessFirmwareMetadata>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(err < 0)
 80008ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da03      	bge.n	80008be <CheckFirmwareUpdate+0x3a>
	{
		printf("[error] Exiting Firmware Update routine.\n\r");
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <CheckFirmwareUpdate+0x4c>)
 80008b8:	f000 fdc6 	bl	8001448 <iprintf>
 80008bc:	e005      	b.n	80008ca <CheckFirmwareUpdate+0x46>
		return;
	}
	oldest_app_address = CheckOldestVersion(AppMetadata, APP_SLOT_COUNT);
 80008be:	2103      	movs	r1, #3
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <CheckFirmwareUpdate+0x50>)
 80008c2:	f7ff fe8f 	bl	80005e4 <CheckOldestVersion>
 80008c6:	4603      	mov	r3, r0
 80008c8:	633b      	str	r3, [r7, #48]	@ 0x30
	 * 		2. Continue till whole data is transferred
	 * 		3. Verify the checksum using CRC
	 * 		4. Update application metadata table
	 * 		5. Print confirmation to Serial terminalS
	 * */
}
 80008ca:	3738      	adds	r7, #56	@ 0x38
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	08002b08 	.word	0x08002b08
 80008d4:	2000007c 	.word	0x2000007c

080008d8 <SelectApplicationToLoad>:

void SelectApplicationToLoad(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	int app_index = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
	FindDefaultApplication(AppMetadata, APP_SLOT_COUNT);
 80008e2:	2103      	movs	r1, #3
 80008e4:	4807      	ldr	r0, [pc, #28]	@ (8000904 <SelectApplicationToLoad+0x2c>)
 80008e6:	f7ff fea8 	bl	800063a <FindDefaultApplication>
	app_index = ChooseApplicationToBoot(AppMetadata, APP_SLOT_COUNT);
 80008ea:	2103      	movs	r1, #3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <SelectApplicationToLoad+0x2c>)
 80008ee:	f7ff fedd 	bl	80006ac <ChooseApplicationToBoot>
 80008f2:	6078      	str	r0, [r7, #4]
	BootApplication(AppMetadata, app_index);
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	4803      	ldr	r0, [pc, #12]	@ (8000904 <SelectApplicationToLoad+0x2c>)
 80008f8:	f7ff ff6a 	bl	80007d0 <BootApplication>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000007c 	.word	0x2000007c

08000908 <Bootloader_Run>:

void Bootloader_Run(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	BOOT_Init();
 800090c:	f7ff fd10 	bl	8000330 <BOOT_Init>
	FindApplications();
 8000910:	f7ff ff9e 	bl	8000850 <FindApplications>
	CheckFirmwareUpdate();
 8000914:	f7ff ffb6 	bl	8000884 <CheckFirmwareUpdate>
	SelectApplicationToLoad();
 8000918:	f7ff ffde 	bl	80008d8 <SelectApplicationToLoad>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <main>:
#include "main.h"

int main()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	Bootloader_Run();
 8000924:	f7ff fff0 	bl	8000908 <Bootloader_Run>

	while(1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <main+0x8>

0800092c <_close>:
  }
  return len;
}

int _close(int file)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000954:	605a      	str	r2, [r3, #4]
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_isatty>:

int _isatty(int file)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	@ (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f000 ff58 	bl	8001878 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20018000 	.word	0x20018000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000144 	.word	0x20000144
 80009fc:	20000298 	.word	0x20000298

08000a00 <CRC_Init>:
#include "Drivers/CRC.h"

void CRC_Init(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <CRC_Init+0x28>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <CRC_Init+0x28>)
 8000a0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
	CRC->CR |= CRC_CR_RESET;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <CRC_Init+0x2c>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <CRC_Init+0x2c>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6093      	str	r3, [r2, #8]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40023000 	.word	0x40023000

08000a30 <CRC_DeInit>:

void CRC_DeInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_CRCEN;
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <CRC_DeInit+0x1c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <CRC_DeInit+0x1c>)
 8000a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <CRC_Calculate>:

uint32_t CRC_Calculate(const uint32_t *data, uint32_t len)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	while(len--)
 8000a5a:	e005      	b.n	8000a68 <CRC_Calculate+0x18>
	{
		CRC->DR = *data++;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	1d1a      	adds	r2, r3, #4
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <CRC_Calculate+0x34>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6013      	str	r3, [r2, #0]
	while(len--)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	1e5a      	subs	r2, r3, #1
 8000a6c:	603a      	str	r2, [r7, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f4      	bne.n	8000a5c <CRC_Calculate+0xc>
	}
	return CRC->DR;
 8000a72:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <CRC_Calculate+0x34>)
 8000a74:	681b      	ldr	r3, [r3, #0]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023000 	.word	0x40023000

08000a88 <LED_Init>:
#include "Drivers/LED.h"

void LED_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <LED_Init+0x58>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <LED_Init+0x58>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <LED_Init+0x5c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a11      	ldr	r2, [pc, #68]	@ (8000ae4 <LED_Init+0x5c>)
 8000a9e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000aa2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <LED_Init+0x5c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <LED_Init+0x5c>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aae:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <LED_Init+0x5c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae4 <LED_Init+0x5c>)
 8000ab6:	f023 0320 	bic.w	r3, r3, #32
 8000aba:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <LED_Init+0x5c>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <LED_Init+0x5c>)
 8000ac2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000ac6:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <LED_Init+0x5c>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <LED_Init+0x5c>)
 8000ace:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <LED_DeInit>:

void LED_DeInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	 RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <LED_DeInit+0x1c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <LED_DeInit+0x1c>)
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <SPI2_Init>:
 *	SPI2_SCK  - PB13
 *	SPI2_NSS  - PB12
 */

void SPI2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port B
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <SPI2_Init+0x60>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <SPI2_Init+0x60>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	6313      	str	r3, [r2, #48]	@ 0x30
	// Enable clock SPI2 peripheral
	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <SPI2_Init+0x60>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <SPI2_Init+0x60>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure PB13, PB14, PB15 as Alternate Function for SPI2
	GPIOB->MODER &= ~(GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <SPI2_Init+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a10      	ldr	r2, [pc, #64]	@ (8000b6c <SPI2_Init+0x64>)
 8000b2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000b2e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE15_1);
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <SPI2_Init+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <SPI2_Init+0x64>)
 8000b36:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 8000b3a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= ((5 << 20) | (5 << 24) | (5 << 28));
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <SPI2_Init+0x64>)
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <SPI2_Init+0x64>)
 8000b42:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000b46:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000b4a:	6253      	str	r3, [r2, #36]	@ 0x24

	// Pull CS High
	SPI2_DeselectSlave();
 8000b4c:	f000 f820 	bl	8000b90 <SPI2_DeselectSlave>

	// Configure SPI2 in master mode, baud rate = fPCLK / 16, CPOL = 0, CPHA = 0, 8-bit data format
	SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <SPI2_Init+0x68>)
 8000b52:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000b56:	601a      	str	r2, [r3, #0]
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <SPI2_Init+0x68>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <SPI2_Init+0x68>)
 8000b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40003800 	.word	0x40003800

08000b74 <SPI2_SelectSlave>:

void SPI2_SelectSlave(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <SPI2_SelectSlave+0x18>)
 8000b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b7e:	619a      	str	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40020400 	.word	0x40020400

08000b90 <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
    	// Pull CS high
    	GPIOB->BSRR = (1 << 12);
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <SPI2_DeselectSlave+0x18>)
 8000b96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b9a:	619a      	str	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40020400 	.word	0x40020400

08000bac <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
    	// Wait until TXE (Transmit buffer empty)
    	while(!(SPI2->SR & SPI_SR_TXE));
 8000bb6:	bf00      	nop
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <SPI2_TransmitReceiveByte+0x40>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0f9      	beq.n	8000bb8 <SPI2_TransmitReceiveByte+0xc>
    	// Send data
    	SPI2->DR = data;
 8000bc4:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <SPI2_TransmitReceiveByte+0x40>)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	60d3      	str	r3, [r2, #12]
    	// Wait until RXNE (Receive buffer not empty)
    	while(!(SPI2->SR & SPI_SR_RXNE));
 8000bca:	bf00      	nop
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <SPI2_TransmitReceiveByte+0x40>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f9      	beq.n	8000bcc <SPI2_TransmitReceiveByte+0x20>
    	// Return received data
    	return (uint8_t)(SPI2->DR);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SPI2_TransmitReceiveByte+0x40>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	b2db      	uxtb	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40003800 	.word	0x40003800

08000bf0 <delay_ms>:
#include "Drivers/SYSTICK.h"

void delay_ms(uint32_t ms)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->CTRL |= (1<<0) | (1<<2) ;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <delay_ms+0x58>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <delay_ms+0x58>)
 8000bfe:	f043 0305 	orr.w	r3, r3, #5
 8000c02:	6013      	str	r3, [r2, #0]
	SysTick->LOAD  = 15999;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <delay_ms+0x58>)
 8000c06:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000c0a:	605a      	str	r2, [r3, #4]
	for(i=0; i<ms; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e009      	b.n	8000c26 <delay_ms+0x36>
	{
		while(!(SysTick->CTRL & (1<<16)));
 8000c12:	bf00      	nop
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <delay_ms+0x58>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <delay_ms+0x24>
	for(i=0; i<ms; i++)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3f1      	bcc.n	8000c12 <delay_ms+0x22>
	}
	SysTick->CTRL &=~(1U<<0) ;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <delay_ms+0x58>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <delay_ms+0x58>)
 8000c34:	f023 0301 	bic.w	r3, r3, #1
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db12      	blt.n	8000cc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	490a      	ldr	r1, [pc, #40]	@ (8000ccc <__NVIC_DisableIRQ+0x44>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	3320      	adds	r3, #32
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb4:	f3bf 8f4f 	dsb	sy
}
 8000cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cba:	f3bf 8f6f 	isb	sy
}
 8000cbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <TIM2_Init>:
volatile uint8_t countdown_timer = 8; // Initialize countdown to 8 seconds
volatile uint8_t timeout_flag = 0;    // Flag indicating timeout

// Initialize TIM2 for 1-second intervals
void TIM2_Init(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
    // Enable TIM2 Clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <TIM2_Init+0x40>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <TIM2_Init+0x40>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure TIM2
    TIM2->PSC = 16000 - 1; // Prescaler: 16 MHz / 16000 = 1 kHz
 8000d34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d38:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000d3c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000 - 1;  // Auto-reload: 1 kHz / 1000 = 1 Hz (1 second)
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->DIER |= TIM_DIER_UIE; // Enable update interrupt
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <TIM2_Start>:

// Start TIM2 Timer
void TIM2_Start(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    TIM2->CR1 |= TIM_CR1_CEN;   // Enable TIM2 counter
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);  // Enable TIM2 interrupt in NVIC
 8000d7c:	201c      	movs	r0, #28
 8000d7e:	f7ff ff65 	bl	8000c4c <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1); // Set interrupt priority
 8000d82:	2101      	movs	r1, #1
 8000d84:	201c      	movs	r0, #28
 8000d86:	f7ff ffa3 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <TIM2_Stop>:

// Stop TIM2 Timer
void TIM2_Stop(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN;  // Disable TIM2 counter
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	6013      	str	r3, [r2, #0]
    NVIC_DisableIRQ(TIM2_IRQn); // Disable TIM2 interrupt in NVIC
 8000da2:	201c      	movs	r0, #28
 8000da4:	f7ff ff70 	bl	8000c88 <__NVIC_DisableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <TIM2_IRQHandler>:

// TIM2 Interrupt Handler
void TIM2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8000db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d019      	beq.n	8000df2 <TIM2_IRQHandler+0x46>
    { // Check for update interrupt flag
        TIM2->SR &= ~TIM_SR_UIF; // Clear the flag
 8000dbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6113      	str	r3, [r2, #16]

        if (countdown_timer > 0)
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <TIM2_IRQHandler+0x4c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <TIM2_IRQHandler+0x3c>
        {
            countdown_timer--; // Decrement countdown
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <TIM2_IRQHandler+0x4c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3b01      	subs	r3, #1
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <TIM2_IRQHandler+0x4c>)
 8000de4:	701a      	strb	r2, [r3, #0]
        {
            timeout_flag = 1; // Set timeout flag when countdown reaches 0
            TIM2_Stop();      // Stop the timer
        }
    }
}
 8000de6:	e004      	b.n	8000df2 <TIM2_IRQHandler+0x46>
            timeout_flag = 1; // Set timeout flag when countdown reaches 0
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <TIM2_IRQHandler+0x50>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
            TIM2_Stop();      // Stop the timer
 8000dee:	f7ff ffce 	bl	8000d8e <TIM2_Stop>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000148 	.word	0x20000148

08000e00 <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	085a      	lsrs	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	441a      	add	r2, r3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e18:	b29b      	uxth	r3, r3
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 8000e32:	6839      	ldr	r1, [r7, #0]
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ffe3 	bl	8000e00 <Compute_UART_Baud>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <UART2_SetBaudRate+0x24>)
 8000e40:	609a      	str	r2, [r3, #8]
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40004400 	.word	0x40004400

08000e50 <UART2_Init>:

void UART2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <UART2_Init+0x68>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <UART2_Init+0x68>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <UART2_Init+0x68>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <UART2_Init+0x68>)
 8000e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6a:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <UART2_Init+0x6c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <UART2_Init+0x6c>)
 8000e72:	f023 0310 	bic.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000e78:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <UART2_Init+0x6c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <UART2_Init+0x6c>)
 8000e7e:	f043 0320 	orr.w	r3, r3, #32
 8000e82:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <UART2_Init+0x6c>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4a0c      	ldr	r2, [pc, #48]	@ (8000ebc <UART2_Init+0x6c>)
 8000e8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000e8e:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 8000e90:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000e94:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <UART2_Init+0x70>)
 8000e96:	f7ff ffc7 	bl	8000e28 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <UART2_Init+0x74>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <UART2_Init+0x74>)
 8000ea0:	f043 030c 	orr.w	r3, r3, #12
 8000ea4:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <UART2_Init+0x74>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <UART2_Init+0x74>)
 8000eac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eb0:	60d3      	str	r3, [r2, #12]
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	00f42400 	.word	0x00f42400
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <UART2_DeInit>:

void UART2_DeInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <UART2_DeInit+0x28>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <UART2_DeInit+0x28>)
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR &= ~RCC_APB1ENR_USART2EN;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <UART2_DeInit+0x28>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <UART2_DeInit+0x28>)
 8000ede:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000ee2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <UART2_TxChar>:

void UART2_TxChar(char ch)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART2->SR & USART_SR_TXE));
 8000efe:	bf00      	nop
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <UART2_TxChar+0x2c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f9      	beq.n	8000f00 <UART2_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART2->DR = (ch &0xFF);
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <UART2_TxChar+0x2c>)
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	6053      	str	r3, [r2, #4]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40004400 	.word	0x40004400

08000f24 <UART2_RxChar>:
		UART2_TxChar(*str++);
	}
}

char UART2_RxChar(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE));
 8000f28:	bf00      	nop
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <UART2_RxChar+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <UART2_RxChar+0x6>
    return (char)(USART2->DR & 0xFF);
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <UART2_RxChar+0x24>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40004400 	.word	0x40004400

08000f4c <_write>:


int _write(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e009      	b.n	8000f72 <_write+0x26>
    {
        UART2_TxChar(ptr[i]);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffc4 	bl	8000ef4 <UART2_TxChar>
    for (int i = 0; i < len; i++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbf1      	blt.n	8000f5e <_write+0x12>
    }
    return len;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_read>:

int _read(int file, char *ptr, int len)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    (void)file;
    for (int i = 0; i < len; i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e015      	b.n	8000fc2 <_read+0x3e>
    {
        ptr[i] = UART2_RxChar();
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	18d4      	adds	r4, r2, r3
 8000f9c:	f7ff ffc2 	bl	8000f24 <UART2_RxChar>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	7023      	strb	r3, [r4, #0]
        if (ptr[i] == '\r')
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	d105      	bne.n	8000fbc <_read+0x38>
        {
            ptr[i] = '\n';
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	701a      	strb	r2, [r3, #0]
            break;
 8000fba:	e006      	b.n	8000fca <_read+0x46>
    for (int i = 0; i < len; i++)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dbe5      	blt.n	8000f96 <_read+0x12>
        }
    }
    return len;
 8000fca:	687b      	ldr	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}

08000fd4 <W25Q_Reset>:
	SPI2_DeselectSlave();
	delay_ms(10);
}

static void W25Q_Reset(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 8000fd8:	f7ff fdcc 	bl	8000b74 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_RESET);
 8000fdc:	2066      	movs	r0, #102	@ 0x66
 8000fde:	f7ff fde5 	bl	8000bac <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(EXECUTE_RESET);
 8000fe2:	2099      	movs	r0, #153	@ 0x99
 8000fe4:	f7ff fde2 	bl	8000bac <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 8000fe8:	f7ff fdd2 	bl	8000b90 <SPI2_DeselectSlave>
	delay_ms(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f7ff fdff 	bl	8000bf0 <delay_ms>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <W25Q_Init>:

void W25Q_Init(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
	SPI2_Init();
 8000ffa:	f7ff fd85 	bl	8000b08 <SPI2_Init>
	W25Q_Reset();
 8000ffe:	f7ff ffe9 	bl	8000fd4 <W25Q_Reset>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}

08001006 <W25Q_ReadData>:
	SPI2_DeselectSlave();
	return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | (id[3]));
}

void W25Q_ReadData(uint32_t startPage, uint8_t offset, uint8_t *buffer, uint16_t length)
{
 8001006:	b590      	push	{r4, r7, lr}
 8001008:	b087      	sub	sp, #28
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	461a      	mov	r2, r3
 8001012:	460b      	mov	r3, r1
 8001014:	72fb      	strb	r3, [r7, #11]
 8001016:	4613      	mov	r3, r2
 8001018:	813b      	strh	r3, [r7, #8]
	uint32_t memAddress = (startPage * 256) + offset;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	021a      	lsls	r2, r3, #8
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	4413      	add	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

	SPI2_SelectSlave();
 8001024:	f7ff fda6 	bl	8000b74 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(NORMAL_READ);
 8001028:	2003      	movs	r0, #3
 800102a:	f7ff fdbf 	bl	8000bac <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 16) & 0xFF);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	0c1b      	lsrs	r3, r3, #16
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fdb9 	bl	8000bac <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 8) & 0xFF);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fdb3 	bl	8000bac <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(memAddress & 0xFF);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fdae 	bl	8000bac <SPI2_TransmitReceiveByte>
	for (uint16_t i = 0; i < length; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	82fb      	strh	r3, [r7, #22]
 8001054:	e00a      	b.n	800106c <W25Q_ReadData+0x66>
	{
		// Send dummy byte and receive data
		buffer[i] = SPI2_TransmitReceiveByte(0xFF);
 8001056:	8afb      	ldrh	r3, [r7, #22]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	18d4      	adds	r4, r2, r3
 800105c:	20ff      	movs	r0, #255	@ 0xff
 800105e:	f7ff fda5 	bl	8000bac <SPI2_TransmitReceiveByte>
 8001062:	4603      	mov	r3, r0
 8001064:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < length; i++)
 8001066:	8afb      	ldrh	r3, [r7, #22]
 8001068:	3301      	adds	r3, #1
 800106a:	82fb      	strh	r3, [r7, #22]
 800106c:	8afa      	ldrh	r2, [r7, #22]
 800106e:	893b      	ldrh	r3, [r7, #8]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3f0      	bcc.n	8001056 <W25Q_ReadData+0x50>
	}
	SPI2_DeselectSlave();
 8001074:	f7ff fd8c 	bl	8000b90 <SPI2_DeselectSlave>
}
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}

08001080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001082:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001084:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	@ (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ae:	f000 fbe9 	bl	8001884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fc35 	bl	8000920 <main>

080010b6 <LoopForever>:

LoopForever:
  b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   r0, =_estack
 80010b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010c4:	08002c78 	.word	0x08002c78
  ldr r2, =_sbss
 80010c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010cc:	20000298 	.word	0x20000298

080010d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>

080010d2 <atoi>:
 80010d2:	220a      	movs	r2, #10
 80010d4:	2100      	movs	r1, #0
 80010d6:	f000 b87b 	b.w	80011d0 <strtol>
	...

080010dc <_strtol_l.constprop.0>:
 80010dc:	2b24      	cmp	r3, #36	@ 0x24
 80010de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e2:	4686      	mov	lr, r0
 80010e4:	4690      	mov	r8, r2
 80010e6:	d801      	bhi.n	80010ec <_strtol_l.constprop.0+0x10>
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d106      	bne.n	80010fa <_strtol_l.constprop.0+0x1e>
 80010ec:	f000 fbc4 	bl	8001878 <__errno>
 80010f0:	2316      	movs	r3, #22
 80010f2:	6003      	str	r3, [r0, #0]
 80010f4:	2000      	movs	r0, #0
 80010f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fa:	4834      	ldr	r0, [pc, #208]	@ (80011cc <_strtol_l.constprop.0+0xf0>)
 80010fc:	460d      	mov	r5, r1
 80010fe:	462a      	mov	r2, r5
 8001100:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001104:	5d06      	ldrb	r6, [r0, r4]
 8001106:	f016 0608 	ands.w	r6, r6, #8
 800110a:	d1f8      	bne.n	80010fe <_strtol_l.constprop.0+0x22>
 800110c:	2c2d      	cmp	r4, #45	@ 0x2d
 800110e:	d12d      	bne.n	800116c <_strtol_l.constprop.0+0x90>
 8001110:	782c      	ldrb	r4, [r5, #0]
 8001112:	2601      	movs	r6, #1
 8001114:	1c95      	adds	r5, r2, #2
 8001116:	f033 0210 	bics.w	r2, r3, #16
 800111a:	d109      	bne.n	8001130 <_strtol_l.constprop.0+0x54>
 800111c:	2c30      	cmp	r4, #48	@ 0x30
 800111e:	d12a      	bne.n	8001176 <_strtol_l.constprop.0+0x9a>
 8001120:	782a      	ldrb	r2, [r5, #0]
 8001122:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001126:	2a58      	cmp	r2, #88	@ 0x58
 8001128:	d125      	bne.n	8001176 <_strtol_l.constprop.0+0x9a>
 800112a:	786c      	ldrb	r4, [r5, #1]
 800112c:	2310      	movs	r3, #16
 800112e:	3502      	adds	r5, #2
 8001130:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001134:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001138:	2200      	movs	r2, #0
 800113a:	fbbc f9f3 	udiv	r9, ip, r3
 800113e:	4610      	mov	r0, r2
 8001140:	fb03 ca19 	mls	sl, r3, r9, ip
 8001144:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001148:	2f09      	cmp	r7, #9
 800114a:	d81b      	bhi.n	8001184 <_strtol_l.constprop.0+0xa8>
 800114c:	463c      	mov	r4, r7
 800114e:	42a3      	cmp	r3, r4
 8001150:	dd27      	ble.n	80011a2 <_strtol_l.constprop.0+0xc6>
 8001152:	1c57      	adds	r7, r2, #1
 8001154:	d007      	beq.n	8001166 <_strtol_l.constprop.0+0x8a>
 8001156:	4581      	cmp	r9, r0
 8001158:	d320      	bcc.n	800119c <_strtol_l.constprop.0+0xc0>
 800115a:	d101      	bne.n	8001160 <_strtol_l.constprop.0+0x84>
 800115c:	45a2      	cmp	sl, r4
 800115e:	db1d      	blt.n	800119c <_strtol_l.constprop.0+0xc0>
 8001160:	fb00 4003 	mla	r0, r0, r3, r4
 8001164:	2201      	movs	r2, #1
 8001166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800116a:	e7eb      	b.n	8001144 <_strtol_l.constprop.0+0x68>
 800116c:	2c2b      	cmp	r4, #43	@ 0x2b
 800116e:	bf04      	itt	eq
 8001170:	782c      	ldrbeq	r4, [r5, #0]
 8001172:	1c95      	addeq	r5, r2, #2
 8001174:	e7cf      	b.n	8001116 <_strtol_l.constprop.0+0x3a>
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1da      	bne.n	8001130 <_strtol_l.constprop.0+0x54>
 800117a:	2c30      	cmp	r4, #48	@ 0x30
 800117c:	bf0c      	ite	eq
 800117e:	2308      	moveq	r3, #8
 8001180:	230a      	movne	r3, #10
 8001182:	e7d5      	b.n	8001130 <_strtol_l.constprop.0+0x54>
 8001184:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001188:	2f19      	cmp	r7, #25
 800118a:	d801      	bhi.n	8001190 <_strtol_l.constprop.0+0xb4>
 800118c:	3c37      	subs	r4, #55	@ 0x37
 800118e:	e7de      	b.n	800114e <_strtol_l.constprop.0+0x72>
 8001190:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001194:	2f19      	cmp	r7, #25
 8001196:	d804      	bhi.n	80011a2 <_strtol_l.constprop.0+0xc6>
 8001198:	3c57      	subs	r4, #87	@ 0x57
 800119a:	e7d8      	b.n	800114e <_strtol_l.constprop.0+0x72>
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	e7e1      	b.n	8001166 <_strtol_l.constprop.0+0x8a>
 80011a2:	1c53      	adds	r3, r2, #1
 80011a4:	d108      	bne.n	80011b8 <_strtol_l.constprop.0+0xdc>
 80011a6:	2322      	movs	r3, #34	@ 0x22
 80011a8:	f8ce 3000 	str.w	r3, [lr]
 80011ac:	4660      	mov	r0, ip
 80011ae:	f1b8 0f00 	cmp.w	r8, #0
 80011b2:	d0a0      	beq.n	80010f6 <_strtol_l.constprop.0+0x1a>
 80011b4:	1e69      	subs	r1, r5, #1
 80011b6:	e006      	b.n	80011c6 <_strtol_l.constprop.0+0xea>
 80011b8:	b106      	cbz	r6, 80011bc <_strtol_l.constprop.0+0xe0>
 80011ba:	4240      	negs	r0, r0
 80011bc:	f1b8 0f00 	cmp.w	r8, #0
 80011c0:	d099      	beq.n	80010f6 <_strtol_l.constprop.0+0x1a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d1f6      	bne.n	80011b4 <_strtol_l.constprop.0+0xd8>
 80011c6:	f8c8 1000 	str.w	r1, [r8]
 80011ca:	e794      	b.n	80010f6 <_strtol_l.constprop.0+0x1a>
 80011cc:	08002b34 	.word	0x08002b34

080011d0 <strtol>:
 80011d0:	4613      	mov	r3, r2
 80011d2:	460a      	mov	r2, r1
 80011d4:	4601      	mov	r1, r0
 80011d6:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <strtol+0x10>)
 80011d8:	6800      	ldr	r0, [r0, #0]
 80011da:	f7ff bf7f 	b.w	80010dc <_strtol_l.constprop.0>
 80011de:	bf00      	nop
 80011e0:	20000010 	.word	0x20000010

080011e4 <_fgets_r>:
 80011e4:	2a01      	cmp	r2, #1
 80011e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ea:	4681      	mov	r9, r0
 80011ec:	460e      	mov	r6, r1
 80011ee:	4615      	mov	r5, r2
 80011f0:	461c      	mov	r4, r3
 80011f2:	dd21      	ble.n	8001238 <_fgets_r+0x54>
 80011f4:	b118      	cbz	r0, 80011fe <_fgets_r+0x1a>
 80011f6:	6a03      	ldr	r3, [r0, #32]
 80011f8:	b90b      	cbnz	r3, 80011fe <_fgets_r+0x1a>
 80011fa:	f000 f8ef 	bl	80013dc <__sinit>
 80011fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001200:	07db      	lsls	r3, r3, #31
 8001202:	d405      	bmi.n	8001210 <_fgets_r+0x2c>
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	059f      	lsls	r7, r3, #22
 8001208:	d402      	bmi.n	8001210 <_fgets_r+0x2c>
 800120a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800120c:	f000 fb5f 	bl	80018ce <__retarget_lock_acquire_recursive>
 8001210:	3d01      	subs	r5, #1
 8001212:	4637      	mov	r7, r6
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	b99b      	cbnz	r3, 8001240 <_fgets_r+0x5c>
 8001218:	4621      	mov	r1, r4
 800121a:	4648      	mov	r0, r9
 800121c:	f000 f992 	bl	8001544 <__srefill_r>
 8001220:	b168      	cbz	r0, 800123e <_fgets_r+0x5a>
 8001222:	42b7      	cmp	r7, r6
 8001224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001226:	d139      	bne.n	800129c <_fgets_r+0xb8>
 8001228:	07d8      	lsls	r0, r3, #31
 800122a:	d405      	bmi.n	8001238 <_fgets_r+0x54>
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	0599      	lsls	r1, r3, #22
 8001230:	d402      	bmi.n	8001238 <_fgets_r+0x54>
 8001232:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001234:	f000 fb4c 	bl	80018d0 <__retarget_lock_release_recursive>
 8001238:	2000      	movs	r0, #0
 800123a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	f8d4 a000 	ldr.w	sl, [r4]
 8001244:	42ab      	cmp	r3, r5
 8001246:	bf28      	it	cs
 8001248:	462b      	movcs	r3, r5
 800124a:	461a      	mov	r2, r3
 800124c:	210a      	movs	r1, #10
 800124e:	4650      	mov	r0, sl
 8001250:	4698      	mov	r8, r3
 8001252:	f7fe ffc5 	bl	80001e0 <memchr>
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	b188      	cbz	r0, 800127e <_fgets_r+0x9a>
 800125a:	3001      	adds	r0, #1
 800125c:	eba0 050a 	sub.w	r5, r0, sl
 8001260:	1b5b      	subs	r3, r3, r5
 8001262:	e9c4 0300 	strd	r0, r3, [r4]
 8001266:	462a      	mov	r2, r5
 8001268:	4651      	mov	r1, sl
 800126a:	4638      	mov	r0, r7
 800126c:	f000 fb31 	bl	80018d2 <memcpy>
 8001270:	2300      	movs	r3, #0
 8001272:	557b      	strb	r3, [r7, r5]
 8001274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001276:	07da      	lsls	r2, r3, #31
 8001278:	d513      	bpl.n	80012a2 <_fgets_r+0xbe>
 800127a:	4630      	mov	r0, r6
 800127c:	e7dd      	b.n	800123a <_fgets_r+0x56>
 800127e:	eba3 0308 	sub.w	r3, r3, r8
 8001282:	6063      	str	r3, [r4, #4]
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	4443      	add	r3, r8
 8001288:	4638      	mov	r0, r7
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	4642      	mov	r2, r8
 800128e:	4651      	mov	r1, sl
 8001290:	f000 fb1f 	bl	80018d2 <memcpy>
 8001294:	ebb5 0508 	subs.w	r5, r5, r8
 8001298:	4447      	add	r7, r8
 800129a:	d1bb      	bne.n	8001214 <_fgets_r+0x30>
 800129c:	2300      	movs	r3, #0
 800129e:	703b      	strb	r3, [r7, #0]
 80012a0:	e7e8      	b.n	8001274 <_fgets_r+0x90>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	059b      	lsls	r3, r3, #22
 80012a6:	d4e8      	bmi.n	800127a <_fgets_r+0x96>
 80012a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012aa:	f000 fb11 	bl	80018d0 <__retarget_lock_release_recursive>
 80012ae:	e7e4      	b.n	800127a <_fgets_r+0x96>

080012b0 <fgets>:
 80012b0:	4613      	mov	r3, r2
 80012b2:	460a      	mov	r2, r1
 80012b4:	4601      	mov	r1, r0
 80012b6:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <fgets+0x10>)
 80012b8:	6800      	ldr	r0, [r0, #0]
 80012ba:	f7ff bf93 	b.w	80011e4 <_fgets_r>
 80012be:	bf00      	nop
 80012c0:	20000010 	.word	0x20000010

080012c4 <std>:
 80012c4:	2300      	movs	r3, #0
 80012c6:	b510      	push	{r4, lr}
 80012c8:	4604      	mov	r4, r0
 80012ca:	e9c0 3300 	strd	r3, r3, [r0]
 80012ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012d2:	6083      	str	r3, [r0, #8]
 80012d4:	8181      	strh	r1, [r0, #12]
 80012d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80012d8:	81c2      	strh	r2, [r0, #14]
 80012da:	6183      	str	r3, [r0, #24]
 80012dc:	4619      	mov	r1, r3
 80012de:	2208      	movs	r2, #8
 80012e0:	305c      	adds	r0, #92	@ 0x5c
 80012e2:	f000 fa7b 	bl	80017dc <memset>
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <std+0x58>)
 80012e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <std+0x5c>)
 80012ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <std+0x60>)
 80012f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <std+0x64>)
 80012f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <std+0x68>)
 80012f8:	6224      	str	r4, [r4, #32]
 80012fa:	429c      	cmp	r4, r3
 80012fc:	d006      	beq.n	800130c <std+0x48>
 80012fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001302:	4294      	cmp	r4, r2
 8001304:	d002      	beq.n	800130c <std+0x48>
 8001306:	33d0      	adds	r3, #208	@ 0xd0
 8001308:	429c      	cmp	r4, r3
 800130a:	d105      	bne.n	8001318 <std+0x54>
 800130c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001314:	f000 bada 	b.w	80018cc <__retarget_lock_init_recursive>
 8001318:	bd10      	pop	{r4, pc}
 800131a:	bf00      	nop
 800131c:	0800162d 	.word	0x0800162d
 8001320:	0800164f 	.word	0x0800164f
 8001324:	08001687 	.word	0x08001687
 8001328:	080016ab 	.word	0x080016ab
 800132c:	2000014c 	.word	0x2000014c

08001330 <stdio_exit_handler>:
 8001330:	4a02      	ldr	r2, [pc, #8]	@ (800133c <stdio_exit_handler+0xc>)
 8001332:	4903      	ldr	r1, [pc, #12]	@ (8001340 <stdio_exit_handler+0x10>)
 8001334:	4803      	ldr	r0, [pc, #12]	@ (8001344 <stdio_exit_handler+0x14>)
 8001336:	f000 b869 	b.w	800140c <_fwalk_sglue>
 800133a:	bf00      	nop
 800133c:	20000004 	.word	0x20000004
 8001340:	08002189 	.word	0x08002189
 8001344:	20000014 	.word	0x20000014

08001348 <cleanup_stdio>:
 8001348:	6841      	ldr	r1, [r0, #4]
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <cleanup_stdio+0x34>)
 800134c:	4299      	cmp	r1, r3
 800134e:	b510      	push	{r4, lr}
 8001350:	4604      	mov	r4, r0
 8001352:	d001      	beq.n	8001358 <cleanup_stdio+0x10>
 8001354:	f000 ff18 	bl	8002188 <_fflush_r>
 8001358:	68a1      	ldr	r1, [r4, #8]
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <cleanup_stdio+0x38>)
 800135c:	4299      	cmp	r1, r3
 800135e:	d002      	beq.n	8001366 <cleanup_stdio+0x1e>
 8001360:	4620      	mov	r0, r4
 8001362:	f000 ff11 	bl	8002188 <_fflush_r>
 8001366:	68e1      	ldr	r1, [r4, #12]
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <cleanup_stdio+0x3c>)
 800136a:	4299      	cmp	r1, r3
 800136c:	d004      	beq.n	8001378 <cleanup_stdio+0x30>
 800136e:	4620      	mov	r0, r4
 8001370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001374:	f000 bf08 	b.w	8002188 <_fflush_r>
 8001378:	bd10      	pop	{r4, pc}
 800137a:	bf00      	nop
 800137c:	2000014c 	.word	0x2000014c
 8001380:	200001b4 	.word	0x200001b4
 8001384:	2000021c 	.word	0x2000021c

08001388 <global_stdio_init.part.0>:
 8001388:	b510      	push	{r4, lr}
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <global_stdio_init.part.0+0x30>)
 800138c:	4c0b      	ldr	r4, [pc, #44]	@ (80013bc <global_stdio_init.part.0+0x34>)
 800138e:	4a0c      	ldr	r2, [pc, #48]	@ (80013c0 <global_stdio_init.part.0+0x38>)
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4620      	mov	r0, r4
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	f7ff ff94 	bl	80012c4 <std>
 800139c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80013a0:	2201      	movs	r2, #1
 80013a2:	2109      	movs	r1, #9
 80013a4:	f7ff ff8e 	bl	80012c4 <std>
 80013a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80013ac:	2202      	movs	r2, #2
 80013ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013b2:	2112      	movs	r1, #18
 80013b4:	f7ff bf86 	b.w	80012c4 <std>
 80013b8:	20000284 	.word	0x20000284
 80013bc:	2000014c 	.word	0x2000014c
 80013c0:	08001331 	.word	0x08001331

080013c4 <__sfp_lock_acquire>:
 80013c4:	4801      	ldr	r0, [pc, #4]	@ (80013cc <__sfp_lock_acquire+0x8>)
 80013c6:	f000 ba82 	b.w	80018ce <__retarget_lock_acquire_recursive>
 80013ca:	bf00      	nop
 80013cc:	2000028d 	.word	0x2000028d

080013d0 <__sfp_lock_release>:
 80013d0:	4801      	ldr	r0, [pc, #4]	@ (80013d8 <__sfp_lock_release+0x8>)
 80013d2:	f000 ba7d 	b.w	80018d0 <__retarget_lock_release_recursive>
 80013d6:	bf00      	nop
 80013d8:	2000028d 	.word	0x2000028d

080013dc <__sinit>:
 80013dc:	b510      	push	{r4, lr}
 80013de:	4604      	mov	r4, r0
 80013e0:	f7ff fff0 	bl	80013c4 <__sfp_lock_acquire>
 80013e4:	6a23      	ldr	r3, [r4, #32]
 80013e6:	b11b      	cbz	r3, 80013f0 <__sinit+0x14>
 80013e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013ec:	f7ff bff0 	b.w	80013d0 <__sfp_lock_release>
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <__sinit+0x28>)
 80013f2:	6223      	str	r3, [r4, #32]
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__sinit+0x2c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f5      	bne.n	80013e8 <__sinit+0xc>
 80013fc:	f7ff ffc4 	bl	8001388 <global_stdio_init.part.0>
 8001400:	e7f2      	b.n	80013e8 <__sinit+0xc>
 8001402:	bf00      	nop
 8001404:	08001349 	.word	0x08001349
 8001408:	20000284 	.word	0x20000284

0800140c <_fwalk_sglue>:
 800140c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001410:	4607      	mov	r7, r0
 8001412:	4688      	mov	r8, r1
 8001414:	4614      	mov	r4, r2
 8001416:	2600      	movs	r6, #0
 8001418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800141c:	f1b9 0901 	subs.w	r9, r9, #1
 8001420:	d505      	bpl.n	800142e <_fwalk_sglue+0x22>
 8001422:	6824      	ldr	r4, [r4, #0]
 8001424:	2c00      	cmp	r4, #0
 8001426:	d1f7      	bne.n	8001418 <_fwalk_sglue+0xc>
 8001428:	4630      	mov	r0, r6
 800142a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800142e:	89ab      	ldrh	r3, [r5, #12]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d907      	bls.n	8001444 <_fwalk_sglue+0x38>
 8001434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001438:	3301      	adds	r3, #1
 800143a:	d003      	beq.n	8001444 <_fwalk_sglue+0x38>
 800143c:	4629      	mov	r1, r5
 800143e:	4638      	mov	r0, r7
 8001440:	47c0      	blx	r8
 8001442:	4306      	orrs	r6, r0
 8001444:	3568      	adds	r5, #104	@ 0x68
 8001446:	e7e9      	b.n	800141c <_fwalk_sglue+0x10>

08001448 <iprintf>:
 8001448:	b40f      	push	{r0, r1, r2, r3}
 800144a:	b507      	push	{r0, r1, r2, lr}
 800144c:	4906      	ldr	r1, [pc, #24]	@ (8001468 <iprintf+0x20>)
 800144e:	ab04      	add	r3, sp, #16
 8001450:	6808      	ldr	r0, [r1, #0]
 8001452:	f853 2b04 	ldr.w	r2, [r3], #4
 8001456:	6881      	ldr	r1, [r0, #8]
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f000 fb6b 	bl	8001b34 <_vfiprintf_r>
 800145e:	b003      	add	sp, #12
 8001460:	f85d eb04 	ldr.w	lr, [sp], #4
 8001464:	b004      	add	sp, #16
 8001466:	4770      	bx	lr
 8001468:	20000010 	.word	0x20000010

0800146c <_puts_r>:
 800146c:	6a03      	ldr	r3, [r0, #32]
 800146e:	b570      	push	{r4, r5, r6, lr}
 8001470:	6884      	ldr	r4, [r0, #8]
 8001472:	4605      	mov	r5, r0
 8001474:	460e      	mov	r6, r1
 8001476:	b90b      	cbnz	r3, 800147c <_puts_r+0x10>
 8001478:	f7ff ffb0 	bl	80013dc <__sinit>
 800147c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800147e:	07db      	lsls	r3, r3, #31
 8001480:	d405      	bmi.n	800148e <_puts_r+0x22>
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	0598      	lsls	r0, r3, #22
 8001486:	d402      	bmi.n	800148e <_puts_r+0x22>
 8001488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800148a:	f000 fa20 	bl	80018ce <__retarget_lock_acquire_recursive>
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	0719      	lsls	r1, r3, #28
 8001492:	d502      	bpl.n	800149a <_puts_r+0x2e>
 8001494:	6923      	ldr	r3, [r4, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d135      	bne.n	8001506 <_puts_r+0x9a>
 800149a:	4621      	mov	r1, r4
 800149c:	4628      	mov	r0, r5
 800149e:	f000 f947 	bl	8001730 <__swsetup_r>
 80014a2:	b380      	cbz	r0, 8001506 <_puts_r+0x9a>
 80014a4:	f04f 35ff 	mov.w	r5, #4294967295
 80014a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80014aa:	07da      	lsls	r2, r3, #31
 80014ac:	d405      	bmi.n	80014ba <_puts_r+0x4e>
 80014ae:	89a3      	ldrh	r3, [r4, #12]
 80014b0:	059b      	lsls	r3, r3, #22
 80014b2:	d402      	bmi.n	80014ba <_puts_r+0x4e>
 80014b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014b6:	f000 fa0b 	bl	80018d0 <__retarget_lock_release_recursive>
 80014ba:	4628      	mov	r0, r5
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da04      	bge.n	80014cc <_puts_r+0x60>
 80014c2:	69a2      	ldr	r2, [r4, #24]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dc17      	bgt.n	80014f8 <_puts_r+0x8c>
 80014c8:	290a      	cmp	r1, #10
 80014ca:	d015      	beq.n	80014f8 <_puts_r+0x8c>
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	6022      	str	r2, [r4, #0]
 80014d2:	7019      	strb	r1, [r3, #0]
 80014d4:	68a3      	ldr	r3, [r4, #8]
 80014d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014da:	3b01      	subs	r3, #1
 80014dc:	60a3      	str	r3, [r4, #8]
 80014de:	2900      	cmp	r1, #0
 80014e0:	d1ed      	bne.n	80014be <_puts_r+0x52>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da11      	bge.n	800150a <_puts_r+0x9e>
 80014e6:	4622      	mov	r2, r4
 80014e8:	210a      	movs	r1, #10
 80014ea:	4628      	mov	r0, r5
 80014ec:	f000 f8e1 	bl	80016b2 <__swbuf_r>
 80014f0:	3001      	adds	r0, #1
 80014f2:	d0d7      	beq.n	80014a4 <_puts_r+0x38>
 80014f4:	250a      	movs	r5, #10
 80014f6:	e7d7      	b.n	80014a8 <_puts_r+0x3c>
 80014f8:	4622      	mov	r2, r4
 80014fa:	4628      	mov	r0, r5
 80014fc:	f000 f8d9 	bl	80016b2 <__swbuf_r>
 8001500:	3001      	adds	r0, #1
 8001502:	d1e7      	bne.n	80014d4 <_puts_r+0x68>
 8001504:	e7ce      	b.n	80014a4 <_puts_r+0x38>
 8001506:	3e01      	subs	r6, #1
 8001508:	e7e4      	b.n	80014d4 <_puts_r+0x68>
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	6022      	str	r2, [r4, #0]
 8001510:	220a      	movs	r2, #10
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e7ee      	b.n	80014f4 <_puts_r+0x88>
	...

08001518 <puts>:
 8001518:	4b02      	ldr	r3, [pc, #8]	@ (8001524 <puts+0xc>)
 800151a:	4601      	mov	r1, r0
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f7ff bfa5 	b.w	800146c <_puts_r>
 8001522:	bf00      	nop
 8001524:	20000010 	.word	0x20000010

08001528 <lflush>:
 8001528:	898b      	ldrh	r3, [r1, #12]
 800152a:	f003 0309 	and.w	r3, r3, #9
 800152e:	2b09      	cmp	r3, #9
 8001530:	d103      	bne.n	800153a <lflush+0x12>
 8001532:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <lflush+0x18>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f000 be27 	b.w	8002188 <_fflush_r>
 800153a:	2000      	movs	r0, #0
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000010 	.word	0x20000010

08001544 <__srefill_r>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	460c      	mov	r4, r1
 8001548:	4605      	mov	r5, r0
 800154a:	b118      	cbz	r0, 8001554 <__srefill_r+0x10>
 800154c:	6a03      	ldr	r3, [r0, #32]
 800154e:	b90b      	cbnz	r3, 8001554 <__srefill_r+0x10>
 8001550:	f7ff ff44 	bl	80013dc <__sinit>
 8001554:	2300      	movs	r3, #0
 8001556:	6063      	str	r3, [r4, #4]
 8001558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800155c:	069e      	lsls	r6, r3, #26
 800155e:	d408      	bmi.n	8001572 <__srefill_r+0x2e>
 8001560:	0758      	lsls	r0, r3, #29
 8001562:	d445      	bmi.n	80015f0 <__srefill_r+0xac>
 8001564:	06d9      	lsls	r1, r3, #27
 8001566:	d407      	bmi.n	8001578 <__srefill_r+0x34>
 8001568:	2209      	movs	r2, #9
 800156a:	602a      	str	r2, [r5, #0]
 800156c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001570:	81a3      	strh	r3, [r4, #12]
 8001572:	f04f 30ff 	mov.w	r0, #4294967295
 8001576:	bd70      	pop	{r4, r5, r6, pc}
 8001578:	071a      	lsls	r2, r3, #28
 800157a:	d50b      	bpl.n	8001594 <__srefill_r+0x50>
 800157c:	4621      	mov	r1, r4
 800157e:	4628      	mov	r0, r5
 8001580:	f000 fe02 	bl	8002188 <_fflush_r>
 8001584:	2800      	cmp	r0, #0
 8001586:	d1f4      	bne.n	8001572 <__srefill_r+0x2e>
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	60a0      	str	r0, [r4, #8]
 800158c:	f023 0308 	bic.w	r3, r3, #8
 8001590:	81a3      	strh	r3, [r4, #12]
 8001592:	61a0      	str	r0, [r4, #24]
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	81a3      	strh	r3, [r4, #12]
 800159c:	6923      	ldr	r3, [r4, #16]
 800159e:	b91b      	cbnz	r3, 80015a8 <__srefill_r+0x64>
 80015a0:	4621      	mov	r1, r4
 80015a2:	4628      	mov	r0, r5
 80015a4:	f000 fe3e 	bl	8002224 <__smakebuf_r>
 80015a8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80015ac:	07b3      	lsls	r3, r6, #30
 80015ae:	d00f      	beq.n	80015d0 <__srefill_r+0x8c>
 80015b0:	2301      	movs	r3, #1
 80015b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001620 <__srefill_r+0xdc>)
 80015b4:	491b      	ldr	r1, [pc, #108]	@ (8001624 <__srefill_r+0xe0>)
 80015b6:	481c      	ldr	r0, [pc, #112]	@ (8001628 <__srefill_r+0xe4>)
 80015b8:	81a3      	strh	r3, [r4, #12]
 80015ba:	f7ff ff27 	bl	800140c <_fwalk_sglue>
 80015be:	81a6      	strh	r6, [r4, #12]
 80015c0:	f006 0609 	and.w	r6, r6, #9
 80015c4:	2e09      	cmp	r6, #9
 80015c6:	d103      	bne.n	80015d0 <__srefill_r+0x8c>
 80015c8:	4621      	mov	r1, r4
 80015ca:	4628      	mov	r0, r5
 80015cc:	f000 fd58 	bl	8002080 <__sflush_r>
 80015d0:	6922      	ldr	r2, [r4, #16]
 80015d2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80015d4:	6963      	ldr	r3, [r4, #20]
 80015d6:	6a21      	ldr	r1, [r4, #32]
 80015d8:	6022      	str	r2, [r4, #0]
 80015da:	4628      	mov	r0, r5
 80015dc:	47b0      	blx	r6
 80015de:	2800      	cmp	r0, #0
 80015e0:	6060      	str	r0, [r4, #4]
 80015e2:	dc17      	bgt.n	8001614 <__srefill_r+0xd0>
 80015e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015e8:	d116      	bne.n	8001618 <__srefill_r+0xd4>
 80015ea:	f043 0320 	orr.w	r3, r3, #32
 80015ee:	e7bf      	b.n	8001570 <__srefill_r+0x2c>
 80015f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015f2:	2900      	cmp	r1, #0
 80015f4:	d0d2      	beq.n	800159c <__srefill_r+0x58>
 80015f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d002      	beq.n	8001604 <__srefill_r+0xc0>
 80015fe:	4628      	mov	r0, r5
 8001600:	f000 f976 	bl	80018f0 <_free_r>
 8001604:	2300      	movs	r3, #0
 8001606:	6363      	str	r3, [r4, #52]	@ 0x34
 8001608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800160a:	6063      	str	r3, [r4, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0c5      	beq.n	800159c <__srefill_r+0x58>
 8001610:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001612:	6023      	str	r3, [r4, #0]
 8001614:	2000      	movs	r0, #0
 8001616:	e7ae      	b.n	8001576 <__srefill_r+0x32>
 8001618:	2200      	movs	r2, #0
 800161a:	6062      	str	r2, [r4, #4]
 800161c:	e7a6      	b.n	800156c <__srefill_r+0x28>
 800161e:	bf00      	nop
 8001620:	20000004 	.word	0x20000004
 8001624:	08001529 	.word	0x08001529
 8001628:	20000014 	.word	0x20000014

0800162c <__sread>:
 800162c:	b510      	push	{r4, lr}
 800162e:	460c      	mov	r4, r1
 8001630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001634:	f000 f8fc 	bl	8001830 <_read_r>
 8001638:	2800      	cmp	r0, #0
 800163a:	bfab      	itete	ge
 800163c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800163e:	89a3      	ldrhlt	r3, [r4, #12]
 8001640:	181b      	addge	r3, r3, r0
 8001642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001646:	bfac      	ite	ge
 8001648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800164a:	81a3      	strhlt	r3, [r4, #12]
 800164c:	bd10      	pop	{r4, pc}

0800164e <__swrite>:
 800164e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001652:	461f      	mov	r7, r3
 8001654:	898b      	ldrh	r3, [r1, #12]
 8001656:	05db      	lsls	r3, r3, #23
 8001658:	4605      	mov	r5, r0
 800165a:	460c      	mov	r4, r1
 800165c:	4616      	mov	r6, r2
 800165e:	d505      	bpl.n	800166c <__swrite+0x1e>
 8001660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001664:	2302      	movs	r3, #2
 8001666:	2200      	movs	r2, #0
 8001668:	f000 f8d0 	bl	800180c <_lseek_r>
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001676:	81a3      	strh	r3, [r4, #12]
 8001678:	4632      	mov	r2, r6
 800167a:	463b      	mov	r3, r7
 800167c:	4628      	mov	r0, r5
 800167e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001682:	f000 b8e7 	b.w	8001854 <_write_r>

08001686 <__sseek>:
 8001686:	b510      	push	{r4, lr}
 8001688:	460c      	mov	r4, r1
 800168a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800168e:	f000 f8bd 	bl	800180c <_lseek_r>
 8001692:	1c43      	adds	r3, r0, #1
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	bf15      	itete	ne
 8001698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800169a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800169e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80016a2:	81a3      	strheq	r3, [r4, #12]
 80016a4:	bf18      	it	ne
 80016a6:	81a3      	strhne	r3, [r4, #12]
 80016a8:	bd10      	pop	{r4, pc}

080016aa <__sclose>:
 80016aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ae:	f000 b89d 	b.w	80017ec <_close_r>

080016b2 <__swbuf_r>:
 80016b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b4:	460e      	mov	r6, r1
 80016b6:	4614      	mov	r4, r2
 80016b8:	4605      	mov	r5, r0
 80016ba:	b118      	cbz	r0, 80016c4 <__swbuf_r+0x12>
 80016bc:	6a03      	ldr	r3, [r0, #32]
 80016be:	b90b      	cbnz	r3, 80016c4 <__swbuf_r+0x12>
 80016c0:	f7ff fe8c 	bl	80013dc <__sinit>
 80016c4:	69a3      	ldr	r3, [r4, #24]
 80016c6:	60a3      	str	r3, [r4, #8]
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	071a      	lsls	r2, r3, #28
 80016cc:	d501      	bpl.n	80016d2 <__swbuf_r+0x20>
 80016ce:	6923      	ldr	r3, [r4, #16]
 80016d0:	b943      	cbnz	r3, 80016e4 <__swbuf_r+0x32>
 80016d2:	4621      	mov	r1, r4
 80016d4:	4628      	mov	r0, r5
 80016d6:	f000 f82b 	bl	8001730 <__swsetup_r>
 80016da:	b118      	cbz	r0, 80016e4 <__swbuf_r+0x32>
 80016dc:	f04f 37ff 	mov.w	r7, #4294967295
 80016e0:	4638      	mov	r0, r7
 80016e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	6922      	ldr	r2, [r4, #16]
 80016e8:	1a98      	subs	r0, r3, r2
 80016ea:	6963      	ldr	r3, [r4, #20]
 80016ec:	b2f6      	uxtb	r6, r6
 80016ee:	4283      	cmp	r3, r0
 80016f0:	4637      	mov	r7, r6
 80016f2:	dc05      	bgt.n	8001700 <__swbuf_r+0x4e>
 80016f4:	4621      	mov	r1, r4
 80016f6:	4628      	mov	r0, r5
 80016f8:	f000 fd46 	bl	8002188 <_fflush_r>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d1ed      	bne.n	80016dc <__swbuf_r+0x2a>
 8001700:	68a3      	ldr	r3, [r4, #8]
 8001702:	3b01      	subs	r3, #1
 8001704:	60a3      	str	r3, [r4, #8]
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	6022      	str	r2, [r4, #0]
 800170c:	701e      	strb	r6, [r3, #0]
 800170e:	6962      	ldr	r2, [r4, #20]
 8001710:	1c43      	adds	r3, r0, #1
 8001712:	429a      	cmp	r2, r3
 8001714:	d004      	beq.n	8001720 <__swbuf_r+0x6e>
 8001716:	89a3      	ldrh	r3, [r4, #12]
 8001718:	07db      	lsls	r3, r3, #31
 800171a:	d5e1      	bpl.n	80016e0 <__swbuf_r+0x2e>
 800171c:	2e0a      	cmp	r6, #10
 800171e:	d1df      	bne.n	80016e0 <__swbuf_r+0x2e>
 8001720:	4621      	mov	r1, r4
 8001722:	4628      	mov	r0, r5
 8001724:	f000 fd30 	bl	8002188 <_fflush_r>
 8001728:	2800      	cmp	r0, #0
 800172a:	d0d9      	beq.n	80016e0 <__swbuf_r+0x2e>
 800172c:	e7d6      	b.n	80016dc <__swbuf_r+0x2a>
	...

08001730 <__swsetup_r>:
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <__swsetup_r+0xa8>)
 8001734:	4605      	mov	r5, r0
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	460c      	mov	r4, r1
 800173a:	b118      	cbz	r0, 8001744 <__swsetup_r+0x14>
 800173c:	6a03      	ldr	r3, [r0, #32]
 800173e:	b90b      	cbnz	r3, 8001744 <__swsetup_r+0x14>
 8001740:	f7ff fe4c 	bl	80013dc <__sinit>
 8001744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001748:	0719      	lsls	r1, r3, #28
 800174a:	d422      	bmi.n	8001792 <__swsetup_r+0x62>
 800174c:	06da      	lsls	r2, r3, #27
 800174e:	d407      	bmi.n	8001760 <__swsetup_r+0x30>
 8001750:	2209      	movs	r2, #9
 8001752:	602a      	str	r2, [r5, #0]
 8001754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001758:	81a3      	strh	r3, [r4, #12]
 800175a:	f04f 30ff 	mov.w	r0, #4294967295
 800175e:	e033      	b.n	80017c8 <__swsetup_r+0x98>
 8001760:	0758      	lsls	r0, r3, #29
 8001762:	d512      	bpl.n	800178a <__swsetup_r+0x5a>
 8001764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001766:	b141      	cbz	r1, 800177a <__swsetup_r+0x4a>
 8001768:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800176c:	4299      	cmp	r1, r3
 800176e:	d002      	beq.n	8001776 <__swsetup_r+0x46>
 8001770:	4628      	mov	r0, r5
 8001772:	f000 f8bd 	bl	80018f0 <_free_r>
 8001776:	2300      	movs	r3, #0
 8001778:	6363      	str	r3, [r4, #52]	@ 0x34
 800177a:	89a3      	ldrh	r3, [r4, #12]
 800177c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001780:	81a3      	strh	r3, [r4, #12]
 8001782:	2300      	movs	r3, #0
 8001784:	6063      	str	r3, [r4, #4]
 8001786:	6923      	ldr	r3, [r4, #16]
 8001788:	6023      	str	r3, [r4, #0]
 800178a:	89a3      	ldrh	r3, [r4, #12]
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	6923      	ldr	r3, [r4, #16]
 8001794:	b94b      	cbnz	r3, 80017aa <__swsetup_r+0x7a>
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800179c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017a0:	d003      	beq.n	80017aa <__swsetup_r+0x7a>
 80017a2:	4621      	mov	r1, r4
 80017a4:	4628      	mov	r0, r5
 80017a6:	f000 fd3d 	bl	8002224 <__smakebuf_r>
 80017aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ae:	f013 0201 	ands.w	r2, r3, #1
 80017b2:	d00a      	beq.n	80017ca <__swsetup_r+0x9a>
 80017b4:	2200      	movs	r2, #0
 80017b6:	60a2      	str	r2, [r4, #8]
 80017b8:	6962      	ldr	r2, [r4, #20]
 80017ba:	4252      	negs	r2, r2
 80017bc:	61a2      	str	r2, [r4, #24]
 80017be:	6922      	ldr	r2, [r4, #16]
 80017c0:	b942      	cbnz	r2, 80017d4 <__swsetup_r+0xa4>
 80017c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80017c6:	d1c5      	bne.n	8001754 <__swsetup_r+0x24>
 80017c8:	bd38      	pop	{r3, r4, r5, pc}
 80017ca:	0799      	lsls	r1, r3, #30
 80017cc:	bf58      	it	pl
 80017ce:	6962      	ldrpl	r2, [r4, #20]
 80017d0:	60a2      	str	r2, [r4, #8]
 80017d2:	e7f4      	b.n	80017be <__swsetup_r+0x8e>
 80017d4:	2000      	movs	r0, #0
 80017d6:	e7f7      	b.n	80017c8 <__swsetup_r+0x98>
 80017d8:	20000010 	.word	0x20000010

080017dc <memset>:
 80017dc:	4402      	add	r2, r0
 80017de:	4603      	mov	r3, r0
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d100      	bne.n	80017e6 <memset+0xa>
 80017e4:	4770      	bx	lr
 80017e6:	f803 1b01 	strb.w	r1, [r3], #1
 80017ea:	e7f9      	b.n	80017e0 <memset+0x4>

080017ec <_close_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4d06      	ldr	r5, [pc, #24]	@ (8001808 <_close_r+0x1c>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	602b      	str	r3, [r5, #0]
 80017f8:	f7ff f898 	bl	800092c <_close>
 80017fc:	1c43      	adds	r3, r0, #1
 80017fe:	d102      	bne.n	8001806 <_close_r+0x1a>
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	b103      	cbz	r3, 8001806 <_close_r+0x1a>
 8001804:	6023      	str	r3, [r4, #0]
 8001806:	bd38      	pop	{r3, r4, r5, pc}
 8001808:	20000288 	.word	0x20000288

0800180c <_lseek_r>:
 800180c:	b538      	push	{r3, r4, r5, lr}
 800180e:	4d07      	ldr	r5, [pc, #28]	@ (800182c <_lseek_r+0x20>)
 8001810:	4604      	mov	r4, r0
 8001812:	4608      	mov	r0, r1
 8001814:	4611      	mov	r1, r2
 8001816:	2200      	movs	r2, #0
 8001818:	602a      	str	r2, [r5, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	f7ff f8ad 	bl	800097a <_lseek>
 8001820:	1c43      	adds	r3, r0, #1
 8001822:	d102      	bne.n	800182a <_lseek_r+0x1e>
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	b103      	cbz	r3, 800182a <_lseek_r+0x1e>
 8001828:	6023      	str	r3, [r4, #0]
 800182a:	bd38      	pop	{r3, r4, r5, pc}
 800182c:	20000288 	.word	0x20000288

08001830 <_read_r>:
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	4d07      	ldr	r5, [pc, #28]	@ (8001850 <_read_r+0x20>)
 8001834:	4604      	mov	r4, r0
 8001836:	4608      	mov	r0, r1
 8001838:	4611      	mov	r1, r2
 800183a:	2200      	movs	r2, #0
 800183c:	602a      	str	r2, [r5, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	f7ff fba0 	bl	8000f84 <_read>
 8001844:	1c43      	adds	r3, r0, #1
 8001846:	d102      	bne.n	800184e <_read_r+0x1e>
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	b103      	cbz	r3, 800184e <_read_r+0x1e>
 800184c:	6023      	str	r3, [r4, #0]
 800184e:	bd38      	pop	{r3, r4, r5, pc}
 8001850:	20000288 	.word	0x20000288

08001854 <_write_r>:
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4d07      	ldr	r5, [pc, #28]	@ (8001874 <_write_r+0x20>)
 8001858:	4604      	mov	r4, r0
 800185a:	4608      	mov	r0, r1
 800185c:	4611      	mov	r1, r2
 800185e:	2200      	movs	r2, #0
 8001860:	602a      	str	r2, [r5, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	f7ff fb72 	bl	8000f4c <_write>
 8001868:	1c43      	adds	r3, r0, #1
 800186a:	d102      	bne.n	8001872 <_write_r+0x1e>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	b103      	cbz	r3, 8001872 <_write_r+0x1e>
 8001870:	6023      	str	r3, [r4, #0]
 8001872:	bd38      	pop	{r3, r4, r5, pc}
 8001874:	20000288 	.word	0x20000288

08001878 <__errno>:
 8001878:	4b01      	ldr	r3, [pc, #4]	@ (8001880 <__errno+0x8>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000010 	.word	0x20000010

08001884 <__libc_init_array>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	4d0d      	ldr	r5, [pc, #52]	@ (80018bc <__libc_init_array+0x38>)
 8001888:	4c0d      	ldr	r4, [pc, #52]	@ (80018c0 <__libc_init_array+0x3c>)
 800188a:	1b64      	subs	r4, r4, r5
 800188c:	10a4      	asrs	r4, r4, #2
 800188e:	2600      	movs	r6, #0
 8001890:	42a6      	cmp	r6, r4
 8001892:	d109      	bne.n	80018a8 <__libc_init_array+0x24>
 8001894:	4d0b      	ldr	r5, [pc, #44]	@ (80018c4 <__libc_init_array+0x40>)
 8001896:	4c0c      	ldr	r4, [pc, #48]	@ (80018c8 <__libc_init_array+0x44>)
 8001898:	f000 fd32 	bl	8002300 <_init>
 800189c:	1b64      	subs	r4, r4, r5
 800189e:	10a4      	asrs	r4, r4, #2
 80018a0:	2600      	movs	r6, #0
 80018a2:	42a6      	cmp	r6, r4
 80018a4:	d105      	bne.n	80018b2 <__libc_init_array+0x2e>
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
 80018a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ac:	4798      	blx	r3
 80018ae:	3601      	adds	r6, #1
 80018b0:	e7ee      	b.n	8001890 <__libc_init_array+0xc>
 80018b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b6:	4798      	blx	r3
 80018b8:	3601      	adds	r6, #1
 80018ba:	e7f2      	b.n	80018a2 <__libc_init_array+0x1e>
 80018bc:	08002c70 	.word	0x08002c70
 80018c0:	08002c70 	.word	0x08002c70
 80018c4:	08002c70 	.word	0x08002c70
 80018c8:	08002c74 	.word	0x08002c74

080018cc <__retarget_lock_init_recursive>:
 80018cc:	4770      	bx	lr

080018ce <__retarget_lock_acquire_recursive>:
 80018ce:	4770      	bx	lr

080018d0 <__retarget_lock_release_recursive>:
 80018d0:	4770      	bx	lr

080018d2 <memcpy>:
 80018d2:	440a      	add	r2, r1
 80018d4:	4291      	cmp	r1, r2
 80018d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80018da:	d100      	bne.n	80018de <memcpy+0xc>
 80018dc:	4770      	bx	lr
 80018de:	b510      	push	{r4, lr}
 80018e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018e8:	4291      	cmp	r1, r2
 80018ea:	d1f9      	bne.n	80018e0 <memcpy+0xe>
 80018ec:	bd10      	pop	{r4, pc}
	...

080018f0 <_free_r>:
 80018f0:	b538      	push	{r3, r4, r5, lr}
 80018f2:	4605      	mov	r5, r0
 80018f4:	2900      	cmp	r1, #0
 80018f6:	d041      	beq.n	800197c <_free_r+0x8c>
 80018f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018fc:	1f0c      	subs	r4, r1, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bfb8      	it	lt
 8001902:	18e4      	addlt	r4, r4, r3
 8001904:	f000 f8e0 	bl	8001ac8 <__malloc_lock>
 8001908:	4a1d      	ldr	r2, [pc, #116]	@ (8001980 <_free_r+0x90>)
 800190a:	6813      	ldr	r3, [r2, #0]
 800190c:	b933      	cbnz	r3, 800191c <_free_r+0x2c>
 800190e:	6063      	str	r3, [r4, #4]
 8001910:	6014      	str	r4, [r2, #0]
 8001912:	4628      	mov	r0, r5
 8001914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001918:	f000 b8dc 	b.w	8001ad4 <__malloc_unlock>
 800191c:	42a3      	cmp	r3, r4
 800191e:	d908      	bls.n	8001932 <_free_r+0x42>
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	1821      	adds	r1, r4, r0
 8001924:	428b      	cmp	r3, r1
 8001926:	bf01      	itttt	eq
 8001928:	6819      	ldreq	r1, [r3, #0]
 800192a:	685b      	ldreq	r3, [r3, #4]
 800192c:	1809      	addeq	r1, r1, r0
 800192e:	6021      	streq	r1, [r4, #0]
 8001930:	e7ed      	b.n	800190e <_free_r+0x1e>
 8001932:	461a      	mov	r2, r3
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	b10b      	cbz	r3, 800193c <_free_r+0x4c>
 8001938:	42a3      	cmp	r3, r4
 800193a:	d9fa      	bls.n	8001932 <_free_r+0x42>
 800193c:	6811      	ldr	r1, [r2, #0]
 800193e:	1850      	adds	r0, r2, r1
 8001940:	42a0      	cmp	r0, r4
 8001942:	d10b      	bne.n	800195c <_free_r+0x6c>
 8001944:	6820      	ldr	r0, [r4, #0]
 8001946:	4401      	add	r1, r0
 8001948:	1850      	adds	r0, r2, r1
 800194a:	4283      	cmp	r3, r0
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	d1e0      	bne.n	8001912 <_free_r+0x22>
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	6053      	str	r3, [r2, #4]
 8001956:	4408      	add	r0, r1
 8001958:	6010      	str	r0, [r2, #0]
 800195a:	e7da      	b.n	8001912 <_free_r+0x22>
 800195c:	d902      	bls.n	8001964 <_free_r+0x74>
 800195e:	230c      	movs	r3, #12
 8001960:	602b      	str	r3, [r5, #0]
 8001962:	e7d6      	b.n	8001912 <_free_r+0x22>
 8001964:	6820      	ldr	r0, [r4, #0]
 8001966:	1821      	adds	r1, r4, r0
 8001968:	428b      	cmp	r3, r1
 800196a:	bf04      	itt	eq
 800196c:	6819      	ldreq	r1, [r3, #0]
 800196e:	685b      	ldreq	r3, [r3, #4]
 8001970:	6063      	str	r3, [r4, #4]
 8001972:	bf04      	itt	eq
 8001974:	1809      	addeq	r1, r1, r0
 8001976:	6021      	streq	r1, [r4, #0]
 8001978:	6054      	str	r4, [r2, #4]
 800197a:	e7ca      	b.n	8001912 <_free_r+0x22>
 800197c:	bd38      	pop	{r3, r4, r5, pc}
 800197e:	bf00      	nop
 8001980:	20000294 	.word	0x20000294

08001984 <sbrk_aligned>:
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	4e0f      	ldr	r6, [pc, #60]	@ (80019c4 <sbrk_aligned+0x40>)
 8001988:	460c      	mov	r4, r1
 800198a:	6831      	ldr	r1, [r6, #0]
 800198c:	4605      	mov	r5, r0
 800198e:	b911      	cbnz	r1, 8001996 <sbrk_aligned+0x12>
 8001990:	f000 fca6 	bl	80022e0 <_sbrk_r>
 8001994:	6030      	str	r0, [r6, #0]
 8001996:	4621      	mov	r1, r4
 8001998:	4628      	mov	r0, r5
 800199a:	f000 fca1 	bl	80022e0 <_sbrk_r>
 800199e:	1c43      	adds	r3, r0, #1
 80019a0:	d103      	bne.n	80019aa <sbrk_aligned+0x26>
 80019a2:	f04f 34ff 	mov.w	r4, #4294967295
 80019a6:	4620      	mov	r0, r4
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	1cc4      	adds	r4, r0, #3
 80019ac:	f024 0403 	bic.w	r4, r4, #3
 80019b0:	42a0      	cmp	r0, r4
 80019b2:	d0f8      	beq.n	80019a6 <sbrk_aligned+0x22>
 80019b4:	1a21      	subs	r1, r4, r0
 80019b6:	4628      	mov	r0, r5
 80019b8:	f000 fc92 	bl	80022e0 <_sbrk_r>
 80019bc:	3001      	adds	r0, #1
 80019be:	d1f2      	bne.n	80019a6 <sbrk_aligned+0x22>
 80019c0:	e7ef      	b.n	80019a2 <sbrk_aligned+0x1e>
 80019c2:	bf00      	nop
 80019c4:	20000290 	.word	0x20000290

080019c8 <_malloc_r>:
 80019c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019cc:	1ccd      	adds	r5, r1, #3
 80019ce:	f025 0503 	bic.w	r5, r5, #3
 80019d2:	3508      	adds	r5, #8
 80019d4:	2d0c      	cmp	r5, #12
 80019d6:	bf38      	it	cc
 80019d8:	250c      	movcc	r5, #12
 80019da:	2d00      	cmp	r5, #0
 80019dc:	4606      	mov	r6, r0
 80019de:	db01      	blt.n	80019e4 <_malloc_r+0x1c>
 80019e0:	42a9      	cmp	r1, r5
 80019e2:	d904      	bls.n	80019ee <_malloc_r+0x26>
 80019e4:	230c      	movs	r3, #12
 80019e6:	6033      	str	r3, [r6, #0]
 80019e8:	2000      	movs	r0, #0
 80019ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ac4 <_malloc_r+0xfc>
 80019f2:	f000 f869 	bl	8001ac8 <__malloc_lock>
 80019f6:	f8d8 3000 	ldr.w	r3, [r8]
 80019fa:	461c      	mov	r4, r3
 80019fc:	bb44      	cbnz	r4, 8001a50 <_malloc_r+0x88>
 80019fe:	4629      	mov	r1, r5
 8001a00:	4630      	mov	r0, r6
 8001a02:	f7ff ffbf 	bl	8001984 <sbrk_aligned>
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	4604      	mov	r4, r0
 8001a0a:	d158      	bne.n	8001abe <_malloc_r+0xf6>
 8001a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8001a10:	4627      	mov	r7, r4
 8001a12:	2f00      	cmp	r7, #0
 8001a14:	d143      	bne.n	8001a9e <_malloc_r+0xd6>
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	d04b      	beq.n	8001ab2 <_malloc_r+0xea>
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	4639      	mov	r1, r7
 8001a1e:	4630      	mov	r0, r6
 8001a20:	eb04 0903 	add.w	r9, r4, r3
 8001a24:	f000 fc5c 	bl	80022e0 <_sbrk_r>
 8001a28:	4581      	cmp	r9, r0
 8001a2a:	d142      	bne.n	8001ab2 <_malloc_r+0xea>
 8001a2c:	6821      	ldr	r1, [r4, #0]
 8001a2e:	1a6d      	subs	r5, r5, r1
 8001a30:	4629      	mov	r1, r5
 8001a32:	4630      	mov	r0, r6
 8001a34:	f7ff ffa6 	bl	8001984 <sbrk_aligned>
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d03a      	beq.n	8001ab2 <_malloc_r+0xea>
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	442b      	add	r3, r5
 8001a40:	6023      	str	r3, [r4, #0]
 8001a42:	f8d8 3000 	ldr.w	r3, [r8]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	bb62      	cbnz	r2, 8001aa4 <_malloc_r+0xdc>
 8001a4a:	f8c8 7000 	str.w	r7, [r8]
 8001a4e:	e00f      	b.n	8001a70 <_malloc_r+0xa8>
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	1b52      	subs	r2, r2, r5
 8001a54:	d420      	bmi.n	8001a98 <_malloc_r+0xd0>
 8001a56:	2a0b      	cmp	r2, #11
 8001a58:	d917      	bls.n	8001a8a <_malloc_r+0xc2>
 8001a5a:	1961      	adds	r1, r4, r5
 8001a5c:	42a3      	cmp	r3, r4
 8001a5e:	6025      	str	r5, [r4, #0]
 8001a60:	bf18      	it	ne
 8001a62:	6059      	strne	r1, [r3, #4]
 8001a64:	6863      	ldr	r3, [r4, #4]
 8001a66:	bf08      	it	eq
 8001a68:	f8c8 1000 	streq.w	r1, [r8]
 8001a6c:	5162      	str	r2, [r4, r5]
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	4630      	mov	r0, r6
 8001a72:	f000 f82f 	bl	8001ad4 <__malloc_unlock>
 8001a76:	f104 000b 	add.w	r0, r4, #11
 8001a7a:	1d23      	adds	r3, r4, #4
 8001a7c:	f020 0007 	bic.w	r0, r0, #7
 8001a80:	1ac2      	subs	r2, r0, r3
 8001a82:	bf1c      	itt	ne
 8001a84:	1a1b      	subne	r3, r3, r0
 8001a86:	50a3      	strne	r3, [r4, r2]
 8001a88:	e7af      	b.n	80019ea <_malloc_r+0x22>
 8001a8a:	6862      	ldr	r2, [r4, #4]
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	bf0c      	ite	eq
 8001a90:	f8c8 2000 	streq.w	r2, [r8]
 8001a94:	605a      	strne	r2, [r3, #4]
 8001a96:	e7eb      	b.n	8001a70 <_malloc_r+0xa8>
 8001a98:	4623      	mov	r3, r4
 8001a9a:	6864      	ldr	r4, [r4, #4]
 8001a9c:	e7ae      	b.n	80019fc <_malloc_r+0x34>
 8001a9e:	463c      	mov	r4, r7
 8001aa0:	687f      	ldr	r7, [r7, #4]
 8001aa2:	e7b6      	b.n	8001a12 <_malloc_r+0x4a>
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	d1fb      	bne.n	8001aa4 <_malloc_r+0xdc>
 8001aac:	2300      	movs	r3, #0
 8001aae:	6053      	str	r3, [r2, #4]
 8001ab0:	e7de      	b.n	8001a70 <_malloc_r+0xa8>
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	6033      	str	r3, [r6, #0]
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f000 f80c 	bl	8001ad4 <__malloc_unlock>
 8001abc:	e794      	b.n	80019e8 <_malloc_r+0x20>
 8001abe:	6005      	str	r5, [r0, #0]
 8001ac0:	e7d6      	b.n	8001a70 <_malloc_r+0xa8>
 8001ac2:	bf00      	nop
 8001ac4:	20000294 	.word	0x20000294

08001ac8 <__malloc_lock>:
 8001ac8:	4801      	ldr	r0, [pc, #4]	@ (8001ad0 <__malloc_lock+0x8>)
 8001aca:	f7ff bf00 	b.w	80018ce <__retarget_lock_acquire_recursive>
 8001ace:	bf00      	nop
 8001ad0:	2000028c 	.word	0x2000028c

08001ad4 <__malloc_unlock>:
 8001ad4:	4801      	ldr	r0, [pc, #4]	@ (8001adc <__malloc_unlock+0x8>)
 8001ad6:	f7ff befb 	b.w	80018d0 <__retarget_lock_release_recursive>
 8001ada:	bf00      	nop
 8001adc:	2000028c 	.word	0x2000028c

08001ae0 <__sfputc_r>:
 8001ae0:	6893      	ldr	r3, [r2, #8]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	b410      	push	{r4}
 8001ae8:	6093      	str	r3, [r2, #8]
 8001aea:	da08      	bge.n	8001afe <__sfputc_r+0x1e>
 8001aec:	6994      	ldr	r4, [r2, #24]
 8001aee:	42a3      	cmp	r3, r4
 8001af0:	db01      	blt.n	8001af6 <__sfputc_r+0x16>
 8001af2:	290a      	cmp	r1, #10
 8001af4:	d103      	bne.n	8001afe <__sfputc_r+0x1e>
 8001af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001afa:	f7ff bdda 	b.w	80016b2 <__swbuf_r>
 8001afe:	6813      	ldr	r3, [r2, #0]
 8001b00:	1c58      	adds	r0, r3, #1
 8001b02:	6010      	str	r0, [r2, #0]
 8001b04:	7019      	strb	r1, [r3, #0]
 8001b06:	4608      	mov	r0, r1
 8001b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <__sfputs_r>:
 8001b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b10:	4606      	mov	r6, r0
 8001b12:	460f      	mov	r7, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	18d5      	adds	r5, r2, r3
 8001b18:	42ac      	cmp	r4, r5
 8001b1a:	d101      	bne.n	8001b20 <__sfputs_r+0x12>
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	e007      	b.n	8001b30 <__sfputs_r+0x22>
 8001b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b24:	463a      	mov	r2, r7
 8001b26:	4630      	mov	r0, r6
 8001b28:	f7ff ffda 	bl	8001ae0 <__sfputc_r>
 8001b2c:	1c43      	adds	r3, r0, #1
 8001b2e:	d1f3      	bne.n	8001b18 <__sfputs_r+0xa>
 8001b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b34 <_vfiprintf_r>:
 8001b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b38:	460d      	mov	r5, r1
 8001b3a:	b09d      	sub	sp, #116	@ 0x74
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	4698      	mov	r8, r3
 8001b40:	4606      	mov	r6, r0
 8001b42:	b118      	cbz	r0, 8001b4c <_vfiprintf_r+0x18>
 8001b44:	6a03      	ldr	r3, [r0, #32]
 8001b46:	b90b      	cbnz	r3, 8001b4c <_vfiprintf_r+0x18>
 8001b48:	f7ff fc48 	bl	80013dc <__sinit>
 8001b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b4e:	07d9      	lsls	r1, r3, #31
 8001b50:	d405      	bmi.n	8001b5e <_vfiprintf_r+0x2a>
 8001b52:	89ab      	ldrh	r3, [r5, #12]
 8001b54:	059a      	lsls	r2, r3, #22
 8001b56:	d402      	bmi.n	8001b5e <_vfiprintf_r+0x2a>
 8001b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b5a:	f7ff feb8 	bl	80018ce <__retarget_lock_acquire_recursive>
 8001b5e:	89ab      	ldrh	r3, [r5, #12]
 8001b60:	071b      	lsls	r3, r3, #28
 8001b62:	d501      	bpl.n	8001b68 <_vfiprintf_r+0x34>
 8001b64:	692b      	ldr	r3, [r5, #16]
 8001b66:	b99b      	cbnz	r3, 8001b90 <_vfiprintf_r+0x5c>
 8001b68:	4629      	mov	r1, r5
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f7ff fde0 	bl	8001730 <__swsetup_r>
 8001b70:	b170      	cbz	r0, 8001b90 <_vfiprintf_r+0x5c>
 8001b72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b74:	07dc      	lsls	r4, r3, #31
 8001b76:	d504      	bpl.n	8001b82 <_vfiprintf_r+0x4e>
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	b01d      	add	sp, #116	@ 0x74
 8001b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b82:	89ab      	ldrh	r3, [r5, #12]
 8001b84:	0598      	lsls	r0, r3, #22
 8001b86:	d4f7      	bmi.n	8001b78 <_vfiprintf_r+0x44>
 8001b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b8a:	f7ff fea1 	bl	80018d0 <__retarget_lock_release_recursive>
 8001b8e:	e7f3      	b.n	8001b78 <_vfiprintf_r+0x44>
 8001b90:	2300      	movs	r3, #0
 8001b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b94:	2320      	movs	r3, #32
 8001b96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b9e:	2330      	movs	r3, #48	@ 0x30
 8001ba0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001d50 <_vfiprintf_r+0x21c>
 8001ba4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ba8:	f04f 0901 	mov.w	r9, #1
 8001bac:	4623      	mov	r3, r4
 8001bae:	469a      	mov	sl, r3
 8001bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bb4:	b10a      	cbz	r2, 8001bba <_vfiprintf_r+0x86>
 8001bb6:	2a25      	cmp	r2, #37	@ 0x25
 8001bb8:	d1f9      	bne.n	8001bae <_vfiprintf_r+0x7a>
 8001bba:	ebba 0b04 	subs.w	fp, sl, r4
 8001bbe:	d00b      	beq.n	8001bd8 <_vfiprintf_r+0xa4>
 8001bc0:	465b      	mov	r3, fp
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f7ff ffa1 	bl	8001b0e <__sfputs_r>
 8001bcc:	3001      	adds	r0, #1
 8001bce:	f000 80a7 	beq.w	8001d20 <_vfiprintf_r+0x1ec>
 8001bd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001bd4:	445a      	add	r2, fp
 8001bd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8001bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 809f 	beq.w	8001d20 <_vfiprintf_r+0x1ec>
 8001be2:	2300      	movs	r3, #0
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bec:	f10a 0a01 	add.w	sl, sl, #1
 8001bf0:	9304      	str	r3, [sp, #16]
 8001bf2:	9307      	str	r3, [sp, #28]
 8001bf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001bf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8001bfa:	4654      	mov	r4, sl
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c02:	4853      	ldr	r0, [pc, #332]	@ (8001d50 <_vfiprintf_r+0x21c>)
 8001c04:	f7fe faec 	bl	80001e0 <memchr>
 8001c08:	9a04      	ldr	r2, [sp, #16]
 8001c0a:	b9d8      	cbnz	r0, 8001c44 <_vfiprintf_r+0x110>
 8001c0c:	06d1      	lsls	r1, r2, #27
 8001c0e:	bf44      	itt	mi
 8001c10:	2320      	movmi	r3, #32
 8001c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c16:	0713      	lsls	r3, r2, #28
 8001c18:	bf44      	itt	mi
 8001c1a:	232b      	movmi	r3, #43	@ 0x2b
 8001c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c20:	f89a 3000 	ldrb.w	r3, [sl]
 8001c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c26:	d015      	beq.n	8001c54 <_vfiprintf_r+0x120>
 8001c28:	9a07      	ldr	r2, [sp, #28]
 8001c2a:	4654      	mov	r4, sl
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f04f 0c0a 	mov.w	ip, #10
 8001c32:	4621      	mov	r1, r4
 8001c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c38:	3b30      	subs	r3, #48	@ 0x30
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	d94b      	bls.n	8001cd6 <_vfiprintf_r+0x1a2>
 8001c3e:	b1b0      	cbz	r0, 8001c6e <_vfiprintf_r+0x13a>
 8001c40:	9207      	str	r2, [sp, #28]
 8001c42:	e014      	b.n	8001c6e <_vfiprintf_r+0x13a>
 8001c44:	eba0 0308 	sub.w	r3, r0, r8
 8001c48:	fa09 f303 	lsl.w	r3, r9, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	9304      	str	r3, [sp, #16]
 8001c50:	46a2      	mov	sl, r4
 8001c52:	e7d2      	b.n	8001bfa <_vfiprintf_r+0xc6>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	1d19      	adds	r1, r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	9103      	str	r1, [sp, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bfbb      	ittet	lt
 8001c60:	425b      	neglt	r3, r3
 8001c62:	f042 0202 	orrlt.w	r2, r2, #2
 8001c66:	9307      	strge	r3, [sp, #28]
 8001c68:	9307      	strlt	r3, [sp, #28]
 8001c6a:	bfb8      	it	lt
 8001c6c:	9204      	strlt	r2, [sp, #16]
 8001c6e:	7823      	ldrb	r3, [r4, #0]
 8001c70:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c72:	d10a      	bne.n	8001c8a <_vfiprintf_r+0x156>
 8001c74:	7863      	ldrb	r3, [r4, #1]
 8001c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c78:	d132      	bne.n	8001ce0 <_vfiprintf_r+0x1ac>
 8001c7a:	9b03      	ldr	r3, [sp, #12]
 8001c7c:	1d1a      	adds	r2, r3, #4
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	9203      	str	r2, [sp, #12]
 8001c82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c86:	3402      	adds	r4, #2
 8001c88:	9305      	str	r3, [sp, #20]
 8001c8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001d60 <_vfiprintf_r+0x22c>
 8001c8e:	7821      	ldrb	r1, [r4, #0]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4650      	mov	r0, sl
 8001c94:	f7fe faa4 	bl	80001e0 <memchr>
 8001c98:	b138      	cbz	r0, 8001caa <_vfiprintf_r+0x176>
 8001c9a:	9b04      	ldr	r3, [sp, #16]
 8001c9c:	eba0 000a 	sub.w	r0, r0, sl
 8001ca0:	2240      	movs	r2, #64	@ 0x40
 8001ca2:	4082      	lsls	r2, r0
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	3401      	adds	r4, #1
 8001ca8:	9304      	str	r3, [sp, #16]
 8001caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cae:	4829      	ldr	r0, [pc, #164]	@ (8001d54 <_vfiprintf_r+0x220>)
 8001cb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001cb4:	2206      	movs	r2, #6
 8001cb6:	f7fe fa93 	bl	80001e0 <memchr>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d03f      	beq.n	8001d3e <_vfiprintf_r+0x20a>
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <_vfiprintf_r+0x224>)
 8001cc0:	bb1b      	cbnz	r3, 8001d0a <_vfiprintf_r+0x1d6>
 8001cc2:	9b03      	ldr	r3, [sp, #12]
 8001cc4:	3307      	adds	r3, #7
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	3308      	adds	r3, #8
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001cd0:	443b      	add	r3, r7
 8001cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001cd4:	e76a      	b.n	8001bac <_vfiprintf_r+0x78>
 8001cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cda:	460c      	mov	r4, r1
 8001cdc:	2001      	movs	r0, #1
 8001cde:	e7a8      	b.n	8001c32 <_vfiprintf_r+0xfe>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	3401      	adds	r4, #1
 8001ce4:	9305      	str	r3, [sp, #20]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f04f 0c0a 	mov.w	ip, #10
 8001cec:	4620      	mov	r0, r4
 8001cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cf2:	3a30      	subs	r2, #48	@ 0x30
 8001cf4:	2a09      	cmp	r2, #9
 8001cf6:	d903      	bls.n	8001d00 <_vfiprintf_r+0x1cc>
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0c6      	beq.n	8001c8a <_vfiprintf_r+0x156>
 8001cfc:	9105      	str	r1, [sp, #20]
 8001cfe:	e7c4      	b.n	8001c8a <_vfiprintf_r+0x156>
 8001d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d04:	4604      	mov	r4, r0
 8001d06:	2301      	movs	r3, #1
 8001d08:	e7f0      	b.n	8001cec <_vfiprintf_r+0x1b8>
 8001d0a:	ab03      	add	r3, sp, #12
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	462a      	mov	r2, r5
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <_vfiprintf_r+0x228>)
 8001d12:	a904      	add	r1, sp, #16
 8001d14:	4630      	mov	r0, r6
 8001d16:	f3af 8000 	nop.w
 8001d1a:	4607      	mov	r7, r0
 8001d1c:	1c78      	adds	r0, r7, #1
 8001d1e:	d1d6      	bne.n	8001cce <_vfiprintf_r+0x19a>
 8001d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d22:	07d9      	lsls	r1, r3, #31
 8001d24:	d405      	bmi.n	8001d32 <_vfiprintf_r+0x1fe>
 8001d26:	89ab      	ldrh	r3, [r5, #12]
 8001d28:	059a      	lsls	r2, r3, #22
 8001d2a:	d402      	bmi.n	8001d32 <_vfiprintf_r+0x1fe>
 8001d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d2e:	f7ff fdcf 	bl	80018d0 <__retarget_lock_release_recursive>
 8001d32:	89ab      	ldrh	r3, [r5, #12]
 8001d34:	065b      	lsls	r3, r3, #25
 8001d36:	f53f af1f 	bmi.w	8001b78 <_vfiprintf_r+0x44>
 8001d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d3c:	e71e      	b.n	8001b7c <_vfiprintf_r+0x48>
 8001d3e:	ab03      	add	r3, sp, #12
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	462a      	mov	r2, r5
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <_vfiprintf_r+0x228>)
 8001d46:	a904      	add	r1, sp, #16
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f000 f879 	bl	8001e40 <_printf_i>
 8001d4e:	e7e4      	b.n	8001d1a <_vfiprintf_r+0x1e6>
 8001d50:	08002c34 	.word	0x08002c34
 8001d54:	08002c3e 	.word	0x08002c3e
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	08001b0f 	.word	0x08001b0f
 8001d60:	08002c3a 	.word	0x08002c3a

08001d64 <_printf_common>:
 8001d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d68:	4616      	mov	r6, r2
 8001d6a:	4698      	mov	r8, r3
 8001d6c:	688a      	ldr	r2, [r1, #8]
 8001d6e:	690b      	ldr	r3, [r1, #16]
 8001d70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bfb8      	it	lt
 8001d78:	4613      	movlt	r3, r2
 8001d7a:	6033      	str	r3, [r6, #0]
 8001d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d80:	4607      	mov	r7, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	b10a      	cbz	r2, 8001d8a <_printf_common+0x26>
 8001d86:	3301      	adds	r3, #1
 8001d88:	6033      	str	r3, [r6, #0]
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	0699      	lsls	r1, r3, #26
 8001d8e:	bf42      	ittt	mi
 8001d90:	6833      	ldrmi	r3, [r6, #0]
 8001d92:	3302      	addmi	r3, #2
 8001d94:	6033      	strmi	r3, [r6, #0]
 8001d96:	6825      	ldr	r5, [r4, #0]
 8001d98:	f015 0506 	ands.w	r5, r5, #6
 8001d9c:	d106      	bne.n	8001dac <_printf_common+0x48>
 8001d9e:	f104 0a19 	add.w	sl, r4, #25
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	6832      	ldr	r2, [r6, #0]
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	42ab      	cmp	r3, r5
 8001daa:	dc26      	bgt.n	8001dfa <_printf_common+0x96>
 8001dac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	3b00      	subs	r3, #0
 8001db4:	bf18      	it	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	0692      	lsls	r2, r2, #26
 8001dba:	d42b      	bmi.n	8001e14 <_printf_common+0xb0>
 8001dbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	4638      	mov	r0, r7
 8001dc4:	47c8      	blx	r9
 8001dc6:	3001      	adds	r0, #1
 8001dc8:	d01e      	beq.n	8001e08 <_printf_common+0xa4>
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	6922      	ldr	r2, [r4, #16]
 8001dce:	f003 0306 	and.w	r3, r3, #6
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf02      	ittt	eq
 8001dd6:	68e5      	ldreq	r5, [r4, #12]
 8001dd8:	6833      	ldreq	r3, [r6, #0]
 8001dda:	1aed      	subeq	r5, r5, r3
 8001ddc:	68a3      	ldr	r3, [r4, #8]
 8001dde:	bf0c      	ite	eq
 8001de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001de4:	2500      	movne	r5, #0
 8001de6:	4293      	cmp	r3, r2
 8001de8:	bfc4      	itt	gt
 8001dea:	1a9b      	subgt	r3, r3, r2
 8001dec:	18ed      	addgt	r5, r5, r3
 8001dee:	2600      	movs	r6, #0
 8001df0:	341a      	adds	r4, #26
 8001df2:	42b5      	cmp	r5, r6
 8001df4:	d11a      	bne.n	8001e2c <_printf_common+0xc8>
 8001df6:	2000      	movs	r0, #0
 8001df8:	e008      	b.n	8001e0c <_printf_common+0xa8>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4652      	mov	r2, sl
 8001dfe:	4641      	mov	r1, r8
 8001e00:	4638      	mov	r0, r7
 8001e02:	47c8      	blx	r9
 8001e04:	3001      	adds	r0, #1
 8001e06:	d103      	bne.n	8001e10 <_printf_common+0xac>
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e10:	3501      	adds	r5, #1
 8001e12:	e7c6      	b.n	8001da2 <_printf_common+0x3e>
 8001e14:	18e1      	adds	r1, r4, r3
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	2030      	movs	r0, #48	@ 0x30
 8001e1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e1e:	4422      	add	r2, r4
 8001e20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e28:	3302      	adds	r3, #2
 8001e2a:	e7c7      	b.n	8001dbc <_printf_common+0x58>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	4622      	mov	r2, r4
 8001e30:	4641      	mov	r1, r8
 8001e32:	4638      	mov	r0, r7
 8001e34:	47c8      	blx	r9
 8001e36:	3001      	adds	r0, #1
 8001e38:	d0e6      	beq.n	8001e08 <_printf_common+0xa4>
 8001e3a:	3601      	adds	r6, #1
 8001e3c:	e7d9      	b.n	8001df2 <_printf_common+0x8e>
	...

08001e40 <_printf_i>:
 8001e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e44:	7e0f      	ldrb	r7, [r1, #24]
 8001e46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e48:	2f78      	cmp	r7, #120	@ 0x78
 8001e4a:	4691      	mov	r9, r2
 8001e4c:	4680      	mov	r8, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	469a      	mov	sl, r3
 8001e52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e56:	d807      	bhi.n	8001e68 <_printf_i+0x28>
 8001e58:	2f62      	cmp	r7, #98	@ 0x62
 8001e5a:	d80a      	bhi.n	8001e72 <_printf_i+0x32>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	f000 80d2 	beq.w	8002006 <_printf_i+0x1c6>
 8001e62:	2f58      	cmp	r7, #88	@ 0x58
 8001e64:	f000 80b9 	beq.w	8001fda <_printf_i+0x19a>
 8001e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e70:	e03a      	b.n	8001ee8 <_printf_i+0xa8>
 8001e72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e76:	2b15      	cmp	r3, #21
 8001e78:	d8f6      	bhi.n	8001e68 <_printf_i+0x28>
 8001e7a:	a101      	add	r1, pc, #4	@ (adr r1, 8001e80 <_printf_i+0x40>)
 8001e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e80:	08001ed9 	.word	0x08001ed9
 8001e84:	08001eed 	.word	0x08001eed
 8001e88:	08001e69 	.word	0x08001e69
 8001e8c:	08001e69 	.word	0x08001e69
 8001e90:	08001e69 	.word	0x08001e69
 8001e94:	08001e69 	.word	0x08001e69
 8001e98:	08001eed 	.word	0x08001eed
 8001e9c:	08001e69 	.word	0x08001e69
 8001ea0:	08001e69 	.word	0x08001e69
 8001ea4:	08001e69 	.word	0x08001e69
 8001ea8:	08001e69 	.word	0x08001e69
 8001eac:	08001fed 	.word	0x08001fed
 8001eb0:	08001f17 	.word	0x08001f17
 8001eb4:	08001fa7 	.word	0x08001fa7
 8001eb8:	08001e69 	.word	0x08001e69
 8001ebc:	08001e69 	.word	0x08001e69
 8001ec0:	0800200f 	.word	0x0800200f
 8001ec4:	08001e69 	.word	0x08001e69
 8001ec8:	08001f17 	.word	0x08001f17
 8001ecc:	08001e69 	.word	0x08001e69
 8001ed0:	08001e69 	.word	0x08001e69
 8001ed4:	08001faf 	.word	0x08001faf
 8001ed8:	6833      	ldr	r3, [r6, #0]
 8001eda:	1d1a      	adds	r2, r3, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6032      	str	r2, [r6, #0]
 8001ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e09d      	b.n	8002028 <_printf_i+0x1e8>
 8001eec:	6833      	ldr	r3, [r6, #0]
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	1d19      	adds	r1, r3, #4
 8001ef2:	6031      	str	r1, [r6, #0]
 8001ef4:	0606      	lsls	r6, r0, #24
 8001ef6:	d501      	bpl.n	8001efc <_printf_i+0xbc>
 8001ef8:	681d      	ldr	r5, [r3, #0]
 8001efa:	e003      	b.n	8001f04 <_printf_i+0xc4>
 8001efc:	0645      	lsls	r5, r0, #25
 8001efe:	d5fb      	bpl.n	8001ef8 <_printf_i+0xb8>
 8001f00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f04:	2d00      	cmp	r5, #0
 8001f06:	da03      	bge.n	8001f10 <_printf_i+0xd0>
 8001f08:	232d      	movs	r3, #45	@ 0x2d
 8001f0a:	426d      	negs	r5, r5
 8001f0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f10:	4859      	ldr	r0, [pc, #356]	@ (8002078 <_printf_i+0x238>)
 8001f12:	230a      	movs	r3, #10
 8001f14:	e011      	b.n	8001f3a <_printf_i+0xfa>
 8001f16:	6821      	ldr	r1, [r4, #0]
 8001f18:	6833      	ldr	r3, [r6, #0]
 8001f1a:	0608      	lsls	r0, r1, #24
 8001f1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f20:	d402      	bmi.n	8001f28 <_printf_i+0xe8>
 8001f22:	0649      	lsls	r1, r1, #25
 8001f24:	bf48      	it	mi
 8001f26:	b2ad      	uxthmi	r5, r5
 8001f28:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f2a:	4853      	ldr	r0, [pc, #332]	@ (8002078 <_printf_i+0x238>)
 8001f2c:	6033      	str	r3, [r6, #0]
 8001f2e:	bf14      	ite	ne
 8001f30:	230a      	movne	r3, #10
 8001f32:	2308      	moveq	r3, #8
 8001f34:	2100      	movs	r1, #0
 8001f36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f3a:	6866      	ldr	r6, [r4, #4]
 8001f3c:	60a6      	str	r6, [r4, #8]
 8001f3e:	2e00      	cmp	r6, #0
 8001f40:	bfa2      	ittt	ge
 8001f42:	6821      	ldrge	r1, [r4, #0]
 8001f44:	f021 0104 	bicge.w	r1, r1, #4
 8001f48:	6021      	strge	r1, [r4, #0]
 8001f4a:	b90d      	cbnz	r5, 8001f50 <_printf_i+0x110>
 8001f4c:	2e00      	cmp	r6, #0
 8001f4e:	d04b      	beq.n	8001fe8 <_printf_i+0x1a8>
 8001f50:	4616      	mov	r6, r2
 8001f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f56:	fb03 5711 	mls	r7, r3, r1, r5
 8001f5a:	5dc7      	ldrb	r7, [r0, r7]
 8001f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f60:	462f      	mov	r7, r5
 8001f62:	42bb      	cmp	r3, r7
 8001f64:	460d      	mov	r5, r1
 8001f66:	d9f4      	bls.n	8001f52 <_printf_i+0x112>
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d10b      	bne.n	8001f84 <_printf_i+0x144>
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	07df      	lsls	r7, r3, #31
 8001f70:	d508      	bpl.n	8001f84 <_printf_i+0x144>
 8001f72:	6923      	ldr	r3, [r4, #16]
 8001f74:	6861      	ldr	r1, [r4, #4]
 8001f76:	4299      	cmp	r1, r3
 8001f78:	bfde      	ittt	le
 8001f7a:	2330      	movle	r3, #48	@ 0x30
 8001f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f84:	1b92      	subs	r2, r2, r6
 8001f86:	6122      	str	r2, [r4, #16]
 8001f88:	f8cd a000 	str.w	sl, [sp]
 8001f8c:	464b      	mov	r3, r9
 8001f8e:	aa03      	add	r2, sp, #12
 8001f90:	4621      	mov	r1, r4
 8001f92:	4640      	mov	r0, r8
 8001f94:	f7ff fee6 	bl	8001d64 <_printf_common>
 8001f98:	3001      	adds	r0, #1
 8001f9a:	d14a      	bne.n	8002032 <_printf_i+0x1f2>
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	b004      	add	sp, #16
 8001fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	f043 0320 	orr.w	r3, r3, #32
 8001fac:	6023      	str	r3, [r4, #0]
 8001fae:	4833      	ldr	r0, [pc, #204]	@ (800207c <_printf_i+0x23c>)
 8001fb0:	2778      	movs	r7, #120	@ 0x78
 8001fb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	6831      	ldr	r1, [r6, #0]
 8001fba:	061f      	lsls	r7, r3, #24
 8001fbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8001fc0:	d402      	bmi.n	8001fc8 <_printf_i+0x188>
 8001fc2:	065f      	lsls	r7, r3, #25
 8001fc4:	bf48      	it	mi
 8001fc6:	b2ad      	uxthmi	r5, r5
 8001fc8:	6031      	str	r1, [r6, #0]
 8001fca:	07d9      	lsls	r1, r3, #31
 8001fcc:	bf44      	itt	mi
 8001fce:	f043 0320 	orrmi.w	r3, r3, #32
 8001fd2:	6023      	strmi	r3, [r4, #0]
 8001fd4:	b11d      	cbz	r5, 8001fde <_printf_i+0x19e>
 8001fd6:	2310      	movs	r3, #16
 8001fd8:	e7ac      	b.n	8001f34 <_printf_i+0xf4>
 8001fda:	4827      	ldr	r0, [pc, #156]	@ (8002078 <_printf_i+0x238>)
 8001fdc:	e7e9      	b.n	8001fb2 <_printf_i+0x172>
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	f023 0320 	bic.w	r3, r3, #32
 8001fe4:	6023      	str	r3, [r4, #0]
 8001fe6:	e7f6      	b.n	8001fd6 <_printf_i+0x196>
 8001fe8:	4616      	mov	r6, r2
 8001fea:	e7bd      	b.n	8001f68 <_printf_i+0x128>
 8001fec:	6833      	ldr	r3, [r6, #0]
 8001fee:	6825      	ldr	r5, [r4, #0]
 8001ff0:	6961      	ldr	r1, [r4, #20]
 8001ff2:	1d18      	adds	r0, r3, #4
 8001ff4:	6030      	str	r0, [r6, #0]
 8001ff6:	062e      	lsls	r6, r5, #24
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	d501      	bpl.n	8002000 <_printf_i+0x1c0>
 8001ffc:	6019      	str	r1, [r3, #0]
 8001ffe:	e002      	b.n	8002006 <_printf_i+0x1c6>
 8002000:	0668      	lsls	r0, r5, #25
 8002002:	d5fb      	bpl.n	8001ffc <_printf_i+0x1bc>
 8002004:	8019      	strh	r1, [r3, #0]
 8002006:	2300      	movs	r3, #0
 8002008:	6123      	str	r3, [r4, #16]
 800200a:	4616      	mov	r6, r2
 800200c:	e7bc      	b.n	8001f88 <_printf_i+0x148>
 800200e:	6833      	ldr	r3, [r6, #0]
 8002010:	1d1a      	adds	r2, r3, #4
 8002012:	6032      	str	r2, [r6, #0]
 8002014:	681e      	ldr	r6, [r3, #0]
 8002016:	6862      	ldr	r2, [r4, #4]
 8002018:	2100      	movs	r1, #0
 800201a:	4630      	mov	r0, r6
 800201c:	f7fe f8e0 	bl	80001e0 <memchr>
 8002020:	b108      	cbz	r0, 8002026 <_printf_i+0x1e6>
 8002022:	1b80      	subs	r0, r0, r6
 8002024:	6060      	str	r0, [r4, #4]
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	6123      	str	r3, [r4, #16]
 800202a:	2300      	movs	r3, #0
 800202c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002030:	e7aa      	b.n	8001f88 <_printf_i+0x148>
 8002032:	6923      	ldr	r3, [r4, #16]
 8002034:	4632      	mov	r2, r6
 8002036:	4649      	mov	r1, r9
 8002038:	4640      	mov	r0, r8
 800203a:	47d0      	blx	sl
 800203c:	3001      	adds	r0, #1
 800203e:	d0ad      	beq.n	8001f9c <_printf_i+0x15c>
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	079b      	lsls	r3, r3, #30
 8002044:	d413      	bmi.n	800206e <_printf_i+0x22e>
 8002046:	68e0      	ldr	r0, [r4, #12]
 8002048:	9b03      	ldr	r3, [sp, #12]
 800204a:	4298      	cmp	r0, r3
 800204c:	bfb8      	it	lt
 800204e:	4618      	movlt	r0, r3
 8002050:	e7a6      	b.n	8001fa0 <_printf_i+0x160>
 8002052:	2301      	movs	r3, #1
 8002054:	4632      	mov	r2, r6
 8002056:	4649      	mov	r1, r9
 8002058:	4640      	mov	r0, r8
 800205a:	47d0      	blx	sl
 800205c:	3001      	adds	r0, #1
 800205e:	d09d      	beq.n	8001f9c <_printf_i+0x15c>
 8002060:	3501      	adds	r5, #1
 8002062:	68e3      	ldr	r3, [r4, #12]
 8002064:	9903      	ldr	r1, [sp, #12]
 8002066:	1a5b      	subs	r3, r3, r1
 8002068:	42ab      	cmp	r3, r5
 800206a:	dcf2      	bgt.n	8002052 <_printf_i+0x212>
 800206c:	e7eb      	b.n	8002046 <_printf_i+0x206>
 800206e:	2500      	movs	r5, #0
 8002070:	f104 0619 	add.w	r6, r4, #25
 8002074:	e7f5      	b.n	8002062 <_printf_i+0x222>
 8002076:	bf00      	nop
 8002078:	08002c45 	.word	0x08002c45
 800207c:	08002c56 	.word	0x08002c56

08002080 <__sflush_r>:
 8002080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002088:	0716      	lsls	r6, r2, #28
 800208a:	4605      	mov	r5, r0
 800208c:	460c      	mov	r4, r1
 800208e:	d454      	bmi.n	800213a <__sflush_r+0xba>
 8002090:	684b      	ldr	r3, [r1, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	dc02      	bgt.n	800209c <__sflush_r+0x1c>
 8002096:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	dd48      	ble.n	800212e <__sflush_r+0xae>
 800209c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800209e:	2e00      	cmp	r6, #0
 80020a0:	d045      	beq.n	800212e <__sflush_r+0xae>
 80020a2:	2300      	movs	r3, #0
 80020a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80020a8:	682f      	ldr	r7, [r5, #0]
 80020aa:	6a21      	ldr	r1, [r4, #32]
 80020ac:	602b      	str	r3, [r5, #0]
 80020ae:	d030      	beq.n	8002112 <__sflush_r+0x92>
 80020b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	0759      	lsls	r1, r3, #29
 80020b6:	d505      	bpl.n	80020c4 <__sflush_r+0x44>
 80020b8:	6863      	ldr	r3, [r4, #4]
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80020be:	b10b      	cbz	r3, 80020c4 <__sflush_r+0x44>
 80020c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020c8:	6a21      	ldr	r1, [r4, #32]
 80020ca:	4628      	mov	r0, r5
 80020cc:	47b0      	blx	r6
 80020ce:	1c43      	adds	r3, r0, #1
 80020d0:	89a3      	ldrh	r3, [r4, #12]
 80020d2:	d106      	bne.n	80020e2 <__sflush_r+0x62>
 80020d4:	6829      	ldr	r1, [r5, #0]
 80020d6:	291d      	cmp	r1, #29
 80020d8:	d82b      	bhi.n	8002132 <__sflush_r+0xb2>
 80020da:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <__sflush_r+0x104>)
 80020dc:	410a      	asrs	r2, r1
 80020de:	07d6      	lsls	r6, r2, #31
 80020e0:	d427      	bmi.n	8002132 <__sflush_r+0xb2>
 80020e2:	2200      	movs	r2, #0
 80020e4:	6062      	str	r2, [r4, #4]
 80020e6:	04d9      	lsls	r1, r3, #19
 80020e8:	6922      	ldr	r2, [r4, #16]
 80020ea:	6022      	str	r2, [r4, #0]
 80020ec:	d504      	bpl.n	80020f8 <__sflush_r+0x78>
 80020ee:	1c42      	adds	r2, r0, #1
 80020f0:	d101      	bne.n	80020f6 <__sflush_r+0x76>
 80020f2:	682b      	ldr	r3, [r5, #0]
 80020f4:	b903      	cbnz	r3, 80020f8 <__sflush_r+0x78>
 80020f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80020f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80020fa:	602f      	str	r7, [r5, #0]
 80020fc:	b1b9      	cbz	r1, 800212e <__sflush_r+0xae>
 80020fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002102:	4299      	cmp	r1, r3
 8002104:	d002      	beq.n	800210c <__sflush_r+0x8c>
 8002106:	4628      	mov	r0, r5
 8002108:	f7ff fbf2 	bl	80018f0 <_free_r>
 800210c:	2300      	movs	r3, #0
 800210e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002110:	e00d      	b.n	800212e <__sflush_r+0xae>
 8002112:	2301      	movs	r3, #1
 8002114:	4628      	mov	r0, r5
 8002116:	47b0      	blx	r6
 8002118:	4602      	mov	r2, r0
 800211a:	1c50      	adds	r0, r2, #1
 800211c:	d1c9      	bne.n	80020b2 <__sflush_r+0x32>
 800211e:	682b      	ldr	r3, [r5, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0c6      	beq.n	80020b2 <__sflush_r+0x32>
 8002124:	2b1d      	cmp	r3, #29
 8002126:	d001      	beq.n	800212c <__sflush_r+0xac>
 8002128:	2b16      	cmp	r3, #22
 800212a:	d11e      	bne.n	800216a <__sflush_r+0xea>
 800212c:	602f      	str	r7, [r5, #0]
 800212e:	2000      	movs	r0, #0
 8002130:	e022      	b.n	8002178 <__sflush_r+0xf8>
 8002132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002136:	b21b      	sxth	r3, r3
 8002138:	e01b      	b.n	8002172 <__sflush_r+0xf2>
 800213a:	690f      	ldr	r7, [r1, #16]
 800213c:	2f00      	cmp	r7, #0
 800213e:	d0f6      	beq.n	800212e <__sflush_r+0xae>
 8002140:	0793      	lsls	r3, r2, #30
 8002142:	680e      	ldr	r6, [r1, #0]
 8002144:	bf08      	it	eq
 8002146:	694b      	ldreq	r3, [r1, #20]
 8002148:	600f      	str	r7, [r1, #0]
 800214a:	bf18      	it	ne
 800214c:	2300      	movne	r3, #0
 800214e:	eba6 0807 	sub.w	r8, r6, r7
 8002152:	608b      	str	r3, [r1, #8]
 8002154:	f1b8 0f00 	cmp.w	r8, #0
 8002158:	dde9      	ble.n	800212e <__sflush_r+0xae>
 800215a:	6a21      	ldr	r1, [r4, #32]
 800215c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800215e:	4643      	mov	r3, r8
 8002160:	463a      	mov	r2, r7
 8002162:	4628      	mov	r0, r5
 8002164:	47b0      	blx	r6
 8002166:	2800      	cmp	r0, #0
 8002168:	dc08      	bgt.n	800217c <__sflush_r+0xfc>
 800216a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800216e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002172:	81a3      	strh	r3, [r4, #12]
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800217c:	4407      	add	r7, r0
 800217e:	eba8 0800 	sub.w	r8, r8, r0
 8002182:	e7e7      	b.n	8002154 <__sflush_r+0xd4>
 8002184:	dfbffffe 	.word	0xdfbffffe

08002188 <_fflush_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	690b      	ldr	r3, [r1, #16]
 800218c:	4605      	mov	r5, r0
 800218e:	460c      	mov	r4, r1
 8002190:	b913      	cbnz	r3, 8002198 <_fflush_r+0x10>
 8002192:	2500      	movs	r5, #0
 8002194:	4628      	mov	r0, r5
 8002196:	bd38      	pop	{r3, r4, r5, pc}
 8002198:	b118      	cbz	r0, 80021a2 <_fflush_r+0x1a>
 800219a:	6a03      	ldr	r3, [r0, #32]
 800219c:	b90b      	cbnz	r3, 80021a2 <_fflush_r+0x1a>
 800219e:	f7ff f91d 	bl	80013dc <__sinit>
 80021a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f3      	beq.n	8002192 <_fflush_r+0xa>
 80021aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80021ac:	07d0      	lsls	r0, r2, #31
 80021ae:	d404      	bmi.n	80021ba <_fflush_r+0x32>
 80021b0:	0599      	lsls	r1, r3, #22
 80021b2:	d402      	bmi.n	80021ba <_fflush_r+0x32>
 80021b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021b6:	f7ff fb8a 	bl	80018ce <__retarget_lock_acquire_recursive>
 80021ba:	4628      	mov	r0, r5
 80021bc:	4621      	mov	r1, r4
 80021be:	f7ff ff5f 	bl	8002080 <__sflush_r>
 80021c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021c4:	07da      	lsls	r2, r3, #31
 80021c6:	4605      	mov	r5, r0
 80021c8:	d4e4      	bmi.n	8002194 <_fflush_r+0xc>
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	059b      	lsls	r3, r3, #22
 80021ce:	d4e1      	bmi.n	8002194 <_fflush_r+0xc>
 80021d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021d2:	f7ff fb7d 	bl	80018d0 <__retarget_lock_release_recursive>
 80021d6:	e7dd      	b.n	8002194 <_fflush_r+0xc>

080021d8 <__swhatbuf_r>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	460c      	mov	r4, r1
 80021dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e0:	2900      	cmp	r1, #0
 80021e2:	b096      	sub	sp, #88	@ 0x58
 80021e4:	4615      	mov	r5, r2
 80021e6:	461e      	mov	r6, r3
 80021e8:	da0d      	bge.n	8002206 <__swhatbuf_r+0x2e>
 80021ea:	89a3      	ldrh	r3, [r4, #12]
 80021ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2340      	movne	r3, #64	@ 0x40
 80021f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80021fc:	2000      	movs	r0, #0
 80021fe:	6031      	str	r1, [r6, #0]
 8002200:	602b      	str	r3, [r5, #0]
 8002202:	b016      	add	sp, #88	@ 0x58
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	466a      	mov	r2, sp
 8002208:	f000 f848 	bl	800229c <_fstat_r>
 800220c:	2800      	cmp	r0, #0
 800220e:	dbec      	blt.n	80021ea <__swhatbuf_r+0x12>
 8002210:	9901      	ldr	r1, [sp, #4]
 8002212:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002216:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800221a:	4259      	negs	r1, r3
 800221c:	4159      	adcs	r1, r3
 800221e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002222:	e7eb      	b.n	80021fc <__swhatbuf_r+0x24>

08002224 <__smakebuf_r>:
 8002224:	898b      	ldrh	r3, [r1, #12]
 8002226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002228:	079d      	lsls	r5, r3, #30
 800222a:	4606      	mov	r6, r0
 800222c:	460c      	mov	r4, r1
 800222e:	d507      	bpl.n	8002240 <__smakebuf_r+0x1c>
 8002230:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	6123      	str	r3, [r4, #16]
 8002238:	2301      	movs	r3, #1
 800223a:	6163      	str	r3, [r4, #20]
 800223c:	b003      	add	sp, #12
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002240:	ab01      	add	r3, sp, #4
 8002242:	466a      	mov	r2, sp
 8002244:	f7ff ffc8 	bl	80021d8 <__swhatbuf_r>
 8002248:	9f00      	ldr	r7, [sp, #0]
 800224a:	4605      	mov	r5, r0
 800224c:	4639      	mov	r1, r7
 800224e:	4630      	mov	r0, r6
 8002250:	f7ff fbba 	bl	80019c8 <_malloc_r>
 8002254:	b948      	cbnz	r0, 800226a <__smakebuf_r+0x46>
 8002256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800225a:	059a      	lsls	r2, r3, #22
 800225c:	d4ee      	bmi.n	800223c <__smakebuf_r+0x18>
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	81a3      	strh	r3, [r4, #12]
 8002268:	e7e2      	b.n	8002230 <__smakebuf_r+0xc>
 800226a:	89a3      	ldrh	r3, [r4, #12]
 800226c:	6020      	str	r0, [r4, #0]
 800226e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002272:	81a3      	strh	r3, [r4, #12]
 8002274:	9b01      	ldr	r3, [sp, #4]
 8002276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800227a:	b15b      	cbz	r3, 8002294 <__smakebuf_r+0x70>
 800227c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002280:	4630      	mov	r0, r6
 8002282:	f000 f81d 	bl	80022c0 <_isatty_r>
 8002286:	b128      	cbz	r0, 8002294 <__smakebuf_r+0x70>
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	81a3      	strh	r3, [r4, #12]
 8002294:	89a3      	ldrh	r3, [r4, #12]
 8002296:	431d      	orrs	r5, r3
 8002298:	81a5      	strh	r5, [r4, #12]
 800229a:	e7cf      	b.n	800223c <__smakebuf_r+0x18>

0800229c <_fstat_r>:
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	4d07      	ldr	r5, [pc, #28]	@ (80022bc <_fstat_r+0x20>)
 80022a0:	2300      	movs	r3, #0
 80022a2:	4604      	mov	r4, r0
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	602b      	str	r3, [r5, #0]
 80022aa:	f7fe fb4b 	bl	8000944 <_fstat>
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d102      	bne.n	80022b8 <_fstat_r+0x1c>
 80022b2:	682b      	ldr	r3, [r5, #0]
 80022b4:	b103      	cbz	r3, 80022b8 <_fstat_r+0x1c>
 80022b6:	6023      	str	r3, [r4, #0]
 80022b8:	bd38      	pop	{r3, r4, r5, pc}
 80022ba:	bf00      	nop
 80022bc:	20000288 	.word	0x20000288

080022c0 <_isatty_r>:
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	4d06      	ldr	r5, [pc, #24]	@ (80022dc <_isatty_r+0x1c>)
 80022c4:	2300      	movs	r3, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	602b      	str	r3, [r5, #0]
 80022cc:	f7fe fb4a 	bl	8000964 <_isatty>
 80022d0:	1c43      	adds	r3, r0, #1
 80022d2:	d102      	bne.n	80022da <_isatty_r+0x1a>
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	b103      	cbz	r3, 80022da <_isatty_r+0x1a>
 80022d8:	6023      	str	r3, [r4, #0]
 80022da:	bd38      	pop	{r3, r4, r5, pc}
 80022dc:	20000288 	.word	0x20000288

080022e0 <_sbrk_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	4d06      	ldr	r5, [pc, #24]	@ (80022fc <_sbrk_r+0x1c>)
 80022e4:	2300      	movs	r3, #0
 80022e6:	4604      	mov	r4, r0
 80022e8:	4608      	mov	r0, r1
 80022ea:	602b      	str	r3, [r5, #0]
 80022ec:	f7fe fb52 	bl	8000994 <_sbrk>
 80022f0:	1c43      	adds	r3, r0, #1
 80022f2:	d102      	bne.n	80022fa <_sbrk_r+0x1a>
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	b103      	cbz	r3, 80022fa <_sbrk_r+0x1a>
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	bd38      	pop	{r3, r4, r5, pc}
 80022fc:	20000288 	.word	0x20000288

08002300 <_init>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr

0800230c <_fini>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr
