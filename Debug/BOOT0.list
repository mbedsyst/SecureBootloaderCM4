
BOOT0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08001648  08001648  00002648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e0  080017e0  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080017e0  080017e0  000027e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017e8  080017e8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e8  080017e8  000027e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017ec  080017ec  000027ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080017f0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800184c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800184c  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000189f  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008bc  00000000  00000000  0000492b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000051e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000170  00000000  00000000  00005408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd35  00000000  00000000  00005578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cd5  00000000  00000000  000152ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055692  00000000  00000000  00017f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e00  00000000  00000000  0006d658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0006e458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001630 	.word	0x08001630

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001630 	.word	0x08001630

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <BOOT_Init>:
#include "Drivers/UART.h"
#include "Drivers/SYSTICK.h"
#include "Drivers/CRC.h"

void BOOT_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	LED_Init();
 8000284:	f000 f98c 	bl	80005a0 <LED_Init>
	UART2_Init();
 8000288:	f000 f9f2 	bl	8000670 <UART2_Init>
	CRC_Init();
 800028c:	f000 f93e 	bl	800050c <CRC_Init>
	printf("[info] Initializing Bootloader.\n\r");
 8000290:	4802      	ldr	r0, [pc, #8]	@ (800029c <BOOT_Init+0x1c>)
 8000292:	f000 fb5f 	bl	8000954 <iprintf>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	08001648 	.word	0x08001648

080002a0 <BOOT_DeInit>:

static void BOOT_DeInit(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	printf("[info] De-Initializing Bootloader.\n\r");
 80002a4:	4805      	ldr	r0, [pc, #20]	@ (80002bc <BOOT_DeInit+0x1c>)
 80002a6:	f000 fb55 	bl	8000954 <iprintf>
	LED_DeInit();
 80002aa:	f000 f9a9 	bl	8000600 <LED_DeInit>
	UART2_DeInit();
 80002ae:	f000 fa1b 	bl	80006e8 <UART2_DeInit>
	CRC_DeInit();
 80002b2:	f000 f943 	bl	800053c <CRC_DeInit>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	0800166c 	.word	0x0800166c

080002c0 <BOOT_LocateApplication>:

uint32_t BOOT_LocateApplication(uint32_t app_id_address)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	uint32_t appID = *(volatile uint32_t *)app_id_address;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	60fb      	str	r3, [r7, #12]
	if(appID != APP_ID)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	f1b3 3f5a 	cmp.w	r3, #1515870810	@ 0x5a5a5a5a
 80002d4:	d005      	beq.n	80002e2 <BOOT_LocateApplication+0x22>
	{
		printf("[error] Invalid Application ID: 0x%08X\n\r", (unsigned int)appID);
 80002d6:	68f9      	ldr	r1, [r7, #12]
 80002d8:	480a      	ldr	r0, [pc, #40]	@ (8000304 <BOOT_LocateApplication+0x44>)
 80002da:	f000 fb3b 	bl	8000954 <iprintf>
		return 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	e00c      	b.n	80002fc <BOOT_LocateApplication+0x3c>
	}
	printf("[info] Valid Application ID: 0x%08X\n\r", (unsigned int)appID);
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	4808      	ldr	r0, [pc, #32]	@ (8000308 <BOOT_LocateApplication+0x48>)
 80002e6:	f000 fb35 	bl	8000954 <iprintf>
	uint32_t appSize = *(volatile uint32_t *)APP_SIZE_ADDR;
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <BOOT_LocateApplication+0x4c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	3308      	adds	r3, #8
 80002f0:	60bb      	str	r3, [r7, #8]
	printf("[info] Application Size: %u bytes\n\r", (unsigned int)appSize);
 80002f2:	68b9      	ldr	r1, [r7, #8]
 80002f4:	4806      	ldr	r0, [pc, #24]	@ (8000310 <BOOT_LocateApplication+0x50>)
 80002f6:	f000 fb2d 	bl	8000954 <iprintf>

	return appSize;
 80002fa:	68bb      	ldr	r3, [r7, #8]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	08001694 	.word	0x08001694
 8000308:	080016c0 	.word	0x080016c0
 800030c:	08008000 	.word	0x08008000
 8000310:	080016e8 	.word	0x080016e8

08000314 <BOOT_VerifyApplication>:

bool BOOT_VerifyApplication(uint32_t app_size)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint32_t app_words = app_size/4;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	089b      	lsrs	r3, r3, #2
 8000320:	617b      	str	r3, [r7, #20]
	uint32_t appCRC = *(volatile uint32_t *)APP_CRC_ADDR;
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <BOOT_VerifyApplication+0x4c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	330c      	adds	r3, #12
 8000328:	613b      	str	r3, [r7, #16]
	const uint32_t appCODE = *(const uint32_t *)APP_CODE_START;
 800032a:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <BOOT_VerifyApplication+0x4c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3310      	adds	r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
	uint32_t calculated_CRC = CRC_Calculate((const uint32_t *)appCODE, app_words);
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	6979      	ldr	r1, [r7, #20]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f910 	bl	800055c <CRC_Calculate>
 800033c:	60b8      	str	r0, [r7, #8]

	if(calculated_CRC != appCRC)
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	429a      	cmp	r2, r3
 8000344:	d004      	beq.n	8000350 <BOOT_VerifyApplication+0x3c>
	{
		printf("[error] Application Verification failed: Checksum error.\n\r");
 8000346:	4807      	ldr	r0, [pc, #28]	@ (8000364 <BOOT_VerifyApplication+0x50>)
 8000348:	f000 fb04 	bl	8000954 <iprintf>
		return false;
 800034c:	2300      	movs	r3, #0
 800034e:	e003      	b.n	8000358 <BOOT_VerifyApplication+0x44>
	}

	printf("[info] Application Verification success: Checksum pass.\n\r");
 8000350:	4805      	ldr	r0, [pc, #20]	@ (8000368 <BOOT_VerifyApplication+0x54>)
 8000352:	f000 faff 	bl	8000954 <iprintf>
	return true;
 8000356:	2301      	movs	r3, #1
}
 8000358:	4618      	mov	r0, r3
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	08008000 	.word	0x08008000
 8000364:	0800170c 	.word	0x0800170c
 8000368:	08001748 	.word	0x08001748

0800036c <BOOT_LoadApplication>:

void BOOT_LoadApplication()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
	uint32_t app_code_start = APP_CODE_START;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <BOOT_LoadApplication+0x40>)
 8000374:	617b      	str	r3, [r7, #20]
	uint32_t *app_vector_table = (uint32_t *)app_code_start;
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	613b      	str	r3, [r7, #16]
	uint32_t app_stack_pointer = app_vector_table[0];
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	60fb      	str	r3, [r7, #12]
	uint32_t app_reset_handler = app_vector_table[1];
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000386:	b672      	cpsid	i
}
 8000388:	bf00      	nop

	__disable_irq();

	BOOT_DeInit();
 800038a:	f7ff ff89 	bl	80002a0 <BOOT_DeInit>

	SCB->VTOR = app_code_start;
 800038e:	4a08      	ldr	r2, [pc, #32]	@ (80003b0 <BOOT_LoadApplication+0x44>)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	6093      	str	r3, [r2, #8]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	f383 8808 	msr	MSP, r3
}
 800039e:	bf00      	nop
	__set_MSP(app_stack_pointer);

	void (*reset_handler)(void) = (void (*)(void))app_reset_handler;
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	607b      	str	r3, [r7, #4]
	reset_handler();
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4798      	blx	r3
	while(1);
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <BOOT_LoadApplication+0x3c>
 80003ac:	08008010 	.word	0x08008010
 80003b0:	e000ed00 	.word	0xe000ed00

080003b4 <BOOT_HandleErrors>:
}

void BOOT_HandleErrors(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	printf("[error] Application Failed to Load.\n\r");
 80003b8:	4802      	ldr	r0, [pc, #8]	@ (80003c4 <BOOT_HandleErrors+0x10>)
 80003ba:	f000 facb 	bl	8000954 <iprintf>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	08001784 	.word	0x08001784

080003c8 <main>:
#include "main.h"

int main()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	uint32_t applicationSize;
	BOOT_Init();
 80003ce:	f7ff ff57 	bl	8000280 <BOOT_Init>

	applicationSize = BOOT_LocateApplication(APP_ID_ADDR);
 80003d2:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <main+0x30>)
 80003d4:	f7ff ff74 	bl	80002c0 <BOOT_LocateApplication>
 80003d8:	6078      	str	r0, [r7, #4]

	if(BOOT_VerifyApplication(applicationSize))
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f7ff ff9a 	bl	8000314 <BOOT_VerifyApplication>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d002      	beq.n	80003ec <main+0x24>
	{
		BOOT_LoadApplication();
 80003e6:	f7ff ffc1 	bl	800036c <BOOT_LoadApplication>
 80003ea:	e002      	b.n	80003f2 <main+0x2a>
	}
	else
	{
		BOOT_HandleErrors();
 80003ec:	f7ff ffe2 	bl	80003b4 <BOOT_HandleErrors>
	}

	while(1)
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	e7fd      	b.n	80003f2 <main+0x2a>
 80003f6:	bf00      	nop
 80003f8:	08008000 	.word	0x08008000

080003fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	e00a      	b.n	8000424 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800040e:	f3af 8000 	nop.w
 8000412:	4601      	mov	r1, r0
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	60ba      	str	r2, [r7, #8]
 800041a:	b2ca      	uxtb	r2, r1
 800041c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3301      	adds	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	dbf0      	blt.n	800040e <_read+0x12>
  }

  return len;
 800042c:	687b      	ldr	r3, [r7, #4]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800045e:	605a      	str	r2, [r3, #4]
  return 0;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <_isatty>:

int _isatty(int file)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000476:	2301      	movs	r3, #1
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
	...

080004a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a8:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <_sbrk+0x5c>)
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <_sbrk+0x60>)
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <_sbrk+0x64>)
 80004be:	4a12      	ldr	r2, [pc, #72]	@ (8000508 <_sbrk+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d207      	bcs.n	80004e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d0:	f000 fae4 	bl	8000a9c <__errno>
 80004d4:	4603      	mov	r3, r0
 80004d6:	220c      	movs	r2, #12
 80004d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e009      	b.n	80004f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <_sbrk+0x64>)
 80004f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20018000 	.word	0x20018000
 8000500:	00000400 	.word	0x00000400
 8000504:	20000078 	.word	0x20000078
 8000508:	200001c8 	.word	0x200001c8

0800050c <CRC_Init>:
#include "Drivers/CRC.h"

void CRC_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <CRC_Init+0x28>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000514:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <CRC_Init+0x28>)
 8000516:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800051a:	6313      	str	r3, [r2, #48]	@ 0x30
	CRC->CR |= CRC_CR_RESET;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <CRC_Init+0x2c>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a05      	ldr	r2, [pc, #20]	@ (8000538 <CRC_Init+0x2c>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	6093      	str	r3, [r2, #8]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40023800 	.word	0x40023800
 8000538:	40023000 	.word	0x40023000

0800053c <CRC_DeInit>:

void CRC_DeInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_CRCEN;
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <CRC_DeInit+0x1c>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <CRC_DeInit+0x1c>)
 8000546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40023800 	.word	0x40023800

0800055c <CRC_Calculate>:

uint32_t CRC_Calculate(const uint32_t *data, uint32_t len)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	CRC->CR |= CRC_CR_RESET;
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <CRC_Calculate+0x40>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a0c      	ldr	r2, [pc, #48]	@ (800059c <CRC_Calculate+0x40>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6093      	str	r3, [r2, #8]
	while(len--)
 8000572:	e005      	b.n	8000580 <CRC_Calculate+0x24>
	{
		CRC->DR = *data++;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	1d1a      	adds	r2, r3, #4
 8000578:	607a      	str	r2, [r7, #4]
 800057a:	4a08      	ldr	r2, [pc, #32]	@ (800059c <CRC_Calculate+0x40>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6013      	str	r3, [r2, #0]
	while(len--)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	1e5a      	subs	r2, r3, #1
 8000584:	603a      	str	r2, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1f4      	bne.n	8000574 <CRC_Calculate+0x18>
	}
	return CRC->DR;
 800058a:	4b04      	ldr	r3, [pc, #16]	@ (800059c <CRC_Calculate+0x40>)
 800058c:	681b      	ldr	r3, [r3, #0]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023000 	.word	0x40023000

080005a0 <LED_Init>:
#include "Drivers/LED.h"

void LED_Init(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <LED_Init+0x58>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a8:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <LED_Init+0x58>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <LED_Init+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a11      	ldr	r2, [pc, #68]	@ (80005fc <LED_Init+0x5c>)
 80005b6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <LED_Init+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <LED_Init+0x5c>)
 80005c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005c6:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <LED_Init+0x5c>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <LED_Init+0x5c>)
 80005ce:	f023 0320 	bic.w	r3, r3, #32
 80005d2:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <LED_Init+0x5c>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a08      	ldr	r2, [pc, #32]	@ (80005fc <LED_Init+0x5c>)
 80005da:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80005de:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LED_Init+0x5c>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <LED_Init+0x5c>)
 80005e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005ea:	60d3      	str	r3, [r2, #12]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020000 	.word	0x40020000

08000600 <LED_DeInit>:

void LED_DeInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	 RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <LED_DeInit+0x1c>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <LED_DeInit+0x1c>)
 800060a:	f023 0301 	bic.w	r3, r3, #1
 800060e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	085a      	lsrs	r2, r3, #1
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	441a      	add	r2, r3
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	b29b      	uxth	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 8000652:	6839      	ldr	r1, [r7, #0]
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffe3 	bl	8000620 <Compute_UART_Baud>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b03      	ldr	r3, [pc, #12]	@ (800066c <UART2_SetBaudRate+0x24>)
 8000660:	609a      	str	r2, [r3, #8]
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40004400 	.word	0x40004400

08000670 <UART2_Init>:

void UART2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <UART2_Init+0x68>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000678:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <UART2_Init+0x68>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <UART2_Init+0x68>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <UART2_Init+0x68>)
 8000686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <UART2_Init+0x6c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <UART2_Init+0x6c>)
 8000692:	f023 0310 	bic.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <UART2_Init+0x6c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <UART2_Init+0x6c>)
 800069e:	f043 0320 	orr.w	r3, r3, #32
 80006a2:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <UART2_Init+0x6c>)
 80006a6:	6a1b      	ldr	r3, [r3, #32]
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <UART2_Init+0x6c>)
 80006aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80006ae:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 80006b0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80006b4:	480a      	ldr	r0, [pc, #40]	@ (80006e0 <UART2_Init+0x70>)
 80006b6:	f7ff ffc7 	bl	8000648 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <UART2_Init+0x74>)
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <UART2_Init+0x74>)
 80006c0:	f043 030c 	orr.w	r3, r3, #12
 80006c4:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <UART2_Init+0x74>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <UART2_Init+0x74>)
 80006cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006d0:	60d3      	str	r3, [r2, #12]
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000
 80006e0:	00f42400 	.word	0x00f42400
 80006e4:	40004400 	.word	0x40004400

080006e8 <UART2_DeInit>:

void UART2_DeInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 80006ec:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <UART2_DeInit+0x28>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f0:	4a07      	ldr	r2, [pc, #28]	@ (8000710 <UART2_DeInit+0x28>)
 80006f2:	f023 0301 	bic.w	r3, r3, #1
 80006f6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR &= ~RCC_APB1ENR_USART2EN;
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <UART2_DeInit+0x28>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <UART2_DeInit+0x28>)
 80006fe:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <UART2_TxChar>:

void UART2_TxChar(char ch)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART2->SR & USART_SR_TXE));
 800071e:	bf00      	nop
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <UART2_TxChar+0x2c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0f9      	beq.n	8000720 <UART2_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART2->DR = (ch &0xFF);
 800072c:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <UART2_TxChar+0x2c>)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	6053      	str	r3, [r2, #4]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40004400 	.word	0x40004400

08000744 <_write>:
	while(!(USART2->SR & (1<<5)));
	return USART2->DR;
}

int _write(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e009      	b.n	800076a <_write+0x26>
    {
        UART2_TxChar(ptr[i]);
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffd8 	bl	8000714 <UART2_TxChar>
    for (int i = 0; i < len; i++)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	429a      	cmp	r2, r3
 8000770:	dbf1      	blt.n	8000756 <_write+0x12>
    }
    return len;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800077c:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000780:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	@ (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	@ (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	@ (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007aa:	f000 f97d 	bl	8000aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff fe0b 	bl	80003c8 <main>

080007b2 <LoopForever>:

LoopForever:
  b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   r0, =_estack
 80007b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007c0:	080017f0 	.word	0x080017f0
  ldr r2, =_sbss
 80007c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007c8:	200001c8 	.word	0x200001c8

080007cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <std>:
 80007d0:	2300      	movs	r3, #0
 80007d2:	b510      	push	{r4, lr}
 80007d4:	4604      	mov	r4, r0
 80007d6:	e9c0 3300 	strd	r3, r3, [r0]
 80007da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007de:	6083      	str	r3, [r0, #8]
 80007e0:	8181      	strh	r1, [r0, #12]
 80007e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80007e4:	81c2      	strh	r2, [r0, #14]
 80007e6:	6183      	str	r3, [r0, #24]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2208      	movs	r2, #8
 80007ec:	305c      	adds	r0, #92	@ 0x5c
 80007ee:	f000 f906 	bl	80009fe <memset>
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <std+0x58>)
 80007f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <std+0x5c>)
 80007f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <std+0x60>)
 80007fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <std+0x64>)
 8000800:	6323      	str	r3, [r4, #48]	@ 0x30
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <std+0x68>)
 8000804:	6224      	str	r4, [r4, #32]
 8000806:	429c      	cmp	r4, r3
 8000808:	d006      	beq.n	8000818 <std+0x48>
 800080a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800080e:	4294      	cmp	r4, r2
 8000810:	d002      	beq.n	8000818 <std+0x48>
 8000812:	33d0      	adds	r3, #208	@ 0xd0
 8000814:	429c      	cmp	r4, r3
 8000816:	d105      	bne.n	8000824 <std+0x54>
 8000818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800081c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000820:	f000 b966 	b.w	8000af0 <__retarget_lock_init_recursive>
 8000824:	bd10      	pop	{r4, pc}
 8000826:	bf00      	nop
 8000828:	08000979 	.word	0x08000979
 800082c:	0800099b 	.word	0x0800099b
 8000830:	080009d3 	.word	0x080009d3
 8000834:	080009f7 	.word	0x080009f7
 8000838:	2000007c 	.word	0x2000007c

0800083c <stdio_exit_handler>:
 800083c:	4a02      	ldr	r2, [pc, #8]	@ (8000848 <stdio_exit_handler+0xc>)
 800083e:	4903      	ldr	r1, [pc, #12]	@ (800084c <stdio_exit_handler+0x10>)
 8000840:	4803      	ldr	r0, [pc, #12]	@ (8000850 <stdio_exit_handler+0x14>)
 8000842:	f000 b869 	b.w	8000918 <_fwalk_sglue>
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	08001391 	.word	0x08001391
 8000850:	20000010 	.word	0x20000010

08000854 <cleanup_stdio>:
 8000854:	6841      	ldr	r1, [r0, #4]
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <cleanup_stdio+0x34>)
 8000858:	4299      	cmp	r1, r3
 800085a:	b510      	push	{r4, lr}
 800085c:	4604      	mov	r4, r0
 800085e:	d001      	beq.n	8000864 <cleanup_stdio+0x10>
 8000860:	f000 fd96 	bl	8001390 <_fflush_r>
 8000864:	68a1      	ldr	r1, [r4, #8]
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <cleanup_stdio+0x38>)
 8000868:	4299      	cmp	r1, r3
 800086a:	d002      	beq.n	8000872 <cleanup_stdio+0x1e>
 800086c:	4620      	mov	r0, r4
 800086e:	f000 fd8f 	bl	8001390 <_fflush_r>
 8000872:	68e1      	ldr	r1, [r4, #12]
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <cleanup_stdio+0x3c>)
 8000876:	4299      	cmp	r1, r3
 8000878:	d004      	beq.n	8000884 <cleanup_stdio+0x30>
 800087a:	4620      	mov	r0, r4
 800087c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000880:	f000 bd86 	b.w	8001390 <_fflush_r>
 8000884:	bd10      	pop	{r4, pc}
 8000886:	bf00      	nop
 8000888:	2000007c 	.word	0x2000007c
 800088c:	200000e4 	.word	0x200000e4
 8000890:	2000014c 	.word	0x2000014c

08000894 <global_stdio_init.part.0>:
 8000894:	b510      	push	{r4, lr}
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <global_stdio_init.part.0+0x30>)
 8000898:	4c0b      	ldr	r4, [pc, #44]	@ (80008c8 <global_stdio_init.part.0+0x34>)
 800089a:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <global_stdio_init.part.0+0x38>)
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	4620      	mov	r0, r4
 80008a0:	2200      	movs	r2, #0
 80008a2:	2104      	movs	r1, #4
 80008a4:	f7ff ff94 	bl	80007d0 <std>
 80008a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80008ac:	2201      	movs	r2, #1
 80008ae:	2109      	movs	r1, #9
 80008b0:	f7ff ff8e 	bl	80007d0 <std>
 80008b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80008b8:	2202      	movs	r2, #2
 80008ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008be:	2112      	movs	r1, #18
 80008c0:	f7ff bf86 	b.w	80007d0 <std>
 80008c4:	200001b4 	.word	0x200001b4
 80008c8:	2000007c 	.word	0x2000007c
 80008cc:	0800083d 	.word	0x0800083d

080008d0 <__sfp_lock_acquire>:
 80008d0:	4801      	ldr	r0, [pc, #4]	@ (80008d8 <__sfp_lock_acquire+0x8>)
 80008d2:	f000 b90e 	b.w	8000af2 <__retarget_lock_acquire_recursive>
 80008d6:	bf00      	nop
 80008d8:	200001bd 	.word	0x200001bd

080008dc <__sfp_lock_release>:
 80008dc:	4801      	ldr	r0, [pc, #4]	@ (80008e4 <__sfp_lock_release+0x8>)
 80008de:	f000 b909 	b.w	8000af4 <__retarget_lock_release_recursive>
 80008e2:	bf00      	nop
 80008e4:	200001bd 	.word	0x200001bd

080008e8 <__sinit>:
 80008e8:	b510      	push	{r4, lr}
 80008ea:	4604      	mov	r4, r0
 80008ec:	f7ff fff0 	bl	80008d0 <__sfp_lock_acquire>
 80008f0:	6a23      	ldr	r3, [r4, #32]
 80008f2:	b11b      	cbz	r3, 80008fc <__sinit+0x14>
 80008f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f8:	f7ff bff0 	b.w	80008dc <__sfp_lock_release>
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <__sinit+0x28>)
 80008fe:	6223      	str	r3, [r4, #32]
 8000900:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <__sinit+0x2c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f5      	bne.n	80008f4 <__sinit+0xc>
 8000908:	f7ff ffc4 	bl	8000894 <global_stdio_init.part.0>
 800090c:	e7f2      	b.n	80008f4 <__sinit+0xc>
 800090e:	bf00      	nop
 8000910:	08000855 	.word	0x08000855
 8000914:	200001b4 	.word	0x200001b4

08000918 <_fwalk_sglue>:
 8000918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800091c:	4607      	mov	r7, r0
 800091e:	4688      	mov	r8, r1
 8000920:	4614      	mov	r4, r2
 8000922:	2600      	movs	r6, #0
 8000924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000928:	f1b9 0901 	subs.w	r9, r9, #1
 800092c:	d505      	bpl.n	800093a <_fwalk_sglue+0x22>
 800092e:	6824      	ldr	r4, [r4, #0]
 8000930:	2c00      	cmp	r4, #0
 8000932:	d1f7      	bne.n	8000924 <_fwalk_sglue+0xc>
 8000934:	4630      	mov	r0, r6
 8000936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800093a:	89ab      	ldrh	r3, [r5, #12]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d907      	bls.n	8000950 <_fwalk_sglue+0x38>
 8000940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000944:	3301      	adds	r3, #1
 8000946:	d003      	beq.n	8000950 <_fwalk_sglue+0x38>
 8000948:	4629      	mov	r1, r5
 800094a:	4638      	mov	r0, r7
 800094c:	47c0      	blx	r8
 800094e:	4306      	orrs	r6, r0
 8000950:	3568      	adds	r5, #104	@ 0x68
 8000952:	e7e9      	b.n	8000928 <_fwalk_sglue+0x10>

08000954 <iprintf>:
 8000954:	b40f      	push	{r0, r1, r2, r3}
 8000956:	b507      	push	{r0, r1, r2, lr}
 8000958:	4906      	ldr	r1, [pc, #24]	@ (8000974 <iprintf+0x20>)
 800095a:	ab04      	add	r3, sp, #16
 800095c:	6808      	ldr	r0, [r1, #0]
 800095e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000962:	6881      	ldr	r1, [r0, #8]
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	f000 f9e9 	bl	8000d3c <_vfiprintf_r>
 800096a:	b003      	add	sp, #12
 800096c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr
 8000974:	2000000c 	.word	0x2000000c

08000978 <__sread>:
 8000978:	b510      	push	{r4, lr}
 800097a:	460c      	mov	r4, r1
 800097c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000980:	f000 f868 	bl	8000a54 <_read_r>
 8000984:	2800      	cmp	r0, #0
 8000986:	bfab      	itete	ge
 8000988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800098a:	89a3      	ldrhlt	r3, [r4, #12]
 800098c:	181b      	addge	r3, r3, r0
 800098e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000992:	bfac      	ite	ge
 8000994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000996:	81a3      	strhlt	r3, [r4, #12]
 8000998:	bd10      	pop	{r4, pc}

0800099a <__swrite>:
 800099a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800099e:	461f      	mov	r7, r3
 80009a0:	898b      	ldrh	r3, [r1, #12]
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	4605      	mov	r5, r0
 80009a6:	460c      	mov	r4, r1
 80009a8:	4616      	mov	r6, r2
 80009aa:	d505      	bpl.n	80009b8 <__swrite+0x1e>
 80009ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009b0:	2302      	movs	r3, #2
 80009b2:	2200      	movs	r2, #0
 80009b4:	f000 f83c 	bl	8000a30 <_lseek_r>
 80009b8:	89a3      	ldrh	r3, [r4, #12]
 80009ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009c2:	81a3      	strh	r3, [r4, #12]
 80009c4:	4632      	mov	r2, r6
 80009c6:	463b      	mov	r3, r7
 80009c8:	4628      	mov	r0, r5
 80009ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009ce:	f000 b853 	b.w	8000a78 <_write_r>

080009d2 <__sseek>:
 80009d2:	b510      	push	{r4, lr}
 80009d4:	460c      	mov	r4, r1
 80009d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009da:	f000 f829 	bl	8000a30 <_lseek_r>
 80009de:	1c43      	adds	r3, r0, #1
 80009e0:	89a3      	ldrh	r3, [r4, #12]
 80009e2:	bf15      	itete	ne
 80009e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80009e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80009ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80009ee:	81a3      	strheq	r3, [r4, #12]
 80009f0:	bf18      	it	ne
 80009f2:	81a3      	strhne	r3, [r4, #12]
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <__sclose>:
 80009f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009fa:	f000 b809 	b.w	8000a10 <_close_r>

080009fe <memset>:
 80009fe:	4402      	add	r2, r0
 8000a00:	4603      	mov	r3, r0
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d100      	bne.n	8000a08 <memset+0xa>
 8000a06:	4770      	bx	lr
 8000a08:	f803 1b01 	strb.w	r1, [r3], #1
 8000a0c:	e7f9      	b.n	8000a02 <memset+0x4>
	...

08000a10 <_close_r>:
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4d06      	ldr	r5, [pc, #24]	@ (8000a2c <_close_r+0x1c>)
 8000a14:	2300      	movs	r3, #0
 8000a16:	4604      	mov	r4, r0
 8000a18:	4608      	mov	r0, r1
 8000a1a:	602b      	str	r3, [r5, #0]
 8000a1c:	f7ff fd0b 	bl	8000436 <_close>
 8000a20:	1c43      	adds	r3, r0, #1
 8000a22:	d102      	bne.n	8000a2a <_close_r+0x1a>
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	b103      	cbz	r3, 8000a2a <_close_r+0x1a>
 8000a28:	6023      	str	r3, [r4, #0]
 8000a2a:	bd38      	pop	{r3, r4, r5, pc}
 8000a2c:	200001b8 	.word	0x200001b8

08000a30 <_lseek_r>:
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4d07      	ldr	r5, [pc, #28]	@ (8000a50 <_lseek_r+0x20>)
 8000a34:	4604      	mov	r4, r0
 8000a36:	4608      	mov	r0, r1
 8000a38:	4611      	mov	r1, r2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	602a      	str	r2, [r5, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f7ff fd20 	bl	8000484 <_lseek>
 8000a44:	1c43      	adds	r3, r0, #1
 8000a46:	d102      	bne.n	8000a4e <_lseek_r+0x1e>
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	b103      	cbz	r3, 8000a4e <_lseek_r+0x1e>
 8000a4c:	6023      	str	r3, [r4, #0]
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	200001b8 	.word	0x200001b8

08000a54 <_read_r>:
 8000a54:	b538      	push	{r3, r4, r5, lr}
 8000a56:	4d07      	ldr	r5, [pc, #28]	@ (8000a74 <_read_r+0x20>)
 8000a58:	4604      	mov	r4, r0
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	602a      	str	r2, [r5, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	f7ff fcca 	bl	80003fc <_read>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d102      	bne.n	8000a72 <_read_r+0x1e>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	b103      	cbz	r3, 8000a72 <_read_r+0x1e>
 8000a70:	6023      	str	r3, [r4, #0]
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	200001b8 	.word	0x200001b8

08000a78 <_write_r>:
 8000a78:	b538      	push	{r3, r4, r5, lr}
 8000a7a:	4d07      	ldr	r5, [pc, #28]	@ (8000a98 <_write_r+0x20>)
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	4611      	mov	r1, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	602a      	str	r2, [r5, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	f7ff fe5c 	bl	8000744 <_write>
 8000a8c:	1c43      	adds	r3, r0, #1
 8000a8e:	d102      	bne.n	8000a96 <_write_r+0x1e>
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	b103      	cbz	r3, 8000a96 <_write_r+0x1e>
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	bd38      	pop	{r3, r4, r5, pc}
 8000a98:	200001b8 	.word	0x200001b8

08000a9c <__errno>:
 8000a9c:	4b01      	ldr	r3, [pc, #4]	@ (8000aa4 <__errno+0x8>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	2000000c 	.word	0x2000000c

08000aa8 <__libc_init_array>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8000ae0 <__libc_init_array+0x38>)
 8000aac:	4c0d      	ldr	r4, [pc, #52]	@ (8000ae4 <__libc_init_array+0x3c>)
 8000aae:	1b64      	subs	r4, r4, r5
 8000ab0:	10a4      	asrs	r4, r4, #2
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	42a6      	cmp	r6, r4
 8000ab6:	d109      	bne.n	8000acc <__libc_init_array+0x24>
 8000ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8000ae8 <__libc_init_array+0x40>)
 8000aba:	4c0c      	ldr	r4, [pc, #48]	@ (8000aec <__libc_init_array+0x44>)
 8000abc:	f000 fdb8 	bl	8001630 <_init>
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	10a4      	asrs	r4, r4, #2
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d105      	bne.n	8000ad6 <__libc_init_array+0x2e>
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad0:	4798      	blx	r3
 8000ad2:	3601      	adds	r6, #1
 8000ad4:	e7ee      	b.n	8000ab4 <__libc_init_array+0xc>
 8000ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ada:	4798      	blx	r3
 8000adc:	3601      	adds	r6, #1
 8000ade:	e7f2      	b.n	8000ac6 <__libc_init_array+0x1e>
 8000ae0:	080017e8 	.word	0x080017e8
 8000ae4:	080017e8 	.word	0x080017e8
 8000ae8:	080017e8 	.word	0x080017e8
 8000aec:	080017ec 	.word	0x080017ec

08000af0 <__retarget_lock_init_recursive>:
 8000af0:	4770      	bx	lr

08000af2 <__retarget_lock_acquire_recursive>:
 8000af2:	4770      	bx	lr

08000af4 <__retarget_lock_release_recursive>:
 8000af4:	4770      	bx	lr
	...

08000af8 <_free_r>:
 8000af8:	b538      	push	{r3, r4, r5, lr}
 8000afa:	4605      	mov	r5, r0
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d041      	beq.n	8000b84 <_free_r+0x8c>
 8000b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b04:	1f0c      	subs	r4, r1, #4
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bfb8      	it	lt
 8000b0a:	18e4      	addlt	r4, r4, r3
 8000b0c:	f000 f8e0 	bl	8000cd0 <__malloc_lock>
 8000b10:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <_free_r+0x90>)
 8000b12:	6813      	ldr	r3, [r2, #0]
 8000b14:	b933      	cbnz	r3, 8000b24 <_free_r+0x2c>
 8000b16:	6063      	str	r3, [r4, #4]
 8000b18:	6014      	str	r4, [r2, #0]
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b20:	f000 b8dc 	b.w	8000cdc <__malloc_unlock>
 8000b24:	42a3      	cmp	r3, r4
 8000b26:	d908      	bls.n	8000b3a <_free_r+0x42>
 8000b28:	6820      	ldr	r0, [r4, #0]
 8000b2a:	1821      	adds	r1, r4, r0
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf01      	itttt	eq
 8000b30:	6819      	ldreq	r1, [r3, #0]
 8000b32:	685b      	ldreq	r3, [r3, #4]
 8000b34:	1809      	addeq	r1, r1, r0
 8000b36:	6021      	streq	r1, [r4, #0]
 8000b38:	e7ed      	b.n	8000b16 <_free_r+0x1e>
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	b10b      	cbz	r3, 8000b44 <_free_r+0x4c>
 8000b40:	42a3      	cmp	r3, r4
 8000b42:	d9fa      	bls.n	8000b3a <_free_r+0x42>
 8000b44:	6811      	ldr	r1, [r2, #0]
 8000b46:	1850      	adds	r0, r2, r1
 8000b48:	42a0      	cmp	r0, r4
 8000b4a:	d10b      	bne.n	8000b64 <_free_r+0x6c>
 8000b4c:	6820      	ldr	r0, [r4, #0]
 8000b4e:	4401      	add	r1, r0
 8000b50:	1850      	adds	r0, r2, r1
 8000b52:	4283      	cmp	r3, r0
 8000b54:	6011      	str	r1, [r2, #0]
 8000b56:	d1e0      	bne.n	8000b1a <_free_r+0x22>
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	6053      	str	r3, [r2, #4]
 8000b5e:	4408      	add	r0, r1
 8000b60:	6010      	str	r0, [r2, #0]
 8000b62:	e7da      	b.n	8000b1a <_free_r+0x22>
 8000b64:	d902      	bls.n	8000b6c <_free_r+0x74>
 8000b66:	230c      	movs	r3, #12
 8000b68:	602b      	str	r3, [r5, #0]
 8000b6a:	e7d6      	b.n	8000b1a <_free_r+0x22>
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	1821      	adds	r1, r4, r0
 8000b70:	428b      	cmp	r3, r1
 8000b72:	bf04      	itt	eq
 8000b74:	6819      	ldreq	r1, [r3, #0]
 8000b76:	685b      	ldreq	r3, [r3, #4]
 8000b78:	6063      	str	r3, [r4, #4]
 8000b7a:	bf04      	itt	eq
 8000b7c:	1809      	addeq	r1, r1, r0
 8000b7e:	6021      	streq	r1, [r4, #0]
 8000b80:	6054      	str	r4, [r2, #4]
 8000b82:	e7ca      	b.n	8000b1a <_free_r+0x22>
 8000b84:	bd38      	pop	{r3, r4, r5, pc}
 8000b86:	bf00      	nop
 8000b88:	200001c4 	.word	0x200001c4

08000b8c <sbrk_aligned>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8000bcc <sbrk_aligned+0x40>)
 8000b90:	460c      	mov	r4, r1
 8000b92:	6831      	ldr	r1, [r6, #0]
 8000b94:	4605      	mov	r5, r0
 8000b96:	b911      	cbnz	r1, 8000b9e <sbrk_aligned+0x12>
 8000b98:	f000 fcb6 	bl	8001508 <_sbrk_r>
 8000b9c:	6030      	str	r0, [r6, #0]
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f000 fcb1 	bl	8001508 <_sbrk_r>
 8000ba6:	1c43      	adds	r3, r0, #1
 8000ba8:	d103      	bne.n	8000bb2 <sbrk_aligned+0x26>
 8000baa:	f04f 34ff 	mov.w	r4, #4294967295
 8000bae:	4620      	mov	r0, r4
 8000bb0:	bd70      	pop	{r4, r5, r6, pc}
 8000bb2:	1cc4      	adds	r4, r0, #3
 8000bb4:	f024 0403 	bic.w	r4, r4, #3
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	d0f8      	beq.n	8000bae <sbrk_aligned+0x22>
 8000bbc:	1a21      	subs	r1, r4, r0
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f000 fca2 	bl	8001508 <_sbrk_r>
 8000bc4:	3001      	adds	r0, #1
 8000bc6:	d1f2      	bne.n	8000bae <sbrk_aligned+0x22>
 8000bc8:	e7ef      	b.n	8000baa <sbrk_aligned+0x1e>
 8000bca:	bf00      	nop
 8000bcc:	200001c0 	.word	0x200001c0

08000bd0 <_malloc_r>:
 8000bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd4:	1ccd      	adds	r5, r1, #3
 8000bd6:	f025 0503 	bic.w	r5, r5, #3
 8000bda:	3508      	adds	r5, #8
 8000bdc:	2d0c      	cmp	r5, #12
 8000bde:	bf38      	it	cc
 8000be0:	250c      	movcc	r5, #12
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	4606      	mov	r6, r0
 8000be6:	db01      	blt.n	8000bec <_malloc_r+0x1c>
 8000be8:	42a9      	cmp	r1, r5
 8000bea:	d904      	bls.n	8000bf6 <_malloc_r+0x26>
 8000bec:	230c      	movs	r3, #12
 8000bee:	6033      	str	r3, [r6, #0]
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ccc <_malloc_r+0xfc>
 8000bfa:	f000 f869 	bl	8000cd0 <__malloc_lock>
 8000bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8000c02:	461c      	mov	r4, r3
 8000c04:	bb44      	cbnz	r4, 8000c58 <_malloc_r+0x88>
 8000c06:	4629      	mov	r1, r5
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f7ff ffbf 	bl	8000b8c <sbrk_aligned>
 8000c0e:	1c43      	adds	r3, r0, #1
 8000c10:	4604      	mov	r4, r0
 8000c12:	d158      	bne.n	8000cc6 <_malloc_r+0xf6>
 8000c14:	f8d8 4000 	ldr.w	r4, [r8]
 8000c18:	4627      	mov	r7, r4
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d143      	bne.n	8000ca6 <_malloc_r+0xd6>
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d04b      	beq.n	8000cba <_malloc_r+0xea>
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	4639      	mov	r1, r7
 8000c26:	4630      	mov	r0, r6
 8000c28:	eb04 0903 	add.w	r9, r4, r3
 8000c2c:	f000 fc6c 	bl	8001508 <_sbrk_r>
 8000c30:	4581      	cmp	r9, r0
 8000c32:	d142      	bne.n	8000cba <_malloc_r+0xea>
 8000c34:	6821      	ldr	r1, [r4, #0]
 8000c36:	1a6d      	subs	r5, r5, r1
 8000c38:	4629      	mov	r1, r5
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f7ff ffa6 	bl	8000b8c <sbrk_aligned>
 8000c40:	3001      	adds	r0, #1
 8000c42:	d03a      	beq.n	8000cba <_malloc_r+0xea>
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	442b      	add	r3, r5
 8000c48:	6023      	str	r3, [r4, #0]
 8000c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	bb62      	cbnz	r2, 8000cac <_malloc_r+0xdc>
 8000c52:	f8c8 7000 	str.w	r7, [r8]
 8000c56:	e00f      	b.n	8000c78 <_malloc_r+0xa8>
 8000c58:	6822      	ldr	r2, [r4, #0]
 8000c5a:	1b52      	subs	r2, r2, r5
 8000c5c:	d420      	bmi.n	8000ca0 <_malloc_r+0xd0>
 8000c5e:	2a0b      	cmp	r2, #11
 8000c60:	d917      	bls.n	8000c92 <_malloc_r+0xc2>
 8000c62:	1961      	adds	r1, r4, r5
 8000c64:	42a3      	cmp	r3, r4
 8000c66:	6025      	str	r5, [r4, #0]
 8000c68:	bf18      	it	ne
 8000c6a:	6059      	strne	r1, [r3, #4]
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	bf08      	it	eq
 8000c70:	f8c8 1000 	streq.w	r1, [r8]
 8000c74:	5162      	str	r2, [r4, r5]
 8000c76:	604b      	str	r3, [r1, #4]
 8000c78:	4630      	mov	r0, r6
 8000c7a:	f000 f82f 	bl	8000cdc <__malloc_unlock>
 8000c7e:	f104 000b 	add.w	r0, r4, #11
 8000c82:	1d23      	adds	r3, r4, #4
 8000c84:	f020 0007 	bic.w	r0, r0, #7
 8000c88:	1ac2      	subs	r2, r0, r3
 8000c8a:	bf1c      	itt	ne
 8000c8c:	1a1b      	subne	r3, r3, r0
 8000c8e:	50a3      	strne	r3, [r4, r2]
 8000c90:	e7af      	b.n	8000bf2 <_malloc_r+0x22>
 8000c92:	6862      	ldr	r2, [r4, #4]
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	bf0c      	ite	eq
 8000c98:	f8c8 2000 	streq.w	r2, [r8]
 8000c9c:	605a      	strne	r2, [r3, #4]
 8000c9e:	e7eb      	b.n	8000c78 <_malloc_r+0xa8>
 8000ca0:	4623      	mov	r3, r4
 8000ca2:	6864      	ldr	r4, [r4, #4]
 8000ca4:	e7ae      	b.n	8000c04 <_malloc_r+0x34>
 8000ca6:	463c      	mov	r4, r7
 8000ca8:	687f      	ldr	r7, [r7, #4]
 8000caa:	e7b6      	b.n	8000c1a <_malloc_r+0x4a>
 8000cac:	461a      	mov	r2, r3
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	42a3      	cmp	r3, r4
 8000cb2:	d1fb      	bne.n	8000cac <_malloc_r+0xdc>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	6053      	str	r3, [r2, #4]
 8000cb8:	e7de      	b.n	8000c78 <_malloc_r+0xa8>
 8000cba:	230c      	movs	r3, #12
 8000cbc:	6033      	str	r3, [r6, #0]
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f000 f80c 	bl	8000cdc <__malloc_unlock>
 8000cc4:	e794      	b.n	8000bf0 <_malloc_r+0x20>
 8000cc6:	6005      	str	r5, [r0, #0]
 8000cc8:	e7d6      	b.n	8000c78 <_malloc_r+0xa8>
 8000cca:	bf00      	nop
 8000ccc:	200001c4 	.word	0x200001c4

08000cd0 <__malloc_lock>:
 8000cd0:	4801      	ldr	r0, [pc, #4]	@ (8000cd8 <__malloc_lock+0x8>)
 8000cd2:	f7ff bf0e 	b.w	8000af2 <__retarget_lock_acquire_recursive>
 8000cd6:	bf00      	nop
 8000cd8:	200001bc 	.word	0x200001bc

08000cdc <__malloc_unlock>:
 8000cdc:	4801      	ldr	r0, [pc, #4]	@ (8000ce4 <__malloc_unlock+0x8>)
 8000cde:	f7ff bf09 	b.w	8000af4 <__retarget_lock_release_recursive>
 8000ce2:	bf00      	nop
 8000ce4:	200001bc 	.word	0x200001bc

08000ce8 <__sfputc_r>:
 8000ce8:	6893      	ldr	r3, [r2, #8]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	b410      	push	{r4}
 8000cf0:	6093      	str	r3, [r2, #8]
 8000cf2:	da08      	bge.n	8000d06 <__sfputc_r+0x1e>
 8000cf4:	6994      	ldr	r4, [r2, #24]
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	db01      	blt.n	8000cfe <__sfputc_r+0x16>
 8000cfa:	290a      	cmp	r1, #10
 8000cfc:	d103      	bne.n	8000d06 <__sfputc_r+0x1e>
 8000cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d02:	f000 bb6d 	b.w	80013e0 <__swbuf_r>
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	1c58      	adds	r0, r3, #1
 8000d0a:	6010      	str	r0, [r2, #0]
 8000d0c:	7019      	strb	r1, [r3, #0]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <__sfputs_r>:
 8000d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d18:	4606      	mov	r6, r0
 8000d1a:	460f      	mov	r7, r1
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	18d5      	adds	r5, r2, r3
 8000d20:	42ac      	cmp	r4, r5
 8000d22:	d101      	bne.n	8000d28 <__sfputs_r+0x12>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e007      	b.n	8000d38 <__sfputs_r+0x22>
 8000d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d2c:	463a      	mov	r2, r7
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f7ff ffda 	bl	8000ce8 <__sfputc_r>
 8000d34:	1c43      	adds	r3, r0, #1
 8000d36:	d1f3      	bne.n	8000d20 <__sfputs_r+0xa>
 8000d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d3c <_vfiprintf_r>:
 8000d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d40:	460d      	mov	r5, r1
 8000d42:	b09d      	sub	sp, #116	@ 0x74
 8000d44:	4614      	mov	r4, r2
 8000d46:	4698      	mov	r8, r3
 8000d48:	4606      	mov	r6, r0
 8000d4a:	b118      	cbz	r0, 8000d54 <_vfiprintf_r+0x18>
 8000d4c:	6a03      	ldr	r3, [r0, #32]
 8000d4e:	b90b      	cbnz	r3, 8000d54 <_vfiprintf_r+0x18>
 8000d50:	f7ff fdca 	bl	80008e8 <__sinit>
 8000d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d56:	07d9      	lsls	r1, r3, #31
 8000d58:	d405      	bmi.n	8000d66 <_vfiprintf_r+0x2a>
 8000d5a:	89ab      	ldrh	r3, [r5, #12]
 8000d5c:	059a      	lsls	r2, r3, #22
 8000d5e:	d402      	bmi.n	8000d66 <_vfiprintf_r+0x2a>
 8000d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d62:	f7ff fec6 	bl	8000af2 <__retarget_lock_acquire_recursive>
 8000d66:	89ab      	ldrh	r3, [r5, #12]
 8000d68:	071b      	lsls	r3, r3, #28
 8000d6a:	d501      	bpl.n	8000d70 <_vfiprintf_r+0x34>
 8000d6c:	692b      	ldr	r3, [r5, #16]
 8000d6e:	b99b      	cbnz	r3, 8000d98 <_vfiprintf_r+0x5c>
 8000d70:	4629      	mov	r1, r5
 8000d72:	4630      	mov	r0, r6
 8000d74:	f000 fb72 	bl	800145c <__swsetup_r>
 8000d78:	b170      	cbz	r0, 8000d98 <_vfiprintf_r+0x5c>
 8000d7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d7c:	07dc      	lsls	r4, r3, #31
 8000d7e:	d504      	bpl.n	8000d8a <_vfiprintf_r+0x4e>
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	b01d      	add	sp, #116	@ 0x74
 8000d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8a:	89ab      	ldrh	r3, [r5, #12]
 8000d8c:	0598      	lsls	r0, r3, #22
 8000d8e:	d4f7      	bmi.n	8000d80 <_vfiprintf_r+0x44>
 8000d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d92:	f7ff feaf 	bl	8000af4 <__retarget_lock_release_recursive>
 8000d96:	e7f3      	b.n	8000d80 <_vfiprintf_r+0x44>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000da6:	2330      	movs	r3, #48	@ 0x30
 8000da8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f58 <_vfiprintf_r+0x21c>
 8000dac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000db0:	f04f 0901 	mov.w	r9, #1
 8000db4:	4623      	mov	r3, r4
 8000db6:	469a      	mov	sl, r3
 8000db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dbc:	b10a      	cbz	r2, 8000dc2 <_vfiprintf_r+0x86>
 8000dbe:	2a25      	cmp	r2, #37	@ 0x25
 8000dc0:	d1f9      	bne.n	8000db6 <_vfiprintf_r+0x7a>
 8000dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8000dc6:	d00b      	beq.n	8000de0 <_vfiprintf_r+0xa4>
 8000dc8:	465b      	mov	r3, fp
 8000dca:	4622      	mov	r2, r4
 8000dcc:	4629      	mov	r1, r5
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f7ff ffa1 	bl	8000d16 <__sfputs_r>
 8000dd4:	3001      	adds	r0, #1
 8000dd6:	f000 80a7 	beq.w	8000f28 <_vfiprintf_r+0x1ec>
 8000dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ddc:	445a      	add	r2, fp
 8000dde:	9209      	str	r2, [sp, #36]	@ 0x24
 8000de0:	f89a 3000 	ldrb.w	r3, [sl]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 809f 	beq.w	8000f28 <_vfiprintf_r+0x1ec>
 8000dea:	2300      	movs	r3, #0
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000df4:	f10a 0a01 	add.w	sl, sl, #1
 8000df8:	9304      	str	r3, [sp, #16]
 8000dfa:	9307      	str	r3, [sp, #28]
 8000dfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e00:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e02:	4654      	mov	r4, sl
 8000e04:	2205      	movs	r2, #5
 8000e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e0a:	4853      	ldr	r0, [pc, #332]	@ (8000f58 <_vfiprintf_r+0x21c>)
 8000e0c:	f7ff f9e8 	bl	80001e0 <memchr>
 8000e10:	9a04      	ldr	r2, [sp, #16]
 8000e12:	b9d8      	cbnz	r0, 8000e4c <_vfiprintf_r+0x110>
 8000e14:	06d1      	lsls	r1, r2, #27
 8000e16:	bf44      	itt	mi
 8000e18:	2320      	movmi	r3, #32
 8000e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e1e:	0713      	lsls	r3, r2, #28
 8000e20:	bf44      	itt	mi
 8000e22:	232b      	movmi	r3, #43	@ 0x2b
 8000e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e28:	f89a 3000 	ldrb.w	r3, [sl]
 8000e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e2e:	d015      	beq.n	8000e5c <_vfiprintf_r+0x120>
 8000e30:	9a07      	ldr	r2, [sp, #28]
 8000e32:	4654      	mov	r4, sl
 8000e34:	2000      	movs	r0, #0
 8000e36:	f04f 0c0a 	mov.w	ip, #10
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e40:	3b30      	subs	r3, #48	@ 0x30
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	d94b      	bls.n	8000ede <_vfiprintf_r+0x1a2>
 8000e46:	b1b0      	cbz	r0, 8000e76 <_vfiprintf_r+0x13a>
 8000e48:	9207      	str	r2, [sp, #28]
 8000e4a:	e014      	b.n	8000e76 <_vfiprintf_r+0x13a>
 8000e4c:	eba0 0308 	sub.w	r3, r0, r8
 8000e50:	fa09 f303 	lsl.w	r3, r9, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	9304      	str	r3, [sp, #16]
 8000e58:	46a2      	mov	sl, r4
 8000e5a:	e7d2      	b.n	8000e02 <_vfiprintf_r+0xc6>
 8000e5c:	9b03      	ldr	r3, [sp, #12]
 8000e5e:	1d19      	adds	r1, r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	9103      	str	r1, [sp, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bfbb      	ittet	lt
 8000e68:	425b      	neglt	r3, r3
 8000e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e6e:	9307      	strge	r3, [sp, #28]
 8000e70:	9307      	strlt	r3, [sp, #28]
 8000e72:	bfb8      	it	lt
 8000e74:	9204      	strlt	r2, [sp, #16]
 8000e76:	7823      	ldrb	r3, [r4, #0]
 8000e78:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e7a:	d10a      	bne.n	8000e92 <_vfiprintf_r+0x156>
 8000e7c:	7863      	ldrb	r3, [r4, #1]
 8000e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e80:	d132      	bne.n	8000ee8 <_vfiprintf_r+0x1ac>
 8000e82:	9b03      	ldr	r3, [sp, #12]
 8000e84:	1d1a      	adds	r2, r3, #4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	9203      	str	r2, [sp, #12]
 8000e8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e8e:	3402      	adds	r4, #2
 8000e90:	9305      	str	r3, [sp, #20]
 8000e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f68 <_vfiprintf_r+0x22c>
 8000e96:	7821      	ldrb	r1, [r4, #0]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4650      	mov	r0, sl
 8000e9c:	f7ff f9a0 	bl	80001e0 <memchr>
 8000ea0:	b138      	cbz	r0, 8000eb2 <_vfiprintf_r+0x176>
 8000ea2:	9b04      	ldr	r3, [sp, #16]
 8000ea4:	eba0 000a 	sub.w	r0, r0, sl
 8000ea8:	2240      	movs	r2, #64	@ 0x40
 8000eaa:	4082      	lsls	r2, r0
 8000eac:	4313      	orrs	r3, r2
 8000eae:	3401      	adds	r4, #1
 8000eb0:	9304      	str	r3, [sp, #16]
 8000eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eb6:	4829      	ldr	r0, [pc, #164]	@ (8000f5c <_vfiprintf_r+0x220>)
 8000eb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ebc:	2206      	movs	r2, #6
 8000ebe:	f7ff f98f 	bl	80001e0 <memchr>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d03f      	beq.n	8000f46 <_vfiprintf_r+0x20a>
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <_vfiprintf_r+0x224>)
 8000ec8:	bb1b      	cbnz	r3, 8000f12 <_vfiprintf_r+0x1d6>
 8000eca:	9b03      	ldr	r3, [sp, #12]
 8000ecc:	3307      	adds	r3, #7
 8000ece:	f023 0307 	bic.w	r3, r3, #7
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	9303      	str	r3, [sp, #12]
 8000ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ed8:	443b      	add	r3, r7
 8000eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8000edc:	e76a      	b.n	8000db4 <_vfiprintf_r+0x78>
 8000ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ee2:	460c      	mov	r4, r1
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	e7a8      	b.n	8000e3a <_vfiprintf_r+0xfe>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	3401      	adds	r4, #1
 8000eec:	9305      	str	r3, [sp, #20]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 0c0a 	mov.w	ip, #10
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000efa:	3a30      	subs	r2, #48	@ 0x30
 8000efc:	2a09      	cmp	r2, #9
 8000efe:	d903      	bls.n	8000f08 <_vfiprintf_r+0x1cc>
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0c6      	beq.n	8000e92 <_vfiprintf_r+0x156>
 8000f04:	9105      	str	r1, [sp, #20]
 8000f06:	e7c4      	b.n	8000e92 <_vfiprintf_r+0x156>
 8000f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e7f0      	b.n	8000ef4 <_vfiprintf_r+0x1b8>
 8000f12:	ab03      	add	r3, sp, #12
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	462a      	mov	r2, r5
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <_vfiprintf_r+0x228>)
 8000f1a:	a904      	add	r1, sp, #16
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f3af 8000 	nop.w
 8000f22:	4607      	mov	r7, r0
 8000f24:	1c78      	adds	r0, r7, #1
 8000f26:	d1d6      	bne.n	8000ed6 <_vfiprintf_r+0x19a>
 8000f28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f2a:	07d9      	lsls	r1, r3, #31
 8000f2c:	d405      	bmi.n	8000f3a <_vfiprintf_r+0x1fe>
 8000f2e:	89ab      	ldrh	r3, [r5, #12]
 8000f30:	059a      	lsls	r2, r3, #22
 8000f32:	d402      	bmi.n	8000f3a <_vfiprintf_r+0x1fe>
 8000f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f36:	f7ff fddd 	bl	8000af4 <__retarget_lock_release_recursive>
 8000f3a:	89ab      	ldrh	r3, [r5, #12]
 8000f3c:	065b      	lsls	r3, r3, #25
 8000f3e:	f53f af1f 	bmi.w	8000d80 <_vfiprintf_r+0x44>
 8000f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f44:	e71e      	b.n	8000d84 <_vfiprintf_r+0x48>
 8000f46:	ab03      	add	r3, sp, #12
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	462a      	mov	r2, r5
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <_vfiprintf_r+0x228>)
 8000f4e:	a904      	add	r1, sp, #16
 8000f50:	4630      	mov	r0, r6
 8000f52:	f000 f879 	bl	8001048 <_printf_i>
 8000f56:	e7e4      	b.n	8000f22 <_vfiprintf_r+0x1e6>
 8000f58:	080017aa 	.word	0x080017aa
 8000f5c:	080017b4 	.word	0x080017b4
 8000f60:	00000000 	.word	0x00000000
 8000f64:	08000d17 	.word	0x08000d17
 8000f68:	080017b0 	.word	0x080017b0

08000f6c <_printf_common>:
 8000f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	4616      	mov	r6, r2
 8000f72:	4698      	mov	r8, r3
 8000f74:	688a      	ldr	r2, [r1, #8]
 8000f76:	690b      	ldr	r3, [r1, #16]
 8000f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	bfb8      	it	lt
 8000f80:	4613      	movlt	r3, r2
 8000f82:	6033      	str	r3, [r6, #0]
 8000f84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f88:	4607      	mov	r7, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	b10a      	cbz	r2, 8000f92 <_printf_common+0x26>
 8000f8e:	3301      	adds	r3, #1
 8000f90:	6033      	str	r3, [r6, #0]
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	0699      	lsls	r1, r3, #26
 8000f96:	bf42      	ittt	mi
 8000f98:	6833      	ldrmi	r3, [r6, #0]
 8000f9a:	3302      	addmi	r3, #2
 8000f9c:	6033      	strmi	r3, [r6, #0]
 8000f9e:	6825      	ldr	r5, [r4, #0]
 8000fa0:	f015 0506 	ands.w	r5, r5, #6
 8000fa4:	d106      	bne.n	8000fb4 <_printf_common+0x48>
 8000fa6:	f104 0a19 	add.w	sl, r4, #25
 8000faa:	68e3      	ldr	r3, [r4, #12]
 8000fac:	6832      	ldr	r2, [r6, #0]
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	dc26      	bgt.n	8001002 <_printf_common+0x96>
 8000fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	3b00      	subs	r3, #0
 8000fbc:	bf18      	it	ne
 8000fbe:	2301      	movne	r3, #1
 8000fc0:	0692      	lsls	r2, r2, #26
 8000fc2:	d42b      	bmi.n	800101c <_printf_common+0xb0>
 8000fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fc8:	4641      	mov	r1, r8
 8000fca:	4638      	mov	r0, r7
 8000fcc:	47c8      	blx	r9
 8000fce:	3001      	adds	r0, #1
 8000fd0:	d01e      	beq.n	8001010 <_printf_common+0xa4>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	6922      	ldr	r2, [r4, #16]
 8000fd6:	f003 0306 	and.w	r3, r3, #6
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf02      	ittt	eq
 8000fde:	68e5      	ldreq	r5, [r4, #12]
 8000fe0:	6833      	ldreq	r3, [r6, #0]
 8000fe2:	1aed      	subeq	r5, r5, r3
 8000fe4:	68a3      	ldr	r3, [r4, #8]
 8000fe6:	bf0c      	ite	eq
 8000fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fec:	2500      	movne	r5, #0
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	bfc4      	itt	gt
 8000ff2:	1a9b      	subgt	r3, r3, r2
 8000ff4:	18ed      	addgt	r5, r5, r3
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	341a      	adds	r4, #26
 8000ffa:	42b5      	cmp	r5, r6
 8000ffc:	d11a      	bne.n	8001034 <_printf_common+0xc8>
 8000ffe:	2000      	movs	r0, #0
 8001000:	e008      	b.n	8001014 <_printf_common+0xa8>
 8001002:	2301      	movs	r3, #1
 8001004:	4652      	mov	r2, sl
 8001006:	4641      	mov	r1, r8
 8001008:	4638      	mov	r0, r7
 800100a:	47c8      	blx	r9
 800100c:	3001      	adds	r0, #1
 800100e:	d103      	bne.n	8001018 <_printf_common+0xac>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001018:	3501      	adds	r5, #1
 800101a:	e7c6      	b.n	8000faa <_printf_common+0x3e>
 800101c:	18e1      	adds	r1, r4, r3
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	2030      	movs	r0, #48	@ 0x30
 8001022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001026:	4422      	add	r2, r4
 8001028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800102c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001030:	3302      	adds	r3, #2
 8001032:	e7c7      	b.n	8000fc4 <_printf_common+0x58>
 8001034:	2301      	movs	r3, #1
 8001036:	4622      	mov	r2, r4
 8001038:	4641      	mov	r1, r8
 800103a:	4638      	mov	r0, r7
 800103c:	47c8      	blx	r9
 800103e:	3001      	adds	r0, #1
 8001040:	d0e6      	beq.n	8001010 <_printf_common+0xa4>
 8001042:	3601      	adds	r6, #1
 8001044:	e7d9      	b.n	8000ffa <_printf_common+0x8e>
	...

08001048 <_printf_i>:
 8001048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800104c:	7e0f      	ldrb	r7, [r1, #24]
 800104e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001050:	2f78      	cmp	r7, #120	@ 0x78
 8001052:	4691      	mov	r9, r2
 8001054:	4680      	mov	r8, r0
 8001056:	460c      	mov	r4, r1
 8001058:	469a      	mov	sl, r3
 800105a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800105e:	d807      	bhi.n	8001070 <_printf_i+0x28>
 8001060:	2f62      	cmp	r7, #98	@ 0x62
 8001062:	d80a      	bhi.n	800107a <_printf_i+0x32>
 8001064:	2f00      	cmp	r7, #0
 8001066:	f000 80d2 	beq.w	800120e <_printf_i+0x1c6>
 800106a:	2f58      	cmp	r7, #88	@ 0x58
 800106c:	f000 80b9 	beq.w	80011e2 <_printf_i+0x19a>
 8001070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001078:	e03a      	b.n	80010f0 <_printf_i+0xa8>
 800107a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800107e:	2b15      	cmp	r3, #21
 8001080:	d8f6      	bhi.n	8001070 <_printf_i+0x28>
 8001082:	a101      	add	r1, pc, #4	@ (adr r1, 8001088 <_printf_i+0x40>)
 8001084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001088:	080010e1 	.word	0x080010e1
 800108c:	080010f5 	.word	0x080010f5
 8001090:	08001071 	.word	0x08001071
 8001094:	08001071 	.word	0x08001071
 8001098:	08001071 	.word	0x08001071
 800109c:	08001071 	.word	0x08001071
 80010a0:	080010f5 	.word	0x080010f5
 80010a4:	08001071 	.word	0x08001071
 80010a8:	08001071 	.word	0x08001071
 80010ac:	08001071 	.word	0x08001071
 80010b0:	08001071 	.word	0x08001071
 80010b4:	080011f5 	.word	0x080011f5
 80010b8:	0800111f 	.word	0x0800111f
 80010bc:	080011af 	.word	0x080011af
 80010c0:	08001071 	.word	0x08001071
 80010c4:	08001071 	.word	0x08001071
 80010c8:	08001217 	.word	0x08001217
 80010cc:	08001071 	.word	0x08001071
 80010d0:	0800111f 	.word	0x0800111f
 80010d4:	08001071 	.word	0x08001071
 80010d8:	08001071 	.word	0x08001071
 80010dc:	080011b7 	.word	0x080011b7
 80010e0:	6833      	ldr	r3, [r6, #0]
 80010e2:	1d1a      	adds	r2, r3, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6032      	str	r2, [r6, #0]
 80010e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010f0:	2301      	movs	r3, #1
 80010f2:	e09d      	b.n	8001230 <_printf_i+0x1e8>
 80010f4:	6833      	ldr	r3, [r6, #0]
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	1d19      	adds	r1, r3, #4
 80010fa:	6031      	str	r1, [r6, #0]
 80010fc:	0606      	lsls	r6, r0, #24
 80010fe:	d501      	bpl.n	8001104 <_printf_i+0xbc>
 8001100:	681d      	ldr	r5, [r3, #0]
 8001102:	e003      	b.n	800110c <_printf_i+0xc4>
 8001104:	0645      	lsls	r5, r0, #25
 8001106:	d5fb      	bpl.n	8001100 <_printf_i+0xb8>
 8001108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800110c:	2d00      	cmp	r5, #0
 800110e:	da03      	bge.n	8001118 <_printf_i+0xd0>
 8001110:	232d      	movs	r3, #45	@ 0x2d
 8001112:	426d      	negs	r5, r5
 8001114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001118:	4859      	ldr	r0, [pc, #356]	@ (8001280 <_printf_i+0x238>)
 800111a:	230a      	movs	r3, #10
 800111c:	e011      	b.n	8001142 <_printf_i+0xfa>
 800111e:	6821      	ldr	r1, [r4, #0]
 8001120:	6833      	ldr	r3, [r6, #0]
 8001122:	0608      	lsls	r0, r1, #24
 8001124:	f853 5b04 	ldr.w	r5, [r3], #4
 8001128:	d402      	bmi.n	8001130 <_printf_i+0xe8>
 800112a:	0649      	lsls	r1, r1, #25
 800112c:	bf48      	it	mi
 800112e:	b2ad      	uxthmi	r5, r5
 8001130:	2f6f      	cmp	r7, #111	@ 0x6f
 8001132:	4853      	ldr	r0, [pc, #332]	@ (8001280 <_printf_i+0x238>)
 8001134:	6033      	str	r3, [r6, #0]
 8001136:	bf14      	ite	ne
 8001138:	230a      	movne	r3, #10
 800113a:	2308      	moveq	r3, #8
 800113c:	2100      	movs	r1, #0
 800113e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001142:	6866      	ldr	r6, [r4, #4]
 8001144:	60a6      	str	r6, [r4, #8]
 8001146:	2e00      	cmp	r6, #0
 8001148:	bfa2      	ittt	ge
 800114a:	6821      	ldrge	r1, [r4, #0]
 800114c:	f021 0104 	bicge.w	r1, r1, #4
 8001150:	6021      	strge	r1, [r4, #0]
 8001152:	b90d      	cbnz	r5, 8001158 <_printf_i+0x110>
 8001154:	2e00      	cmp	r6, #0
 8001156:	d04b      	beq.n	80011f0 <_printf_i+0x1a8>
 8001158:	4616      	mov	r6, r2
 800115a:	fbb5 f1f3 	udiv	r1, r5, r3
 800115e:	fb03 5711 	mls	r7, r3, r1, r5
 8001162:	5dc7      	ldrb	r7, [r0, r7]
 8001164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001168:	462f      	mov	r7, r5
 800116a:	42bb      	cmp	r3, r7
 800116c:	460d      	mov	r5, r1
 800116e:	d9f4      	bls.n	800115a <_printf_i+0x112>
 8001170:	2b08      	cmp	r3, #8
 8001172:	d10b      	bne.n	800118c <_printf_i+0x144>
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	07df      	lsls	r7, r3, #31
 8001178:	d508      	bpl.n	800118c <_printf_i+0x144>
 800117a:	6923      	ldr	r3, [r4, #16]
 800117c:	6861      	ldr	r1, [r4, #4]
 800117e:	4299      	cmp	r1, r3
 8001180:	bfde      	ittt	le
 8001182:	2330      	movle	r3, #48	@ 0x30
 8001184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800118c:	1b92      	subs	r2, r2, r6
 800118e:	6122      	str	r2, [r4, #16]
 8001190:	f8cd a000 	str.w	sl, [sp]
 8001194:	464b      	mov	r3, r9
 8001196:	aa03      	add	r2, sp, #12
 8001198:	4621      	mov	r1, r4
 800119a:	4640      	mov	r0, r8
 800119c:	f7ff fee6 	bl	8000f6c <_printf_common>
 80011a0:	3001      	adds	r0, #1
 80011a2:	d14a      	bne.n	800123a <_printf_i+0x1f2>
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	b004      	add	sp, #16
 80011aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	4833      	ldr	r0, [pc, #204]	@ (8001284 <_printf_i+0x23c>)
 80011b8:	2778      	movs	r7, #120	@ 0x78
 80011ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	6831      	ldr	r1, [r6, #0]
 80011c2:	061f      	lsls	r7, r3, #24
 80011c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80011c8:	d402      	bmi.n	80011d0 <_printf_i+0x188>
 80011ca:	065f      	lsls	r7, r3, #25
 80011cc:	bf48      	it	mi
 80011ce:	b2ad      	uxthmi	r5, r5
 80011d0:	6031      	str	r1, [r6, #0]
 80011d2:	07d9      	lsls	r1, r3, #31
 80011d4:	bf44      	itt	mi
 80011d6:	f043 0320 	orrmi.w	r3, r3, #32
 80011da:	6023      	strmi	r3, [r4, #0]
 80011dc:	b11d      	cbz	r5, 80011e6 <_printf_i+0x19e>
 80011de:	2310      	movs	r3, #16
 80011e0:	e7ac      	b.n	800113c <_printf_i+0xf4>
 80011e2:	4827      	ldr	r0, [pc, #156]	@ (8001280 <_printf_i+0x238>)
 80011e4:	e7e9      	b.n	80011ba <_printf_i+0x172>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f023 0320 	bic.w	r3, r3, #32
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	e7f6      	b.n	80011de <_printf_i+0x196>
 80011f0:	4616      	mov	r6, r2
 80011f2:	e7bd      	b.n	8001170 <_printf_i+0x128>
 80011f4:	6833      	ldr	r3, [r6, #0]
 80011f6:	6825      	ldr	r5, [r4, #0]
 80011f8:	6961      	ldr	r1, [r4, #20]
 80011fa:	1d18      	adds	r0, r3, #4
 80011fc:	6030      	str	r0, [r6, #0]
 80011fe:	062e      	lsls	r6, r5, #24
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	d501      	bpl.n	8001208 <_printf_i+0x1c0>
 8001204:	6019      	str	r1, [r3, #0]
 8001206:	e002      	b.n	800120e <_printf_i+0x1c6>
 8001208:	0668      	lsls	r0, r5, #25
 800120a:	d5fb      	bpl.n	8001204 <_printf_i+0x1bc>
 800120c:	8019      	strh	r1, [r3, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	6123      	str	r3, [r4, #16]
 8001212:	4616      	mov	r6, r2
 8001214:	e7bc      	b.n	8001190 <_printf_i+0x148>
 8001216:	6833      	ldr	r3, [r6, #0]
 8001218:	1d1a      	adds	r2, r3, #4
 800121a:	6032      	str	r2, [r6, #0]
 800121c:	681e      	ldr	r6, [r3, #0]
 800121e:	6862      	ldr	r2, [r4, #4]
 8001220:	2100      	movs	r1, #0
 8001222:	4630      	mov	r0, r6
 8001224:	f7fe ffdc 	bl	80001e0 <memchr>
 8001228:	b108      	cbz	r0, 800122e <_printf_i+0x1e6>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	6060      	str	r0, [r4, #4]
 800122e:	6863      	ldr	r3, [r4, #4]
 8001230:	6123      	str	r3, [r4, #16]
 8001232:	2300      	movs	r3, #0
 8001234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001238:	e7aa      	b.n	8001190 <_printf_i+0x148>
 800123a:	6923      	ldr	r3, [r4, #16]
 800123c:	4632      	mov	r2, r6
 800123e:	4649      	mov	r1, r9
 8001240:	4640      	mov	r0, r8
 8001242:	47d0      	blx	sl
 8001244:	3001      	adds	r0, #1
 8001246:	d0ad      	beq.n	80011a4 <_printf_i+0x15c>
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	079b      	lsls	r3, r3, #30
 800124c:	d413      	bmi.n	8001276 <_printf_i+0x22e>
 800124e:	68e0      	ldr	r0, [r4, #12]
 8001250:	9b03      	ldr	r3, [sp, #12]
 8001252:	4298      	cmp	r0, r3
 8001254:	bfb8      	it	lt
 8001256:	4618      	movlt	r0, r3
 8001258:	e7a6      	b.n	80011a8 <_printf_i+0x160>
 800125a:	2301      	movs	r3, #1
 800125c:	4632      	mov	r2, r6
 800125e:	4649      	mov	r1, r9
 8001260:	4640      	mov	r0, r8
 8001262:	47d0      	blx	sl
 8001264:	3001      	adds	r0, #1
 8001266:	d09d      	beq.n	80011a4 <_printf_i+0x15c>
 8001268:	3501      	adds	r5, #1
 800126a:	68e3      	ldr	r3, [r4, #12]
 800126c:	9903      	ldr	r1, [sp, #12]
 800126e:	1a5b      	subs	r3, r3, r1
 8001270:	42ab      	cmp	r3, r5
 8001272:	dcf2      	bgt.n	800125a <_printf_i+0x212>
 8001274:	e7eb      	b.n	800124e <_printf_i+0x206>
 8001276:	2500      	movs	r5, #0
 8001278:	f104 0619 	add.w	r6, r4, #25
 800127c:	e7f5      	b.n	800126a <_printf_i+0x222>
 800127e:	bf00      	nop
 8001280:	080017bb 	.word	0x080017bb
 8001284:	080017cc 	.word	0x080017cc

08001288 <__sflush_r>:
 8001288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001290:	0716      	lsls	r6, r2, #28
 8001292:	4605      	mov	r5, r0
 8001294:	460c      	mov	r4, r1
 8001296:	d454      	bmi.n	8001342 <__sflush_r+0xba>
 8001298:	684b      	ldr	r3, [r1, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	dc02      	bgt.n	80012a4 <__sflush_r+0x1c>
 800129e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	dd48      	ble.n	8001336 <__sflush_r+0xae>
 80012a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d045      	beq.n	8001336 <__sflush_r+0xae>
 80012aa:	2300      	movs	r3, #0
 80012ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012b0:	682f      	ldr	r7, [r5, #0]
 80012b2:	6a21      	ldr	r1, [r4, #32]
 80012b4:	602b      	str	r3, [r5, #0]
 80012b6:	d030      	beq.n	800131a <__sflush_r+0x92>
 80012b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	0759      	lsls	r1, r3, #29
 80012be:	d505      	bpl.n	80012cc <__sflush_r+0x44>
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	1ad2      	subs	r2, r2, r3
 80012c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012c6:	b10b      	cbz	r3, 80012cc <__sflush_r+0x44>
 80012c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012ca:	1ad2      	subs	r2, r2, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012d0:	6a21      	ldr	r1, [r4, #32]
 80012d2:	4628      	mov	r0, r5
 80012d4:	47b0      	blx	r6
 80012d6:	1c43      	adds	r3, r0, #1
 80012d8:	89a3      	ldrh	r3, [r4, #12]
 80012da:	d106      	bne.n	80012ea <__sflush_r+0x62>
 80012dc:	6829      	ldr	r1, [r5, #0]
 80012de:	291d      	cmp	r1, #29
 80012e0:	d82b      	bhi.n	800133a <__sflush_r+0xb2>
 80012e2:	4a2a      	ldr	r2, [pc, #168]	@ (800138c <__sflush_r+0x104>)
 80012e4:	410a      	asrs	r2, r1
 80012e6:	07d6      	lsls	r6, r2, #31
 80012e8:	d427      	bmi.n	800133a <__sflush_r+0xb2>
 80012ea:	2200      	movs	r2, #0
 80012ec:	6062      	str	r2, [r4, #4]
 80012ee:	04d9      	lsls	r1, r3, #19
 80012f0:	6922      	ldr	r2, [r4, #16]
 80012f2:	6022      	str	r2, [r4, #0]
 80012f4:	d504      	bpl.n	8001300 <__sflush_r+0x78>
 80012f6:	1c42      	adds	r2, r0, #1
 80012f8:	d101      	bne.n	80012fe <__sflush_r+0x76>
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	b903      	cbnz	r3, 8001300 <__sflush_r+0x78>
 80012fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8001300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001302:	602f      	str	r7, [r5, #0]
 8001304:	b1b9      	cbz	r1, 8001336 <__sflush_r+0xae>
 8001306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800130a:	4299      	cmp	r1, r3
 800130c:	d002      	beq.n	8001314 <__sflush_r+0x8c>
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff fbf2 	bl	8000af8 <_free_r>
 8001314:	2300      	movs	r3, #0
 8001316:	6363      	str	r3, [r4, #52]	@ 0x34
 8001318:	e00d      	b.n	8001336 <__sflush_r+0xae>
 800131a:	2301      	movs	r3, #1
 800131c:	4628      	mov	r0, r5
 800131e:	47b0      	blx	r6
 8001320:	4602      	mov	r2, r0
 8001322:	1c50      	adds	r0, r2, #1
 8001324:	d1c9      	bne.n	80012ba <__sflush_r+0x32>
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0c6      	beq.n	80012ba <__sflush_r+0x32>
 800132c:	2b1d      	cmp	r3, #29
 800132e:	d001      	beq.n	8001334 <__sflush_r+0xac>
 8001330:	2b16      	cmp	r3, #22
 8001332:	d11e      	bne.n	8001372 <__sflush_r+0xea>
 8001334:	602f      	str	r7, [r5, #0]
 8001336:	2000      	movs	r0, #0
 8001338:	e022      	b.n	8001380 <__sflush_r+0xf8>
 800133a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800133e:	b21b      	sxth	r3, r3
 8001340:	e01b      	b.n	800137a <__sflush_r+0xf2>
 8001342:	690f      	ldr	r7, [r1, #16]
 8001344:	2f00      	cmp	r7, #0
 8001346:	d0f6      	beq.n	8001336 <__sflush_r+0xae>
 8001348:	0793      	lsls	r3, r2, #30
 800134a:	680e      	ldr	r6, [r1, #0]
 800134c:	bf08      	it	eq
 800134e:	694b      	ldreq	r3, [r1, #20]
 8001350:	600f      	str	r7, [r1, #0]
 8001352:	bf18      	it	ne
 8001354:	2300      	movne	r3, #0
 8001356:	eba6 0807 	sub.w	r8, r6, r7
 800135a:	608b      	str	r3, [r1, #8]
 800135c:	f1b8 0f00 	cmp.w	r8, #0
 8001360:	dde9      	ble.n	8001336 <__sflush_r+0xae>
 8001362:	6a21      	ldr	r1, [r4, #32]
 8001364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001366:	4643      	mov	r3, r8
 8001368:	463a      	mov	r2, r7
 800136a:	4628      	mov	r0, r5
 800136c:	47b0      	blx	r6
 800136e:	2800      	cmp	r0, #0
 8001370:	dc08      	bgt.n	8001384 <__sflush_r+0xfc>
 8001372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800137a:	81a3      	strh	r3, [r4, #12]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001384:	4407      	add	r7, r0
 8001386:	eba8 0800 	sub.w	r8, r8, r0
 800138a:	e7e7      	b.n	800135c <__sflush_r+0xd4>
 800138c:	dfbffffe 	.word	0xdfbffffe

08001390 <_fflush_r>:
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	690b      	ldr	r3, [r1, #16]
 8001394:	4605      	mov	r5, r0
 8001396:	460c      	mov	r4, r1
 8001398:	b913      	cbnz	r3, 80013a0 <_fflush_r+0x10>
 800139a:	2500      	movs	r5, #0
 800139c:	4628      	mov	r0, r5
 800139e:	bd38      	pop	{r3, r4, r5, pc}
 80013a0:	b118      	cbz	r0, 80013aa <_fflush_r+0x1a>
 80013a2:	6a03      	ldr	r3, [r0, #32]
 80013a4:	b90b      	cbnz	r3, 80013aa <_fflush_r+0x1a>
 80013a6:	f7ff fa9f 	bl	80008e8 <__sinit>
 80013aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f3      	beq.n	800139a <_fflush_r+0xa>
 80013b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013b4:	07d0      	lsls	r0, r2, #31
 80013b6:	d404      	bmi.n	80013c2 <_fflush_r+0x32>
 80013b8:	0599      	lsls	r1, r3, #22
 80013ba:	d402      	bmi.n	80013c2 <_fflush_r+0x32>
 80013bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013be:	f7ff fb98 	bl	8000af2 <__retarget_lock_acquire_recursive>
 80013c2:	4628      	mov	r0, r5
 80013c4:	4621      	mov	r1, r4
 80013c6:	f7ff ff5f 	bl	8001288 <__sflush_r>
 80013ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013cc:	07da      	lsls	r2, r3, #31
 80013ce:	4605      	mov	r5, r0
 80013d0:	d4e4      	bmi.n	800139c <_fflush_r+0xc>
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	059b      	lsls	r3, r3, #22
 80013d6:	d4e1      	bmi.n	800139c <_fflush_r+0xc>
 80013d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013da:	f7ff fb8b 	bl	8000af4 <__retarget_lock_release_recursive>
 80013de:	e7dd      	b.n	800139c <_fflush_r+0xc>

080013e0 <__swbuf_r>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	460e      	mov	r6, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	4605      	mov	r5, r0
 80013e8:	b118      	cbz	r0, 80013f2 <__swbuf_r+0x12>
 80013ea:	6a03      	ldr	r3, [r0, #32]
 80013ec:	b90b      	cbnz	r3, 80013f2 <__swbuf_r+0x12>
 80013ee:	f7ff fa7b 	bl	80008e8 <__sinit>
 80013f2:	69a3      	ldr	r3, [r4, #24]
 80013f4:	60a3      	str	r3, [r4, #8]
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	071a      	lsls	r2, r3, #28
 80013fa:	d501      	bpl.n	8001400 <__swbuf_r+0x20>
 80013fc:	6923      	ldr	r3, [r4, #16]
 80013fe:	b943      	cbnz	r3, 8001412 <__swbuf_r+0x32>
 8001400:	4621      	mov	r1, r4
 8001402:	4628      	mov	r0, r5
 8001404:	f000 f82a 	bl	800145c <__swsetup_r>
 8001408:	b118      	cbz	r0, 8001412 <__swbuf_r+0x32>
 800140a:	f04f 37ff 	mov.w	r7, #4294967295
 800140e:	4638      	mov	r0, r7
 8001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	6922      	ldr	r2, [r4, #16]
 8001416:	1a98      	subs	r0, r3, r2
 8001418:	6963      	ldr	r3, [r4, #20]
 800141a:	b2f6      	uxtb	r6, r6
 800141c:	4283      	cmp	r3, r0
 800141e:	4637      	mov	r7, r6
 8001420:	dc05      	bgt.n	800142e <__swbuf_r+0x4e>
 8001422:	4621      	mov	r1, r4
 8001424:	4628      	mov	r0, r5
 8001426:	f7ff ffb3 	bl	8001390 <_fflush_r>
 800142a:	2800      	cmp	r0, #0
 800142c:	d1ed      	bne.n	800140a <__swbuf_r+0x2a>
 800142e:	68a3      	ldr	r3, [r4, #8]
 8001430:	3b01      	subs	r3, #1
 8001432:	60a3      	str	r3, [r4, #8]
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	6022      	str	r2, [r4, #0]
 800143a:	701e      	strb	r6, [r3, #0]
 800143c:	6962      	ldr	r2, [r4, #20]
 800143e:	1c43      	adds	r3, r0, #1
 8001440:	429a      	cmp	r2, r3
 8001442:	d004      	beq.n	800144e <__swbuf_r+0x6e>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	07db      	lsls	r3, r3, #31
 8001448:	d5e1      	bpl.n	800140e <__swbuf_r+0x2e>
 800144a:	2e0a      	cmp	r6, #10
 800144c:	d1df      	bne.n	800140e <__swbuf_r+0x2e>
 800144e:	4621      	mov	r1, r4
 8001450:	4628      	mov	r0, r5
 8001452:	f7ff ff9d 	bl	8001390 <_fflush_r>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0d9      	beq.n	800140e <__swbuf_r+0x2e>
 800145a:	e7d6      	b.n	800140a <__swbuf_r+0x2a>

0800145c <__swsetup_r>:
 800145c:	b538      	push	{r3, r4, r5, lr}
 800145e:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <__swsetup_r+0xa8>)
 8001460:	4605      	mov	r5, r0
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	460c      	mov	r4, r1
 8001466:	b118      	cbz	r0, 8001470 <__swsetup_r+0x14>
 8001468:	6a03      	ldr	r3, [r0, #32]
 800146a:	b90b      	cbnz	r3, 8001470 <__swsetup_r+0x14>
 800146c:	f7ff fa3c 	bl	80008e8 <__sinit>
 8001470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001474:	0719      	lsls	r1, r3, #28
 8001476:	d422      	bmi.n	80014be <__swsetup_r+0x62>
 8001478:	06da      	lsls	r2, r3, #27
 800147a:	d407      	bmi.n	800148c <__swsetup_r+0x30>
 800147c:	2209      	movs	r2, #9
 800147e:	602a      	str	r2, [r5, #0]
 8001480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001484:	81a3      	strh	r3, [r4, #12]
 8001486:	f04f 30ff 	mov.w	r0, #4294967295
 800148a:	e033      	b.n	80014f4 <__swsetup_r+0x98>
 800148c:	0758      	lsls	r0, r3, #29
 800148e:	d512      	bpl.n	80014b6 <__swsetup_r+0x5a>
 8001490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001492:	b141      	cbz	r1, 80014a6 <__swsetup_r+0x4a>
 8001494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001498:	4299      	cmp	r1, r3
 800149a:	d002      	beq.n	80014a2 <__swsetup_r+0x46>
 800149c:	4628      	mov	r0, r5
 800149e:	f7ff fb2b 	bl	8000af8 <_free_r>
 80014a2:	2300      	movs	r3, #0
 80014a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80014ac:	81a3      	strh	r3, [r4, #12]
 80014ae:	2300      	movs	r3, #0
 80014b0:	6063      	str	r3, [r4, #4]
 80014b2:	6923      	ldr	r3, [r4, #16]
 80014b4:	6023      	str	r3, [r4, #0]
 80014b6:	89a3      	ldrh	r3, [r4, #12]
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	81a3      	strh	r3, [r4, #12]
 80014be:	6923      	ldr	r3, [r4, #16]
 80014c0:	b94b      	cbnz	r3, 80014d6 <__swsetup_r+0x7a>
 80014c2:	89a3      	ldrh	r3, [r4, #12]
 80014c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80014c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014cc:	d003      	beq.n	80014d6 <__swsetup_r+0x7a>
 80014ce:	4621      	mov	r1, r4
 80014d0:	4628      	mov	r0, r5
 80014d2:	f000 f84f 	bl	8001574 <__smakebuf_r>
 80014d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014da:	f013 0201 	ands.w	r2, r3, #1
 80014de:	d00a      	beq.n	80014f6 <__swsetup_r+0x9a>
 80014e0:	2200      	movs	r2, #0
 80014e2:	60a2      	str	r2, [r4, #8]
 80014e4:	6962      	ldr	r2, [r4, #20]
 80014e6:	4252      	negs	r2, r2
 80014e8:	61a2      	str	r2, [r4, #24]
 80014ea:	6922      	ldr	r2, [r4, #16]
 80014ec:	b942      	cbnz	r2, 8001500 <__swsetup_r+0xa4>
 80014ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80014f2:	d1c5      	bne.n	8001480 <__swsetup_r+0x24>
 80014f4:	bd38      	pop	{r3, r4, r5, pc}
 80014f6:	0799      	lsls	r1, r3, #30
 80014f8:	bf58      	it	pl
 80014fa:	6962      	ldrpl	r2, [r4, #20]
 80014fc:	60a2      	str	r2, [r4, #8]
 80014fe:	e7f4      	b.n	80014ea <__swsetup_r+0x8e>
 8001500:	2000      	movs	r0, #0
 8001502:	e7f7      	b.n	80014f4 <__swsetup_r+0x98>
 8001504:	2000000c 	.word	0x2000000c

08001508 <_sbrk_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d06      	ldr	r5, [pc, #24]	@ (8001524 <_sbrk_r+0x1c>)
 800150c:	2300      	movs	r3, #0
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	f7fe ffc4 	bl	80004a0 <_sbrk>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	d102      	bne.n	8001522 <_sbrk_r+0x1a>
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	b103      	cbz	r3, 8001522 <_sbrk_r+0x1a>
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	bd38      	pop	{r3, r4, r5, pc}
 8001524:	200001b8 	.word	0x200001b8

08001528 <__swhatbuf_r>:
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	460c      	mov	r4, r1
 800152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001530:	2900      	cmp	r1, #0
 8001532:	b096      	sub	sp, #88	@ 0x58
 8001534:	4615      	mov	r5, r2
 8001536:	461e      	mov	r6, r3
 8001538:	da0d      	bge.n	8001556 <__swhatbuf_r+0x2e>
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	bf14      	ite	ne
 8001546:	2340      	movne	r3, #64	@ 0x40
 8001548:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800154c:	2000      	movs	r0, #0
 800154e:	6031      	str	r1, [r6, #0]
 8001550:	602b      	str	r3, [r5, #0]
 8001552:	b016      	add	sp, #88	@ 0x58
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	466a      	mov	r2, sp
 8001558:	f000 f848 	bl	80015ec <_fstat_r>
 800155c:	2800      	cmp	r0, #0
 800155e:	dbec      	blt.n	800153a <__swhatbuf_r+0x12>
 8001560:	9901      	ldr	r1, [sp, #4]
 8001562:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001566:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800156a:	4259      	negs	r1, r3
 800156c:	4159      	adcs	r1, r3
 800156e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001572:	e7eb      	b.n	800154c <__swhatbuf_r+0x24>

08001574 <__smakebuf_r>:
 8001574:	898b      	ldrh	r3, [r1, #12]
 8001576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001578:	079d      	lsls	r5, r3, #30
 800157a:	4606      	mov	r6, r0
 800157c:	460c      	mov	r4, r1
 800157e:	d507      	bpl.n	8001590 <__smakebuf_r+0x1c>
 8001580:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	6123      	str	r3, [r4, #16]
 8001588:	2301      	movs	r3, #1
 800158a:	6163      	str	r3, [r4, #20]
 800158c:	b003      	add	sp, #12
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001590:	ab01      	add	r3, sp, #4
 8001592:	466a      	mov	r2, sp
 8001594:	f7ff ffc8 	bl	8001528 <__swhatbuf_r>
 8001598:	9f00      	ldr	r7, [sp, #0]
 800159a:	4605      	mov	r5, r0
 800159c:	4639      	mov	r1, r7
 800159e:	4630      	mov	r0, r6
 80015a0:	f7ff fb16 	bl	8000bd0 <_malloc_r>
 80015a4:	b948      	cbnz	r0, 80015ba <__smakebuf_r+0x46>
 80015a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015aa:	059a      	lsls	r2, r3, #22
 80015ac:	d4ee      	bmi.n	800158c <__smakebuf_r+0x18>
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	81a3      	strh	r3, [r4, #12]
 80015b8:	e7e2      	b.n	8001580 <__smakebuf_r+0xc>
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	6020      	str	r0, [r4, #0]
 80015be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c2:	81a3      	strh	r3, [r4, #12]
 80015c4:	9b01      	ldr	r3, [sp, #4]
 80015c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80015ca:	b15b      	cbz	r3, 80015e4 <__smakebuf_r+0x70>
 80015cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015d0:	4630      	mov	r0, r6
 80015d2:	f000 f81d 	bl	8001610 <_isatty_r>
 80015d6:	b128      	cbz	r0, 80015e4 <__smakebuf_r+0x70>
 80015d8:	89a3      	ldrh	r3, [r4, #12]
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	81a3      	strh	r3, [r4, #12]
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	431d      	orrs	r5, r3
 80015e8:	81a5      	strh	r5, [r4, #12]
 80015ea:	e7cf      	b.n	800158c <__smakebuf_r+0x18>

080015ec <_fstat_r>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4d07      	ldr	r5, [pc, #28]	@ (800160c <_fstat_r+0x20>)
 80015f0:	2300      	movs	r3, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	602b      	str	r3, [r5, #0]
 80015fa:	f7fe ff28 	bl	800044e <_fstat>
 80015fe:	1c43      	adds	r3, r0, #1
 8001600:	d102      	bne.n	8001608 <_fstat_r+0x1c>
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	b103      	cbz	r3, 8001608 <_fstat_r+0x1c>
 8001606:	6023      	str	r3, [r4, #0]
 8001608:	bd38      	pop	{r3, r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	200001b8 	.word	0x200001b8

08001610 <_isatty_r>:
 8001610:	b538      	push	{r3, r4, r5, lr}
 8001612:	4d06      	ldr	r5, [pc, #24]	@ (800162c <_isatty_r+0x1c>)
 8001614:	2300      	movs	r3, #0
 8001616:	4604      	mov	r4, r0
 8001618:	4608      	mov	r0, r1
 800161a:	602b      	str	r3, [r5, #0]
 800161c:	f7fe ff27 	bl	800046e <_isatty>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	d102      	bne.n	800162a <_isatty_r+0x1a>
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	b103      	cbz	r3, 800162a <_isatty_r+0x1a>
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	bd38      	pop	{r3, r4, r5, pc}
 800162c:	200001b8 	.word	0x200001b8

08001630 <_init>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	bf00      	nop
 8001634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001636:	bc08      	pop	{r3}
 8001638:	469e      	mov	lr, r3
 800163a:	4770      	bx	lr

0800163c <_fini>:
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	bf00      	nop
 8001640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001642:	bc08      	pop	{r3}
 8001644:	469e      	mov	lr, r3
 8001646:	4770      	bx	lr
